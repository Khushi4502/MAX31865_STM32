
MAX31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b56c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800b630  0800b630  0000c630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc58  0800bc58  0000cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc60  0800bc60  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc60  0800bc60  0000cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc64  0800bc64  0000cc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800bc68  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001e8  0800be50  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800be50  0000d43c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa46  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c42  00000000  00000000  00017c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00019898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000758  00000000  00000000  0001a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fee  00000000  00000000  0001a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3de  00000000  00000000  0002d976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fe39  00000000  00000000  00039d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000a9bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ad440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b614 	.word	0x0800b614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800b614 	.word	0x0800b614

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe1b 	bl	8002078 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd5b 	bl	8001f08 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe0d 	bl	8002078 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe03 	bl	8002078 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd85 	bl	8001f90 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd7b 	bl	8001f90 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fc4b 	bl	8002e68 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f886 	bl	80026ec <__aeabi_dsub>
 80005e0:	f002 fc42 	bl	8002e68 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 fd91 	bl	800215c <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fc7c 	bl	8002f3c <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 fd88 	bl	800215c <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 f84a 	bl	80026ec <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fc37 	bl	8002ee0 <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 fd71 	bl	800215c <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fc5c 	bl	8002f3c <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 fdc0 	bl	800120c <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 fd50 	bl	8003158 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 fd4b 	bl	8003158 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fbbd 	bl	800311c <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fa8b 	bl	800311c <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 fa7f 	bl	800311c <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	0800b700 	.word	0x0800b700
 8000d78:	0800b740 	.word	0x0800b740
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f844 	bl	800311c <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 f836 	bl	800311c <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_ui2f>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	1e04      	subs	r4, r0, #0
 800118c:	d00e      	beq.n	80011ac <__aeabi_ui2f+0x24>
 800118e:	f001 ffc5 	bl	800311c <__clzsi2>
 8001192:	239e      	movs	r3, #158	@ 0x9e
 8001194:	0001      	movs	r1, r0
 8001196:	1a1b      	subs	r3, r3, r0
 8001198:	2b96      	cmp	r3, #150	@ 0x96
 800119a:	dc0c      	bgt.n	80011b6 <__aeabi_ui2f+0x2e>
 800119c:	2808      	cmp	r0, #8
 800119e:	d02f      	beq.n	8001200 <__aeabi_ui2f+0x78>
 80011a0:	3908      	subs	r1, #8
 80011a2:	408c      	lsls	r4, r1
 80011a4:	0264      	lsls	r4, r4, #9
 80011a6:	0a64      	lsrs	r4, r4, #9
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	e001      	b.n	80011b0 <__aeabi_ui2f+0x28>
 80011ac:	2000      	movs	r0, #0
 80011ae:	2400      	movs	r4, #0
 80011b0:	05c0      	lsls	r0, r0, #23
 80011b2:	4320      	orrs	r0, r4
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	2b99      	cmp	r3, #153	@ 0x99
 80011b8:	dc16      	bgt.n	80011e8 <__aeabi_ui2f+0x60>
 80011ba:	1f42      	subs	r2, r0, #5
 80011bc:	2805      	cmp	r0, #5
 80011be:	d000      	beq.n	80011c2 <__aeabi_ui2f+0x3a>
 80011c0:	4094      	lsls	r4, r2
 80011c2:	0022      	movs	r2, r4
 80011c4:	4810      	ldr	r0, [pc, #64]	@ (8001208 <__aeabi_ui2f+0x80>)
 80011c6:	4002      	ands	r2, r0
 80011c8:	0765      	lsls	r5, r4, #29
 80011ca:	d009      	beq.n	80011e0 <__aeabi_ui2f+0x58>
 80011cc:	250f      	movs	r5, #15
 80011ce:	402c      	ands	r4, r5
 80011d0:	2c04      	cmp	r4, #4
 80011d2:	d005      	beq.n	80011e0 <__aeabi_ui2f+0x58>
 80011d4:	3204      	adds	r2, #4
 80011d6:	0154      	lsls	r4, r2, #5
 80011d8:	d502      	bpl.n	80011e0 <__aeabi_ui2f+0x58>
 80011da:	239f      	movs	r3, #159	@ 0x9f
 80011dc:	4002      	ands	r2, r0
 80011de:	1a5b      	subs	r3, r3, r1
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	0a54      	lsrs	r4, r2, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e7e3      	b.n	80011b0 <__aeabi_ui2f+0x28>
 80011e8:	0002      	movs	r2, r0
 80011ea:	0020      	movs	r0, r4
 80011ec:	321b      	adds	r2, #27
 80011ee:	4090      	lsls	r0, r2
 80011f0:	0002      	movs	r2, r0
 80011f2:	1e50      	subs	r0, r2, #1
 80011f4:	4182      	sbcs	r2, r0
 80011f6:	2005      	movs	r0, #5
 80011f8:	1a40      	subs	r0, r0, r1
 80011fa:	40c4      	lsrs	r4, r0
 80011fc:	4314      	orrs	r4, r2
 80011fe:	e7e0      	b.n	80011c2 <__aeabi_ui2f+0x3a>
 8001200:	0264      	lsls	r4, r4, #9
 8001202:	2096      	movs	r0, #150	@ 0x96
 8001204:	0a64      	lsrs	r4, r4, #9
 8001206:	e7d3      	b.n	80011b0 <__aeabi_ui2f+0x28>
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_dadd>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	4657      	mov	r7, sl
 8001210:	464e      	mov	r6, r9
 8001212:	4645      	mov	r5, r8
 8001214:	46de      	mov	lr, fp
 8001216:	b5e0      	push	{r5, r6, r7, lr}
 8001218:	b083      	sub	sp, #12
 800121a:	9000      	str	r0, [sp, #0]
 800121c:	9101      	str	r1, [sp, #4]
 800121e:	030c      	lsls	r4, r1, #12
 8001220:	004f      	lsls	r7, r1, #1
 8001222:	0fce      	lsrs	r6, r1, #31
 8001224:	0a61      	lsrs	r1, r4, #9
 8001226:	9c00      	ldr	r4, [sp, #0]
 8001228:	031d      	lsls	r5, r3, #12
 800122a:	0f64      	lsrs	r4, r4, #29
 800122c:	430c      	orrs	r4, r1
 800122e:	9900      	ldr	r1, [sp, #0]
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	00c8      	lsls	r0, r1, #3
 8001236:	0059      	lsls	r1, r3, #1
 8001238:	0d4b      	lsrs	r3, r1, #21
 800123a:	4699      	mov	r9, r3
 800123c:	9a00      	ldr	r2, [sp, #0]
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	0a6d      	lsrs	r5, r5, #9
 8001242:	0fd9      	lsrs	r1, r3, #31
 8001244:	0f53      	lsrs	r3, r2, #29
 8001246:	432b      	orrs	r3, r5
 8001248:	469a      	mov	sl, r3
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	0d7f      	lsrs	r7, r7, #21
 800124e:	00da      	lsls	r2, r3, #3
 8001250:	4694      	mov	ip, r2
 8001252:	464a      	mov	r2, r9
 8001254:	46b0      	mov	r8, r6
 8001256:	1aba      	subs	r2, r7, r2
 8001258:	428e      	cmp	r6, r1
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x52>
 800125c:	e0b0      	b.n	80013c0 <__aeabi_dadd+0x1b4>
 800125e:	2a00      	cmp	r2, #0
 8001260:	dc00      	bgt.n	8001264 <__aeabi_dadd+0x58>
 8001262:	e078      	b.n	8001356 <__aeabi_dadd+0x14a>
 8001264:	4649      	mov	r1, r9
 8001266:	2900      	cmp	r1, #0
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x60>
 800126a:	e0e9      	b.n	8001440 <__aeabi_dadd+0x234>
 800126c:	49c9      	ldr	r1, [pc, #804]	@ (8001594 <__aeabi_dadd+0x388>)
 800126e:	428f      	cmp	r7, r1
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x68>
 8001272:	e195      	b.n	80015a0 <__aeabi_dadd+0x394>
 8001274:	2501      	movs	r5, #1
 8001276:	2a38      	cmp	r2, #56	@ 0x38
 8001278:	dc16      	bgt.n	80012a8 <__aeabi_dadd+0x9c>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	4653      	mov	r3, sl
 800127e:	0409      	lsls	r1, r1, #16
 8001280:	430b      	orrs	r3, r1
 8001282:	469a      	mov	sl, r3
 8001284:	2a1f      	cmp	r2, #31
 8001286:	dd00      	ble.n	800128a <__aeabi_dadd+0x7e>
 8001288:	e1e7      	b.n	800165a <__aeabi_dadd+0x44e>
 800128a:	2120      	movs	r1, #32
 800128c:	4655      	mov	r5, sl
 800128e:	1a8b      	subs	r3, r1, r2
 8001290:	4661      	mov	r1, ip
 8001292:	409d      	lsls	r5, r3
 8001294:	40d1      	lsrs	r1, r2
 8001296:	430d      	orrs	r5, r1
 8001298:	4661      	mov	r1, ip
 800129a:	4099      	lsls	r1, r3
 800129c:	1e4b      	subs	r3, r1, #1
 800129e:	4199      	sbcs	r1, r3
 80012a0:	4653      	mov	r3, sl
 80012a2:	40d3      	lsrs	r3, r2
 80012a4:	430d      	orrs	r5, r1
 80012a6:	1ae4      	subs	r4, r4, r3
 80012a8:	1b45      	subs	r5, r0, r5
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	4240      	negs	r0, r0
 80012b0:	1a24      	subs	r4, r4, r0
 80012b2:	0223      	lsls	r3, r4, #8
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_dadd+0xac>
 80012b6:	e10f      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 80012b8:	0264      	lsls	r4, r4, #9
 80012ba:	0a64      	lsrs	r4, r4, #9
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0xb6>
 80012c0:	e139      	b.n	8001536 <__aeabi_dadd+0x32a>
 80012c2:	0020      	movs	r0, r4
 80012c4:	f001 ff2a 	bl	800311c <__clzsi2>
 80012c8:	0003      	movs	r3, r0
 80012ca:	3b08      	subs	r3, #8
 80012cc:	2120      	movs	r1, #32
 80012ce:	0028      	movs	r0, r5
 80012d0:	1aca      	subs	r2, r1, r3
 80012d2:	40d0      	lsrs	r0, r2
 80012d4:	409c      	lsls	r4, r3
 80012d6:	0002      	movs	r2, r0
 80012d8:	409d      	lsls	r5, r3
 80012da:	4322      	orrs	r2, r4
 80012dc:	429f      	cmp	r7, r3
 80012de:	dd00      	ble.n	80012e2 <__aeabi_dadd+0xd6>
 80012e0:	e173      	b.n	80015ca <__aeabi_dadd+0x3be>
 80012e2:	1bd8      	subs	r0, r3, r7
 80012e4:	3001      	adds	r0, #1
 80012e6:	1a09      	subs	r1, r1, r0
 80012e8:	002c      	movs	r4, r5
 80012ea:	408d      	lsls	r5, r1
 80012ec:	40c4      	lsrs	r4, r0
 80012ee:	1e6b      	subs	r3, r5, #1
 80012f0:	419d      	sbcs	r5, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	40c2      	lsrs	r2, r0
 80012f6:	408b      	lsls	r3, r1
 80012f8:	4325      	orrs	r5, r4
 80012fa:	2700      	movs	r7, #0
 80012fc:	0014      	movs	r4, r2
 80012fe:	431d      	orrs	r5, r3
 8001300:	076b      	lsls	r3, r5, #29
 8001302:	d009      	beq.n	8001318 <__aeabi_dadd+0x10c>
 8001304:	230f      	movs	r3, #15
 8001306:	402b      	ands	r3, r5
 8001308:	2b04      	cmp	r3, #4
 800130a:	d005      	beq.n	8001318 <__aeabi_dadd+0x10c>
 800130c:	1d2b      	adds	r3, r5, #4
 800130e:	42ab      	cmp	r3, r5
 8001310:	41ad      	sbcs	r5, r5
 8001312:	426d      	negs	r5, r5
 8001314:	1964      	adds	r4, r4, r5
 8001316:	001d      	movs	r5, r3
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	d400      	bmi.n	800131e <__aeabi_dadd+0x112>
 800131c:	e12d      	b.n	800157a <__aeabi_dadd+0x36e>
 800131e:	4a9d      	ldr	r2, [pc, #628]	@ (8001594 <__aeabi_dadd+0x388>)
 8001320:	3701      	adds	r7, #1
 8001322:	4297      	cmp	r7, r2
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x11c>
 8001326:	e0d3      	b.n	80014d0 <__aeabi_dadd+0x2c4>
 8001328:	4646      	mov	r6, r8
 800132a:	499b      	ldr	r1, [pc, #620]	@ (8001598 <__aeabi_dadd+0x38c>)
 800132c:	08ed      	lsrs	r5, r5, #3
 800132e:	4021      	ands	r1, r4
 8001330:	074a      	lsls	r2, r1, #29
 8001332:	432a      	orrs	r2, r5
 8001334:	057c      	lsls	r4, r7, #21
 8001336:	024d      	lsls	r5, r1, #9
 8001338:	0b2d      	lsrs	r5, r5, #12
 800133a:	0d64      	lsrs	r4, r4, #21
 800133c:	0524      	lsls	r4, r4, #20
 800133e:	432c      	orrs	r4, r5
 8001340:	07f6      	lsls	r6, r6, #31
 8001342:	4334      	orrs	r4, r6
 8001344:	0010      	movs	r0, r2
 8001346:	0021      	movs	r1, r4
 8001348:	b003      	add	sp, #12
 800134a:	bcf0      	pop	{r4, r5, r6, r7}
 800134c:	46bb      	mov	fp, r7
 800134e:	46b2      	mov	sl, r6
 8001350:	46a9      	mov	r9, r5
 8001352:	46a0      	mov	r8, r4
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	2a00      	cmp	r2, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x150>
 800135a:	e084      	b.n	8001466 <__aeabi_dadd+0x25a>
 800135c:	464a      	mov	r2, r9
 800135e:	1bd2      	subs	r2, r2, r7
 8001360:	2f00      	cmp	r7, #0
 8001362:	d000      	beq.n	8001366 <__aeabi_dadd+0x15a>
 8001364:	e16d      	b.n	8001642 <__aeabi_dadd+0x436>
 8001366:	0025      	movs	r5, r4
 8001368:	4305      	orrs	r5, r0
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x162>
 800136c:	e127      	b.n	80015be <__aeabi_dadd+0x3b2>
 800136e:	1e56      	subs	r6, r2, #1
 8001370:	2a01      	cmp	r2, #1
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x16a>
 8001374:	e23b      	b.n	80017ee <__aeabi_dadd+0x5e2>
 8001376:	4d87      	ldr	r5, [pc, #540]	@ (8001594 <__aeabi_dadd+0x388>)
 8001378:	42aa      	cmp	r2, r5
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x172>
 800137c:	e26a      	b.n	8001854 <__aeabi_dadd+0x648>
 800137e:	2501      	movs	r5, #1
 8001380:	2e38      	cmp	r6, #56	@ 0x38
 8001382:	dc12      	bgt.n	80013aa <__aeabi_dadd+0x19e>
 8001384:	0032      	movs	r2, r6
 8001386:	2a1f      	cmp	r2, #31
 8001388:	dd00      	ble.n	800138c <__aeabi_dadd+0x180>
 800138a:	e1f8      	b.n	800177e <__aeabi_dadd+0x572>
 800138c:	2620      	movs	r6, #32
 800138e:	0025      	movs	r5, r4
 8001390:	1ab6      	subs	r6, r6, r2
 8001392:	0007      	movs	r7, r0
 8001394:	4653      	mov	r3, sl
 8001396:	40b0      	lsls	r0, r6
 8001398:	40d4      	lsrs	r4, r2
 800139a:	40b5      	lsls	r5, r6
 800139c:	40d7      	lsrs	r7, r2
 800139e:	1e46      	subs	r6, r0, #1
 80013a0:	41b0      	sbcs	r0, r6
 80013a2:	1b1b      	subs	r3, r3, r4
 80013a4:	469a      	mov	sl, r3
 80013a6:	433d      	orrs	r5, r7
 80013a8:	4305      	orrs	r5, r0
 80013aa:	4662      	mov	r2, ip
 80013ac:	1b55      	subs	r5, r2, r5
 80013ae:	45ac      	cmp	ip, r5
 80013b0:	4192      	sbcs	r2, r2
 80013b2:	4653      	mov	r3, sl
 80013b4:	4252      	negs	r2, r2
 80013b6:	000e      	movs	r6, r1
 80013b8:	464f      	mov	r7, r9
 80013ba:	4688      	mov	r8, r1
 80013bc:	1a9c      	subs	r4, r3, r2
 80013be:	e778      	b.n	80012b2 <__aeabi_dadd+0xa6>
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_dadd+0x1ba>
 80013c4:	e08e      	b.n	80014e4 <__aeabi_dadd+0x2d8>
 80013c6:	4649      	mov	r1, r9
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d175      	bne.n	80014b8 <__aeabi_dadd+0x2ac>
 80013cc:	4661      	mov	r1, ip
 80013ce:	4653      	mov	r3, sl
 80013d0:	4319      	orrs	r1, r3
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x1ca>
 80013d4:	e0f6      	b.n	80015c4 <__aeabi_dadd+0x3b8>
 80013d6:	1e51      	subs	r1, r2, #1
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x1d2>
 80013dc:	e191      	b.n	8001702 <__aeabi_dadd+0x4f6>
 80013de:	4d6d      	ldr	r5, [pc, #436]	@ (8001594 <__aeabi_dadd+0x388>)
 80013e0:	42aa      	cmp	r2, r5
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x1da>
 80013e4:	e0dc      	b.n	80015a0 <__aeabi_dadd+0x394>
 80013e6:	2501      	movs	r5, #1
 80013e8:	2938      	cmp	r1, #56	@ 0x38
 80013ea:	dc14      	bgt.n	8001416 <__aeabi_dadd+0x20a>
 80013ec:	000a      	movs	r2, r1
 80013ee:	2a1f      	cmp	r2, #31
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x1e8>
 80013f2:	e1a2      	b.n	800173a <__aeabi_dadd+0x52e>
 80013f4:	2120      	movs	r1, #32
 80013f6:	4653      	mov	r3, sl
 80013f8:	1a89      	subs	r1, r1, r2
 80013fa:	408b      	lsls	r3, r1
 80013fc:	001d      	movs	r5, r3
 80013fe:	4663      	mov	r3, ip
 8001400:	40d3      	lsrs	r3, r2
 8001402:	431d      	orrs	r5, r3
 8001404:	4663      	mov	r3, ip
 8001406:	408b      	lsls	r3, r1
 8001408:	0019      	movs	r1, r3
 800140a:	1e4b      	subs	r3, r1, #1
 800140c:	4199      	sbcs	r1, r3
 800140e:	4653      	mov	r3, sl
 8001410:	40d3      	lsrs	r3, r2
 8001412:	430d      	orrs	r5, r1
 8001414:	18e4      	adds	r4, r4, r3
 8001416:	182d      	adds	r5, r5, r0
 8001418:	4285      	cmp	r5, r0
 800141a:	4180      	sbcs	r0, r0
 800141c:	4240      	negs	r0, r0
 800141e:	1824      	adds	r4, r4, r0
 8001420:	0223      	lsls	r3, r4, #8
 8001422:	d559      	bpl.n	80014d8 <__aeabi_dadd+0x2cc>
 8001424:	4b5b      	ldr	r3, [pc, #364]	@ (8001594 <__aeabi_dadd+0x388>)
 8001426:	3701      	adds	r7, #1
 8001428:	429f      	cmp	r7, r3
 800142a:	d051      	beq.n	80014d0 <__aeabi_dadd+0x2c4>
 800142c:	2101      	movs	r1, #1
 800142e:	4b5a      	ldr	r3, [pc, #360]	@ (8001598 <__aeabi_dadd+0x38c>)
 8001430:	086a      	lsrs	r2, r5, #1
 8001432:	401c      	ands	r4, r3
 8001434:	4029      	ands	r1, r5
 8001436:	430a      	orrs	r2, r1
 8001438:	07e5      	lsls	r5, r4, #31
 800143a:	4315      	orrs	r5, r2
 800143c:	0864      	lsrs	r4, r4, #1
 800143e:	e75f      	b.n	8001300 <__aeabi_dadd+0xf4>
 8001440:	4661      	mov	r1, ip
 8001442:	4653      	mov	r3, sl
 8001444:	4319      	orrs	r1, r3
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x23e>
 8001448:	e0bc      	b.n	80015c4 <__aeabi_dadd+0x3b8>
 800144a:	1e51      	subs	r1, r2, #1
 800144c:	2a01      	cmp	r2, #1
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x246>
 8001450:	e164      	b.n	800171c <__aeabi_dadd+0x510>
 8001452:	4d50      	ldr	r5, [pc, #320]	@ (8001594 <__aeabi_dadd+0x388>)
 8001454:	42aa      	cmp	r2, r5
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x24e>
 8001458:	e16a      	b.n	8001730 <__aeabi_dadd+0x524>
 800145a:	2501      	movs	r5, #1
 800145c:	2938      	cmp	r1, #56	@ 0x38
 800145e:	dd00      	ble.n	8001462 <__aeabi_dadd+0x256>
 8001460:	e722      	b.n	80012a8 <__aeabi_dadd+0x9c>
 8001462:	000a      	movs	r2, r1
 8001464:	e70e      	b.n	8001284 <__aeabi_dadd+0x78>
 8001466:	4a4d      	ldr	r2, [pc, #308]	@ (800159c <__aeabi_dadd+0x390>)
 8001468:	1c7d      	adds	r5, r7, #1
 800146a:	4215      	tst	r5, r2
 800146c:	d000      	beq.n	8001470 <__aeabi_dadd+0x264>
 800146e:	e0d0      	b.n	8001612 <__aeabi_dadd+0x406>
 8001470:	0025      	movs	r5, r4
 8001472:	4662      	mov	r2, ip
 8001474:	4653      	mov	r3, sl
 8001476:	4305      	orrs	r5, r0
 8001478:	431a      	orrs	r2, r3
 800147a:	2f00      	cmp	r7, #0
 800147c:	d000      	beq.n	8001480 <__aeabi_dadd+0x274>
 800147e:	e137      	b.n	80016f0 <__aeabi_dadd+0x4e4>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x27a>
 8001484:	e1a8      	b.n	80017d8 <__aeabi_dadd+0x5cc>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x280>
 800148a:	e16a      	b.n	8001762 <__aeabi_dadd+0x556>
 800148c:	4663      	mov	r3, ip
 800148e:	1ac5      	subs	r5, r0, r3
 8001490:	4653      	mov	r3, sl
 8001492:	1ae2      	subs	r2, r4, r3
 8001494:	42a8      	cmp	r0, r5
 8001496:	419b      	sbcs	r3, r3
 8001498:	425b      	negs	r3, r3
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	021a      	lsls	r2, r3, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x296>
 80014a0:	e203      	b.n	80018aa <__aeabi_dadd+0x69e>
 80014a2:	4663      	mov	r3, ip
 80014a4:	1a1d      	subs	r5, r3, r0
 80014a6:	45ac      	cmp	ip, r5
 80014a8:	4192      	sbcs	r2, r2
 80014aa:	4653      	mov	r3, sl
 80014ac:	4252      	negs	r2, r2
 80014ae:	1b1c      	subs	r4, r3, r4
 80014b0:	000e      	movs	r6, r1
 80014b2:	4688      	mov	r8, r1
 80014b4:	1aa4      	subs	r4, r4, r2
 80014b6:	e723      	b.n	8001300 <__aeabi_dadd+0xf4>
 80014b8:	4936      	ldr	r1, [pc, #216]	@ (8001594 <__aeabi_dadd+0x388>)
 80014ba:	428f      	cmp	r7, r1
 80014bc:	d070      	beq.n	80015a0 <__aeabi_dadd+0x394>
 80014be:	2501      	movs	r5, #1
 80014c0:	2a38      	cmp	r2, #56	@ 0x38
 80014c2:	dca8      	bgt.n	8001416 <__aeabi_dadd+0x20a>
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	4653      	mov	r3, sl
 80014c8:	0409      	lsls	r1, r1, #16
 80014ca:	430b      	orrs	r3, r1
 80014cc:	469a      	mov	sl, r3
 80014ce:	e78e      	b.n	80013ee <__aeabi_dadd+0x1e2>
 80014d0:	003c      	movs	r4, r7
 80014d2:	2500      	movs	r5, #0
 80014d4:	2200      	movs	r2, #0
 80014d6:	e731      	b.n	800133c <__aeabi_dadd+0x130>
 80014d8:	2307      	movs	r3, #7
 80014da:	402b      	ands	r3, r5
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x2d6>
 80014e0:	e710      	b.n	8001304 <__aeabi_dadd+0xf8>
 80014e2:	e093      	b.n	800160c <__aeabi_dadd+0x400>
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d074      	beq.n	80015d2 <__aeabi_dadd+0x3c6>
 80014e8:	464a      	mov	r2, r9
 80014ea:	1bd2      	subs	r2, r2, r7
 80014ec:	2f00      	cmp	r7, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x2e6>
 80014f0:	e0c7      	b.n	8001682 <__aeabi_dadd+0x476>
 80014f2:	4928      	ldr	r1, [pc, #160]	@ (8001594 <__aeabi_dadd+0x388>)
 80014f4:	4589      	cmp	r9, r1
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x2ee>
 80014f8:	e185      	b.n	8001806 <__aeabi_dadd+0x5fa>
 80014fa:	2501      	movs	r5, #1
 80014fc:	2a38      	cmp	r2, #56	@ 0x38
 80014fe:	dc12      	bgt.n	8001526 <__aeabi_dadd+0x31a>
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0409      	lsls	r1, r1, #16
 8001504:	430c      	orrs	r4, r1
 8001506:	2a1f      	cmp	r2, #31
 8001508:	dd00      	ble.n	800150c <__aeabi_dadd+0x300>
 800150a:	e1ab      	b.n	8001864 <__aeabi_dadd+0x658>
 800150c:	2120      	movs	r1, #32
 800150e:	0025      	movs	r5, r4
 8001510:	1a89      	subs	r1, r1, r2
 8001512:	0007      	movs	r7, r0
 8001514:	4088      	lsls	r0, r1
 8001516:	408d      	lsls	r5, r1
 8001518:	40d7      	lsrs	r7, r2
 800151a:	1e41      	subs	r1, r0, #1
 800151c:	4188      	sbcs	r0, r1
 800151e:	40d4      	lsrs	r4, r2
 8001520:	433d      	orrs	r5, r7
 8001522:	4305      	orrs	r5, r0
 8001524:	44a2      	add	sl, r4
 8001526:	4465      	add	r5, ip
 8001528:	4565      	cmp	r5, ip
 800152a:	4192      	sbcs	r2, r2
 800152c:	4252      	negs	r2, r2
 800152e:	4452      	add	r2, sl
 8001530:	0014      	movs	r4, r2
 8001532:	464f      	mov	r7, r9
 8001534:	e774      	b.n	8001420 <__aeabi_dadd+0x214>
 8001536:	0028      	movs	r0, r5
 8001538:	f001 fdf0 	bl	800311c <__clzsi2>
 800153c:	0003      	movs	r3, r0
 800153e:	3318      	adds	r3, #24
 8001540:	2b1f      	cmp	r3, #31
 8001542:	dc00      	bgt.n	8001546 <__aeabi_dadd+0x33a>
 8001544:	e6c2      	b.n	80012cc <__aeabi_dadd+0xc0>
 8001546:	002a      	movs	r2, r5
 8001548:	3808      	subs	r0, #8
 800154a:	4082      	lsls	r2, r0
 800154c:	429f      	cmp	r7, r3
 800154e:	dd00      	ble.n	8001552 <__aeabi_dadd+0x346>
 8001550:	e0a9      	b.n	80016a6 <__aeabi_dadd+0x49a>
 8001552:	1bdb      	subs	r3, r3, r7
 8001554:	1c58      	adds	r0, r3, #1
 8001556:	281f      	cmp	r0, #31
 8001558:	dc00      	bgt.n	800155c <__aeabi_dadd+0x350>
 800155a:	e1ac      	b.n	80018b6 <__aeabi_dadd+0x6aa>
 800155c:	0015      	movs	r5, r2
 800155e:	3b1f      	subs	r3, #31
 8001560:	40dd      	lsrs	r5, r3
 8001562:	2820      	cmp	r0, #32
 8001564:	d005      	beq.n	8001572 <__aeabi_dadd+0x366>
 8001566:	2340      	movs	r3, #64	@ 0x40
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	409a      	lsls	r2, r3
 800156c:	1e53      	subs	r3, r2, #1
 800156e:	419a      	sbcs	r2, r3
 8001570:	4315      	orrs	r5, r2
 8001572:	2307      	movs	r3, #7
 8001574:	2700      	movs	r7, #0
 8001576:	402b      	ands	r3, r5
 8001578:	e7b0      	b.n	80014dc <__aeabi_dadd+0x2d0>
 800157a:	08ed      	lsrs	r5, r5, #3
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <__aeabi_dadd+0x388>)
 800157e:	0762      	lsls	r2, r4, #29
 8001580:	432a      	orrs	r2, r5
 8001582:	08e4      	lsrs	r4, r4, #3
 8001584:	429f      	cmp	r7, r3
 8001586:	d00f      	beq.n	80015a8 <__aeabi_dadd+0x39c>
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	0b25      	lsrs	r5, r4, #12
 800158c:	057c      	lsls	r4, r7, #21
 800158e:	0d64      	lsrs	r4, r4, #21
 8001590:	e6d4      	b.n	800133c <__aeabi_dadd+0x130>
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	000007ff 	.word	0x000007ff
 8001598:	ff7fffff 	.word	0xff7fffff
 800159c:	000007fe 	.word	0x000007fe
 80015a0:	08c0      	lsrs	r0, r0, #3
 80015a2:	0762      	lsls	r2, r4, #29
 80015a4:	4302      	orrs	r2, r0
 80015a6:	08e4      	lsrs	r4, r4, #3
 80015a8:	0013      	movs	r3, r2
 80015aa:	4323      	orrs	r3, r4
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x3a4>
 80015ae:	e186      	b.n	80018be <__aeabi_dadd+0x6b2>
 80015b0:	2580      	movs	r5, #128	@ 0x80
 80015b2:	032d      	lsls	r5, r5, #12
 80015b4:	4325      	orrs	r5, r4
 80015b6:	032d      	lsls	r5, r5, #12
 80015b8:	4cc3      	ldr	r4, [pc, #780]	@ (80018c8 <__aeabi_dadd+0x6bc>)
 80015ba:	0b2d      	lsrs	r5, r5, #12
 80015bc:	e6be      	b.n	800133c <__aeabi_dadd+0x130>
 80015be:	4660      	mov	r0, ip
 80015c0:	4654      	mov	r4, sl
 80015c2:	000e      	movs	r6, r1
 80015c4:	0017      	movs	r7, r2
 80015c6:	08c5      	lsrs	r5, r0, #3
 80015c8:	e7d8      	b.n	800157c <__aeabi_dadd+0x370>
 80015ca:	4cc0      	ldr	r4, [pc, #768]	@ (80018cc <__aeabi_dadd+0x6c0>)
 80015cc:	1aff      	subs	r7, r7, r3
 80015ce:	4014      	ands	r4, r2
 80015d0:	e696      	b.n	8001300 <__aeabi_dadd+0xf4>
 80015d2:	4abf      	ldr	r2, [pc, #764]	@ (80018d0 <__aeabi_dadd+0x6c4>)
 80015d4:	1c79      	adds	r1, r7, #1
 80015d6:	4211      	tst	r1, r2
 80015d8:	d16b      	bne.n	80016b2 <__aeabi_dadd+0x4a6>
 80015da:	0022      	movs	r2, r4
 80015dc:	4302      	orrs	r2, r0
 80015de:	2f00      	cmp	r7, #0
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x3d8>
 80015e2:	e0db      	b.n	800179c <__aeabi_dadd+0x590>
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x3de>
 80015e8:	e12d      	b.n	8001846 <__aeabi_dadd+0x63a>
 80015ea:	4662      	mov	r2, ip
 80015ec:	4653      	mov	r3, sl
 80015ee:	431a      	orrs	r2, r3
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x3e8>
 80015f2:	e0b6      	b.n	8001762 <__aeabi_dadd+0x556>
 80015f4:	4663      	mov	r3, ip
 80015f6:	18c5      	adds	r5, r0, r3
 80015f8:	4285      	cmp	r5, r0
 80015fa:	4180      	sbcs	r0, r0
 80015fc:	4454      	add	r4, sl
 80015fe:	4240      	negs	r0, r0
 8001600:	1824      	adds	r4, r4, r0
 8001602:	0223      	lsls	r3, r4, #8
 8001604:	d502      	bpl.n	800160c <__aeabi_dadd+0x400>
 8001606:	000f      	movs	r7, r1
 8001608:	4bb0      	ldr	r3, [pc, #704]	@ (80018cc <__aeabi_dadd+0x6c0>)
 800160a:	401c      	ands	r4, r3
 800160c:	003a      	movs	r2, r7
 800160e:	0028      	movs	r0, r5
 8001610:	e7d8      	b.n	80015c4 <__aeabi_dadd+0x3b8>
 8001612:	4662      	mov	r2, ip
 8001614:	1a85      	subs	r5, r0, r2
 8001616:	42a8      	cmp	r0, r5
 8001618:	4192      	sbcs	r2, r2
 800161a:	4653      	mov	r3, sl
 800161c:	4252      	negs	r2, r2
 800161e:	4691      	mov	r9, r2
 8001620:	1ae3      	subs	r3, r4, r3
 8001622:	001a      	movs	r2, r3
 8001624:	464b      	mov	r3, r9
 8001626:	1ad2      	subs	r2, r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	4691      	mov	r9, r2
 800162c:	021a      	lsls	r2, r3, #8
 800162e:	d454      	bmi.n	80016da <__aeabi_dadd+0x4ce>
 8001630:	464a      	mov	r2, r9
 8001632:	464c      	mov	r4, r9
 8001634:	432a      	orrs	r2, r5
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x42e>
 8001638:	e640      	b.n	80012bc <__aeabi_dadd+0xb0>
 800163a:	2600      	movs	r6, #0
 800163c:	2400      	movs	r4, #0
 800163e:	2500      	movs	r5, #0
 8001640:	e67c      	b.n	800133c <__aeabi_dadd+0x130>
 8001642:	4da1      	ldr	r5, [pc, #644]	@ (80018c8 <__aeabi_dadd+0x6bc>)
 8001644:	45a9      	cmp	r9, r5
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x43e>
 8001648:	e090      	b.n	800176c <__aeabi_dadd+0x560>
 800164a:	2501      	movs	r5, #1
 800164c:	2a38      	cmp	r2, #56	@ 0x38
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0x446>
 8001650:	e6ab      	b.n	80013aa <__aeabi_dadd+0x19e>
 8001652:	2580      	movs	r5, #128	@ 0x80
 8001654:	042d      	lsls	r5, r5, #16
 8001656:	432c      	orrs	r4, r5
 8001658:	e695      	b.n	8001386 <__aeabi_dadd+0x17a>
 800165a:	0011      	movs	r1, r2
 800165c:	4655      	mov	r5, sl
 800165e:	3920      	subs	r1, #32
 8001660:	40cd      	lsrs	r5, r1
 8001662:	46a9      	mov	r9, r5
 8001664:	2a20      	cmp	r2, #32
 8001666:	d006      	beq.n	8001676 <__aeabi_dadd+0x46a>
 8001668:	2140      	movs	r1, #64	@ 0x40
 800166a:	4653      	mov	r3, sl
 800166c:	1a8a      	subs	r2, r1, r2
 800166e:	4093      	lsls	r3, r2
 8001670:	4662      	mov	r2, ip
 8001672:	431a      	orrs	r2, r3
 8001674:	4694      	mov	ip, r2
 8001676:	4665      	mov	r5, ip
 8001678:	1e6b      	subs	r3, r5, #1
 800167a:	419d      	sbcs	r5, r3
 800167c:	464b      	mov	r3, r9
 800167e:	431d      	orrs	r5, r3
 8001680:	e612      	b.n	80012a8 <__aeabi_dadd+0x9c>
 8001682:	0021      	movs	r1, r4
 8001684:	4301      	orrs	r1, r0
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x47e>
 8001688:	e0c4      	b.n	8001814 <__aeabi_dadd+0x608>
 800168a:	1e51      	subs	r1, r2, #1
 800168c:	2a01      	cmp	r2, #1
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x486>
 8001690:	e0fb      	b.n	800188a <__aeabi_dadd+0x67e>
 8001692:	4d8d      	ldr	r5, [pc, #564]	@ (80018c8 <__aeabi_dadd+0x6bc>)
 8001694:	42aa      	cmp	r2, r5
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x48e>
 8001698:	e0b5      	b.n	8001806 <__aeabi_dadd+0x5fa>
 800169a:	2501      	movs	r5, #1
 800169c:	2938      	cmp	r1, #56	@ 0x38
 800169e:	dd00      	ble.n	80016a2 <__aeabi_dadd+0x496>
 80016a0:	e741      	b.n	8001526 <__aeabi_dadd+0x31a>
 80016a2:	000a      	movs	r2, r1
 80016a4:	e72f      	b.n	8001506 <__aeabi_dadd+0x2fa>
 80016a6:	4c89      	ldr	r4, [pc, #548]	@ (80018cc <__aeabi_dadd+0x6c0>)
 80016a8:	1aff      	subs	r7, r7, r3
 80016aa:	4014      	ands	r4, r2
 80016ac:	0762      	lsls	r2, r4, #29
 80016ae:	08e4      	lsrs	r4, r4, #3
 80016b0:	e76a      	b.n	8001588 <__aeabi_dadd+0x37c>
 80016b2:	4a85      	ldr	r2, [pc, #532]	@ (80018c8 <__aeabi_dadd+0x6bc>)
 80016b4:	4291      	cmp	r1, r2
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x4ae>
 80016b8:	e0e3      	b.n	8001882 <__aeabi_dadd+0x676>
 80016ba:	4663      	mov	r3, ip
 80016bc:	18c2      	adds	r2, r0, r3
 80016be:	4282      	cmp	r2, r0
 80016c0:	4180      	sbcs	r0, r0
 80016c2:	0023      	movs	r3, r4
 80016c4:	4240      	negs	r0, r0
 80016c6:	4453      	add	r3, sl
 80016c8:	181b      	adds	r3, r3, r0
 80016ca:	07dd      	lsls	r5, r3, #31
 80016cc:	085c      	lsrs	r4, r3, #1
 80016ce:	2307      	movs	r3, #7
 80016d0:	0852      	lsrs	r2, r2, #1
 80016d2:	4315      	orrs	r5, r2
 80016d4:	000f      	movs	r7, r1
 80016d6:	402b      	ands	r3, r5
 80016d8:	e700      	b.n	80014dc <__aeabi_dadd+0x2d0>
 80016da:	4663      	mov	r3, ip
 80016dc:	1a1d      	subs	r5, r3, r0
 80016de:	45ac      	cmp	ip, r5
 80016e0:	4192      	sbcs	r2, r2
 80016e2:	4653      	mov	r3, sl
 80016e4:	4252      	negs	r2, r2
 80016e6:	1b1c      	subs	r4, r3, r4
 80016e8:	000e      	movs	r6, r1
 80016ea:	4688      	mov	r8, r1
 80016ec:	1aa4      	subs	r4, r4, r2
 80016ee:	e5e5      	b.n	80012bc <__aeabi_dadd+0xb0>
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x4ea>
 80016f4:	e091      	b.n	800181a <__aeabi_dadd+0x60e>
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d138      	bne.n	800176c <__aeabi_dadd+0x560>
 80016fa:	2480      	movs	r4, #128	@ 0x80
 80016fc:	2600      	movs	r6, #0
 80016fe:	0324      	lsls	r4, r4, #12
 8001700:	e756      	b.n	80015b0 <__aeabi_dadd+0x3a4>
 8001702:	4663      	mov	r3, ip
 8001704:	18c5      	adds	r5, r0, r3
 8001706:	4285      	cmp	r5, r0
 8001708:	4180      	sbcs	r0, r0
 800170a:	4454      	add	r4, sl
 800170c:	4240      	negs	r0, r0
 800170e:	1824      	adds	r4, r4, r0
 8001710:	2701      	movs	r7, #1
 8001712:	0223      	lsls	r3, r4, #8
 8001714:	d400      	bmi.n	8001718 <__aeabi_dadd+0x50c>
 8001716:	e6df      	b.n	80014d8 <__aeabi_dadd+0x2cc>
 8001718:	2702      	movs	r7, #2
 800171a:	e687      	b.n	800142c <__aeabi_dadd+0x220>
 800171c:	4663      	mov	r3, ip
 800171e:	1ac5      	subs	r5, r0, r3
 8001720:	42a8      	cmp	r0, r5
 8001722:	4180      	sbcs	r0, r0
 8001724:	4653      	mov	r3, sl
 8001726:	4240      	negs	r0, r0
 8001728:	1ae4      	subs	r4, r4, r3
 800172a:	2701      	movs	r7, #1
 800172c:	1a24      	subs	r4, r4, r0
 800172e:	e5c0      	b.n	80012b2 <__aeabi_dadd+0xa6>
 8001730:	0762      	lsls	r2, r4, #29
 8001732:	08c0      	lsrs	r0, r0, #3
 8001734:	4302      	orrs	r2, r0
 8001736:	08e4      	lsrs	r4, r4, #3
 8001738:	e736      	b.n	80015a8 <__aeabi_dadd+0x39c>
 800173a:	0011      	movs	r1, r2
 800173c:	4653      	mov	r3, sl
 800173e:	3920      	subs	r1, #32
 8001740:	40cb      	lsrs	r3, r1
 8001742:	4699      	mov	r9, r3
 8001744:	2a20      	cmp	r2, #32
 8001746:	d006      	beq.n	8001756 <__aeabi_dadd+0x54a>
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	4653      	mov	r3, sl
 800174c:	1a8a      	subs	r2, r1, r2
 800174e:	4093      	lsls	r3, r2
 8001750:	4662      	mov	r2, ip
 8001752:	431a      	orrs	r2, r3
 8001754:	4694      	mov	ip, r2
 8001756:	4665      	mov	r5, ip
 8001758:	1e6b      	subs	r3, r5, #1
 800175a:	419d      	sbcs	r5, r3
 800175c:	464b      	mov	r3, r9
 800175e:	431d      	orrs	r5, r3
 8001760:	e659      	b.n	8001416 <__aeabi_dadd+0x20a>
 8001762:	0762      	lsls	r2, r4, #29
 8001764:	08c0      	lsrs	r0, r0, #3
 8001766:	4302      	orrs	r2, r0
 8001768:	08e4      	lsrs	r4, r4, #3
 800176a:	e70d      	b.n	8001588 <__aeabi_dadd+0x37c>
 800176c:	4653      	mov	r3, sl
 800176e:	075a      	lsls	r2, r3, #29
 8001770:	4663      	mov	r3, ip
 8001772:	08d8      	lsrs	r0, r3, #3
 8001774:	4653      	mov	r3, sl
 8001776:	000e      	movs	r6, r1
 8001778:	4302      	orrs	r2, r0
 800177a:	08dc      	lsrs	r4, r3, #3
 800177c:	e714      	b.n	80015a8 <__aeabi_dadd+0x39c>
 800177e:	0015      	movs	r5, r2
 8001780:	0026      	movs	r6, r4
 8001782:	3d20      	subs	r5, #32
 8001784:	40ee      	lsrs	r6, r5
 8001786:	2a20      	cmp	r2, #32
 8001788:	d003      	beq.n	8001792 <__aeabi_dadd+0x586>
 800178a:	2540      	movs	r5, #64	@ 0x40
 800178c:	1aaa      	subs	r2, r5, r2
 800178e:	4094      	lsls	r4, r2
 8001790:	4320      	orrs	r0, r4
 8001792:	1e42      	subs	r2, r0, #1
 8001794:	4190      	sbcs	r0, r2
 8001796:	0005      	movs	r5, r0
 8001798:	4335      	orrs	r5, r6
 800179a:	e606      	b.n	80013aa <__aeabi_dadd+0x19e>
 800179c:	2a00      	cmp	r2, #0
 800179e:	d07c      	beq.n	800189a <__aeabi_dadd+0x68e>
 80017a0:	4662      	mov	r2, ip
 80017a2:	4653      	mov	r3, sl
 80017a4:	08c0      	lsrs	r0, r0, #3
 80017a6:	431a      	orrs	r2, r3
 80017a8:	d100      	bne.n	80017ac <__aeabi_dadd+0x5a0>
 80017aa:	e6fa      	b.n	80015a2 <__aeabi_dadd+0x396>
 80017ac:	0762      	lsls	r2, r4, #29
 80017ae:	4310      	orrs	r0, r2
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	08e4      	lsrs	r4, r4, #3
 80017b4:	0312      	lsls	r2, r2, #12
 80017b6:	4214      	tst	r4, r2
 80017b8:	d008      	beq.n	80017cc <__aeabi_dadd+0x5c0>
 80017ba:	08d9      	lsrs	r1, r3, #3
 80017bc:	4211      	tst	r1, r2
 80017be:	d105      	bne.n	80017cc <__aeabi_dadd+0x5c0>
 80017c0:	4663      	mov	r3, ip
 80017c2:	08d8      	lsrs	r0, r3, #3
 80017c4:	4653      	mov	r3, sl
 80017c6:	000c      	movs	r4, r1
 80017c8:	075b      	lsls	r3, r3, #29
 80017ca:	4318      	orrs	r0, r3
 80017cc:	0f42      	lsrs	r2, r0, #29
 80017ce:	00c0      	lsls	r0, r0, #3
 80017d0:	08c0      	lsrs	r0, r0, #3
 80017d2:	0752      	lsls	r2, r2, #29
 80017d4:	4302      	orrs	r2, r0
 80017d6:	e6e7      	b.n	80015a8 <__aeabi_dadd+0x39c>
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x5d2>
 80017dc:	e72d      	b.n	800163a <__aeabi_dadd+0x42e>
 80017de:	4663      	mov	r3, ip
 80017e0:	08d8      	lsrs	r0, r3, #3
 80017e2:	4653      	mov	r3, sl
 80017e4:	075a      	lsls	r2, r3, #29
 80017e6:	000e      	movs	r6, r1
 80017e8:	4302      	orrs	r2, r0
 80017ea:	08dc      	lsrs	r4, r3, #3
 80017ec:	e6cc      	b.n	8001588 <__aeabi_dadd+0x37c>
 80017ee:	4663      	mov	r3, ip
 80017f0:	1a1d      	subs	r5, r3, r0
 80017f2:	45ac      	cmp	ip, r5
 80017f4:	4192      	sbcs	r2, r2
 80017f6:	4653      	mov	r3, sl
 80017f8:	4252      	negs	r2, r2
 80017fa:	1b1c      	subs	r4, r3, r4
 80017fc:	000e      	movs	r6, r1
 80017fe:	4688      	mov	r8, r1
 8001800:	1aa4      	subs	r4, r4, r2
 8001802:	3701      	adds	r7, #1
 8001804:	e555      	b.n	80012b2 <__aeabi_dadd+0xa6>
 8001806:	4663      	mov	r3, ip
 8001808:	08d9      	lsrs	r1, r3, #3
 800180a:	4653      	mov	r3, sl
 800180c:	075a      	lsls	r2, r3, #29
 800180e:	430a      	orrs	r2, r1
 8001810:	08dc      	lsrs	r4, r3, #3
 8001812:	e6c9      	b.n	80015a8 <__aeabi_dadd+0x39c>
 8001814:	4660      	mov	r0, ip
 8001816:	4654      	mov	r4, sl
 8001818:	e6d4      	b.n	80015c4 <__aeabi_dadd+0x3b8>
 800181a:	08c0      	lsrs	r0, r0, #3
 800181c:	2a00      	cmp	r2, #0
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x616>
 8001820:	e6bf      	b.n	80015a2 <__aeabi_dadd+0x396>
 8001822:	0762      	lsls	r2, r4, #29
 8001824:	4310      	orrs	r0, r2
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	08e4      	lsrs	r4, r4, #3
 800182a:	0312      	lsls	r2, r2, #12
 800182c:	4214      	tst	r4, r2
 800182e:	d0cd      	beq.n	80017cc <__aeabi_dadd+0x5c0>
 8001830:	08dd      	lsrs	r5, r3, #3
 8001832:	4215      	tst	r5, r2
 8001834:	d1ca      	bne.n	80017cc <__aeabi_dadd+0x5c0>
 8001836:	4663      	mov	r3, ip
 8001838:	08d8      	lsrs	r0, r3, #3
 800183a:	4653      	mov	r3, sl
 800183c:	075b      	lsls	r3, r3, #29
 800183e:	000e      	movs	r6, r1
 8001840:	002c      	movs	r4, r5
 8001842:	4318      	orrs	r0, r3
 8001844:	e7c2      	b.n	80017cc <__aeabi_dadd+0x5c0>
 8001846:	4663      	mov	r3, ip
 8001848:	08d9      	lsrs	r1, r3, #3
 800184a:	4653      	mov	r3, sl
 800184c:	075a      	lsls	r2, r3, #29
 800184e:	430a      	orrs	r2, r1
 8001850:	08dc      	lsrs	r4, r3, #3
 8001852:	e699      	b.n	8001588 <__aeabi_dadd+0x37c>
 8001854:	4663      	mov	r3, ip
 8001856:	08d8      	lsrs	r0, r3, #3
 8001858:	4653      	mov	r3, sl
 800185a:	075a      	lsls	r2, r3, #29
 800185c:	000e      	movs	r6, r1
 800185e:	4302      	orrs	r2, r0
 8001860:	08dc      	lsrs	r4, r3, #3
 8001862:	e6a1      	b.n	80015a8 <__aeabi_dadd+0x39c>
 8001864:	0011      	movs	r1, r2
 8001866:	0027      	movs	r7, r4
 8001868:	3920      	subs	r1, #32
 800186a:	40cf      	lsrs	r7, r1
 800186c:	2a20      	cmp	r2, #32
 800186e:	d003      	beq.n	8001878 <__aeabi_dadd+0x66c>
 8001870:	2140      	movs	r1, #64	@ 0x40
 8001872:	1a8a      	subs	r2, r1, r2
 8001874:	4094      	lsls	r4, r2
 8001876:	4320      	orrs	r0, r4
 8001878:	1e42      	subs	r2, r0, #1
 800187a:	4190      	sbcs	r0, r2
 800187c:	0005      	movs	r5, r0
 800187e:	433d      	orrs	r5, r7
 8001880:	e651      	b.n	8001526 <__aeabi_dadd+0x31a>
 8001882:	000c      	movs	r4, r1
 8001884:	2500      	movs	r5, #0
 8001886:	2200      	movs	r2, #0
 8001888:	e558      	b.n	800133c <__aeabi_dadd+0x130>
 800188a:	4460      	add	r0, ip
 800188c:	4560      	cmp	r0, ip
 800188e:	4192      	sbcs	r2, r2
 8001890:	4454      	add	r4, sl
 8001892:	4252      	negs	r2, r2
 8001894:	0005      	movs	r5, r0
 8001896:	18a4      	adds	r4, r4, r2
 8001898:	e73a      	b.n	8001710 <__aeabi_dadd+0x504>
 800189a:	4653      	mov	r3, sl
 800189c:	075a      	lsls	r2, r3, #29
 800189e:	4663      	mov	r3, ip
 80018a0:	08d9      	lsrs	r1, r3, #3
 80018a2:	4653      	mov	r3, sl
 80018a4:	430a      	orrs	r2, r1
 80018a6:	08dc      	lsrs	r4, r3, #3
 80018a8:	e67e      	b.n	80015a8 <__aeabi_dadd+0x39c>
 80018aa:	001a      	movs	r2, r3
 80018ac:	001c      	movs	r4, r3
 80018ae:	432a      	orrs	r2, r5
 80018b0:	d000      	beq.n	80018b4 <__aeabi_dadd+0x6a8>
 80018b2:	e6ab      	b.n	800160c <__aeabi_dadd+0x400>
 80018b4:	e6c1      	b.n	800163a <__aeabi_dadd+0x42e>
 80018b6:	2120      	movs	r1, #32
 80018b8:	2500      	movs	r5, #0
 80018ba:	1a09      	subs	r1, r1, r0
 80018bc:	e519      	b.n	80012f2 <__aeabi_dadd+0xe6>
 80018be:	2200      	movs	r2, #0
 80018c0:	2500      	movs	r5, #0
 80018c2:	4c01      	ldr	r4, [pc, #4]	@ (80018c8 <__aeabi_dadd+0x6bc>)
 80018c4:	e53a      	b.n	800133c <__aeabi_dadd+0x130>
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	000007ff 	.word	0x000007ff
 80018cc:	ff7fffff 	.word	0xff7fffff
 80018d0:	000007fe 	.word	0x000007fe

080018d4 <__aeabi_ddiv>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	46de      	mov	lr, fp
 80018d8:	4645      	mov	r5, r8
 80018da:	4657      	mov	r7, sl
 80018dc:	464e      	mov	r6, r9
 80018de:	b5e0      	push	{r5, r6, r7, lr}
 80018e0:	b087      	sub	sp, #28
 80018e2:	9200      	str	r2, [sp, #0]
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	030b      	lsls	r3, r1, #12
 80018e8:	0b1b      	lsrs	r3, r3, #12
 80018ea:	469b      	mov	fp, r3
 80018ec:	0fca      	lsrs	r2, r1, #31
 80018ee:	004b      	lsls	r3, r1, #1
 80018f0:	0004      	movs	r4, r0
 80018f2:	4680      	mov	r8, r0
 80018f4:	0d5b      	lsrs	r3, r3, #21
 80018f6:	9202      	str	r2, [sp, #8]
 80018f8:	d100      	bne.n	80018fc <__aeabi_ddiv+0x28>
 80018fa:	e16a      	b.n	8001bd2 <__aeabi_ddiv+0x2fe>
 80018fc:	4ad4      	ldr	r2, [pc, #848]	@ (8001c50 <__aeabi_ddiv+0x37c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x30>
 8001902:	e18c      	b.n	8001c1e <__aeabi_ddiv+0x34a>
 8001904:	4659      	mov	r1, fp
 8001906:	0f42      	lsrs	r2, r0, #29
 8001908:	00c9      	lsls	r1, r1, #3
 800190a:	430a      	orrs	r2, r1
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	4311      	orrs	r1, r2
 8001912:	00c2      	lsls	r2, r0, #3
 8001914:	4690      	mov	r8, r2
 8001916:	4acf      	ldr	r2, [pc, #828]	@ (8001c54 <__aeabi_ddiv+0x380>)
 8001918:	4689      	mov	r9, r1
 800191a:	4692      	mov	sl, r2
 800191c:	449a      	add	sl, r3
 800191e:	2300      	movs	r3, #0
 8001920:	2400      	movs	r4, #0
 8001922:	9303      	str	r3, [sp, #12]
 8001924:	9e00      	ldr	r6, [sp, #0]
 8001926:	9f01      	ldr	r7, [sp, #4]
 8001928:	033b      	lsls	r3, r7, #12
 800192a:	0b1b      	lsrs	r3, r3, #12
 800192c:	469b      	mov	fp, r3
 800192e:	007b      	lsls	r3, r7, #1
 8001930:	0030      	movs	r0, r6
 8001932:	0d5b      	lsrs	r3, r3, #21
 8001934:	0ffd      	lsrs	r5, r7, #31
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <__aeabi_ddiv+0x68>
 800193a:	e128      	b.n	8001b8e <__aeabi_ddiv+0x2ba>
 800193c:	4ac4      	ldr	r2, [pc, #784]	@ (8001c50 <__aeabi_ddiv+0x37c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d100      	bne.n	8001944 <__aeabi_ddiv+0x70>
 8001942:	e177      	b.n	8001c34 <__aeabi_ddiv+0x360>
 8001944:	4659      	mov	r1, fp
 8001946:	0f72      	lsrs	r2, r6, #29
 8001948:	00c9      	lsls	r1, r1, #3
 800194a:	430a      	orrs	r2, r1
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	4311      	orrs	r1, r2
 8001952:	468b      	mov	fp, r1
 8001954:	49bf      	ldr	r1, [pc, #764]	@ (8001c54 <__aeabi_ddiv+0x380>)
 8001956:	00f2      	lsls	r2, r6, #3
 8001958:	468c      	mov	ip, r1
 800195a:	4651      	mov	r1, sl
 800195c:	4463      	add	r3, ip
 800195e:	1acb      	subs	r3, r1, r3
 8001960:	469a      	mov	sl, r3
 8001962:	2300      	movs	r3, #0
 8001964:	9e02      	ldr	r6, [sp, #8]
 8001966:	406e      	eors	r6, r5
 8001968:	2c0f      	cmp	r4, #15
 800196a:	d827      	bhi.n	80019bc <__aeabi_ddiv+0xe8>
 800196c:	49ba      	ldr	r1, [pc, #744]	@ (8001c58 <__aeabi_ddiv+0x384>)
 800196e:	00a4      	lsls	r4, r4, #2
 8001970:	5909      	ldr	r1, [r1, r4]
 8001972:	468f      	mov	pc, r1
 8001974:	46cb      	mov	fp, r9
 8001976:	4642      	mov	r2, r8
 8001978:	9e02      	ldr	r6, [sp, #8]
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d016      	beq.n	80019ae <__aeabi_ddiv+0xda>
 8001980:	2b03      	cmp	r3, #3
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0xb2>
 8001984:	e2a6      	b.n	8001ed4 <__aeabi_ddiv+0x600>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d000      	beq.n	800198c <__aeabi_ddiv+0xb8>
 800198a:	e0df      	b.n	8001b4c <__aeabi_ddiv+0x278>
 800198c:	2200      	movs	r2, #0
 800198e:	2300      	movs	r3, #0
 8001990:	2400      	movs	r4, #0
 8001992:	4690      	mov	r8, r2
 8001994:	051b      	lsls	r3, r3, #20
 8001996:	4323      	orrs	r3, r4
 8001998:	07f6      	lsls	r6, r6, #31
 800199a:	4333      	orrs	r3, r6
 800199c:	4640      	mov	r0, r8
 800199e:	0019      	movs	r1, r3
 80019a0:	b007      	add	sp, #28
 80019a2:	bcf0      	pop	{r4, r5, r6, r7}
 80019a4:	46bb      	mov	fp, r7
 80019a6:	46b2      	mov	sl, r6
 80019a8:	46a9      	mov	r9, r5
 80019aa:	46a0      	mov	r8, r4
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	2200      	movs	r2, #0
 80019b0:	2400      	movs	r4, #0
 80019b2:	4690      	mov	r8, r2
 80019b4:	4ba6      	ldr	r3, [pc, #664]	@ (8001c50 <__aeabi_ddiv+0x37c>)
 80019b6:	e7ed      	b.n	8001994 <__aeabi_ddiv+0xc0>
 80019b8:	002e      	movs	r6, r5
 80019ba:	e7df      	b.n	800197c <__aeabi_ddiv+0xa8>
 80019bc:	45cb      	cmp	fp, r9
 80019be:	d200      	bcs.n	80019c2 <__aeabi_ddiv+0xee>
 80019c0:	e1d4      	b.n	8001d6c <__aeabi_ddiv+0x498>
 80019c2:	d100      	bne.n	80019c6 <__aeabi_ddiv+0xf2>
 80019c4:	e1cf      	b.n	8001d66 <__aeabi_ddiv+0x492>
 80019c6:	2301      	movs	r3, #1
 80019c8:	425b      	negs	r3, r3
 80019ca:	469c      	mov	ip, r3
 80019cc:	4644      	mov	r4, r8
 80019ce:	4648      	mov	r0, r9
 80019d0:	2700      	movs	r7, #0
 80019d2:	44e2      	add	sl, ip
 80019d4:	465b      	mov	r3, fp
 80019d6:	0e15      	lsrs	r5, r2, #24
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	431d      	orrs	r5, r3
 80019dc:	0c19      	lsrs	r1, r3, #16
 80019de:	042b      	lsls	r3, r5, #16
 80019e0:	0212      	lsls	r2, r2, #8
 80019e2:	9500      	str	r5, [sp, #0]
 80019e4:	0c1d      	lsrs	r5, r3, #16
 80019e6:	4691      	mov	r9, r2
 80019e8:	9102      	str	r1, [sp, #8]
 80019ea:	9503      	str	r5, [sp, #12]
 80019ec:	f7fe fc2e 	bl	800024c <__aeabi_uidivmod>
 80019f0:	0002      	movs	r2, r0
 80019f2:	436a      	muls	r2, r5
 80019f4:	040b      	lsls	r3, r1, #16
 80019f6:	0c21      	lsrs	r1, r4, #16
 80019f8:	4680      	mov	r8, r0
 80019fa:	4319      	orrs	r1, r3
 80019fc:	428a      	cmp	r2, r1
 80019fe:	d909      	bls.n	8001a14 <__aeabi_ddiv+0x140>
 8001a00:	9d00      	ldr	r5, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	46ac      	mov	ip, r5
 8001a06:	425b      	negs	r3, r3
 8001a08:	4461      	add	r1, ip
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	44e0      	add	r8, ip
 8001a0e:	428d      	cmp	r5, r1
 8001a10:	d800      	bhi.n	8001a14 <__aeabi_ddiv+0x140>
 8001a12:	e1fb      	b.n	8001e0c <__aeabi_ddiv+0x538>
 8001a14:	1a88      	subs	r0, r1, r2
 8001a16:	9902      	ldr	r1, [sp, #8]
 8001a18:	f7fe fc18 	bl	800024c <__aeabi_uidivmod>
 8001a1c:	9a03      	ldr	r2, [sp, #12]
 8001a1e:	0424      	lsls	r4, r4, #16
 8001a20:	4342      	muls	r2, r0
 8001a22:	0409      	lsls	r1, r1, #16
 8001a24:	0c24      	lsrs	r4, r4, #16
 8001a26:	0003      	movs	r3, r0
 8001a28:	430c      	orrs	r4, r1
 8001a2a:	42a2      	cmp	r2, r4
 8001a2c:	d906      	bls.n	8001a3c <__aeabi_ddiv+0x168>
 8001a2e:	9900      	ldr	r1, [sp, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	468c      	mov	ip, r1
 8001a34:	4464      	add	r4, ip
 8001a36:	42a1      	cmp	r1, r4
 8001a38:	d800      	bhi.n	8001a3c <__aeabi_ddiv+0x168>
 8001a3a:	e1e1      	b.n	8001e00 <__aeabi_ddiv+0x52c>
 8001a3c:	1aa0      	subs	r0, r4, r2
 8001a3e:	4642      	mov	r2, r8
 8001a40:	0412      	lsls	r2, r2, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	4693      	mov	fp, r2
 8001a46:	464b      	mov	r3, r9
 8001a48:	4659      	mov	r1, fp
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	001d      	movs	r5, r3
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	040b      	lsls	r3, r1, #16
 8001a52:	4649      	mov	r1, r9
 8001a54:	0409      	lsls	r1, r1, #16
 8001a56:	0c09      	lsrs	r1, r1, #16
 8001a58:	000c      	movs	r4, r1
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	435c      	muls	r4, r3
 8001a5e:	0c12      	lsrs	r2, r2, #16
 8001a60:	436b      	muls	r3, r5
 8001a62:	4688      	mov	r8, r1
 8001a64:	4351      	muls	r1, r2
 8001a66:	436a      	muls	r2, r5
 8001a68:	0c25      	lsrs	r5, r4, #16
 8001a6a:	46ac      	mov	ip, r5
 8001a6c:	185b      	adds	r3, r3, r1
 8001a6e:	4463      	add	r3, ip
 8001a70:	4299      	cmp	r1, r3
 8001a72:	d903      	bls.n	8001a7c <__aeabi_ddiv+0x1a8>
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0249      	lsls	r1, r1, #9
 8001a78:	468c      	mov	ip, r1
 8001a7a:	4462      	add	r2, ip
 8001a7c:	0c19      	lsrs	r1, r3, #16
 8001a7e:	0424      	lsls	r4, r4, #16
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	0c24      	lsrs	r4, r4, #16
 8001a84:	188a      	adds	r2, r1, r2
 8001a86:	191c      	adds	r4, r3, r4
 8001a88:	4290      	cmp	r0, r2
 8001a8a:	d302      	bcc.n	8001a92 <__aeabi_ddiv+0x1be>
 8001a8c:	d116      	bne.n	8001abc <__aeabi_ddiv+0x1e8>
 8001a8e:	42a7      	cmp	r7, r4
 8001a90:	d214      	bcs.n	8001abc <__aeabi_ddiv+0x1e8>
 8001a92:	465b      	mov	r3, fp
 8001a94:	9d00      	ldr	r5, [sp, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	444f      	add	r7, r9
 8001a9a:	9305      	str	r3, [sp, #20]
 8001a9c:	454f      	cmp	r7, r9
 8001a9e:	419b      	sbcs	r3, r3
 8001aa0:	46ac      	mov	ip, r5
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	4463      	add	r3, ip
 8001aa6:	18c0      	adds	r0, r0, r3
 8001aa8:	4285      	cmp	r5, r0
 8001aaa:	d300      	bcc.n	8001aae <__aeabi_ddiv+0x1da>
 8001aac:	e1a1      	b.n	8001df2 <__aeabi_ddiv+0x51e>
 8001aae:	4282      	cmp	r2, r0
 8001ab0:	d900      	bls.n	8001ab4 <__aeabi_ddiv+0x1e0>
 8001ab2:	e1f6      	b.n	8001ea2 <__aeabi_ddiv+0x5ce>
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x1e4>
 8001ab6:	e1f1      	b.n	8001e9c <__aeabi_ddiv+0x5c8>
 8001ab8:	9b05      	ldr	r3, [sp, #20]
 8001aba:	469b      	mov	fp, r3
 8001abc:	1b3c      	subs	r4, r7, r4
 8001abe:	42a7      	cmp	r7, r4
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	9d00      	ldr	r5, [sp, #0]
 8001ac4:	1a80      	subs	r0, r0, r2
 8001ac6:	427f      	negs	r7, r7
 8001ac8:	1bc0      	subs	r0, r0, r7
 8001aca:	4285      	cmp	r5, r0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x1fc>
 8001ace:	e1d0      	b.n	8001e72 <__aeabi_ddiv+0x59e>
 8001ad0:	9902      	ldr	r1, [sp, #8]
 8001ad2:	f7fe fbbb 	bl	800024c <__aeabi_uidivmod>
 8001ad6:	9a03      	ldr	r2, [sp, #12]
 8001ad8:	040b      	lsls	r3, r1, #16
 8001ada:	4342      	muls	r2, r0
 8001adc:	0c21      	lsrs	r1, r4, #16
 8001ade:	0007      	movs	r7, r0
 8001ae0:	4319      	orrs	r1, r3
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d900      	bls.n	8001ae8 <__aeabi_ddiv+0x214>
 8001ae6:	e178      	b.n	8001dda <__aeabi_ddiv+0x506>
 8001ae8:	1a88      	subs	r0, r1, r2
 8001aea:	9902      	ldr	r1, [sp, #8]
 8001aec:	f7fe fbae 	bl	800024c <__aeabi_uidivmod>
 8001af0:	9a03      	ldr	r2, [sp, #12]
 8001af2:	0424      	lsls	r4, r4, #16
 8001af4:	4342      	muls	r2, r0
 8001af6:	0409      	lsls	r1, r1, #16
 8001af8:	0c24      	lsrs	r4, r4, #16
 8001afa:	0003      	movs	r3, r0
 8001afc:	430c      	orrs	r4, r1
 8001afe:	42a2      	cmp	r2, r4
 8001b00:	d900      	bls.n	8001b04 <__aeabi_ddiv+0x230>
 8001b02:	e15d      	b.n	8001dc0 <__aeabi_ddiv+0x4ec>
 8001b04:	4641      	mov	r1, r8
 8001b06:	1aa4      	subs	r4, r4, r2
 8001b08:	043a      	lsls	r2, r7, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	9d04      	ldr	r5, [sp, #16]
 8001b0e:	0413      	lsls	r3, r2, #16
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	4359      	muls	r1, r3
 8001b14:	4647      	mov	r7, r8
 8001b16:	436b      	muls	r3, r5
 8001b18:	469c      	mov	ip, r3
 8001b1a:	0c10      	lsrs	r0, r2, #16
 8001b1c:	4347      	muls	r7, r0
 8001b1e:	0c0b      	lsrs	r3, r1, #16
 8001b20:	44bc      	add	ip, r7
 8001b22:	4463      	add	r3, ip
 8001b24:	4368      	muls	r0, r5
 8001b26:	429f      	cmp	r7, r3
 8001b28:	d903      	bls.n	8001b32 <__aeabi_ddiv+0x25e>
 8001b2a:	2580      	movs	r5, #128	@ 0x80
 8001b2c:	026d      	lsls	r5, r5, #9
 8001b2e:	46ac      	mov	ip, r5
 8001b30:	4460      	add	r0, ip
 8001b32:	0c1f      	lsrs	r7, r3, #16
 8001b34:	0409      	lsls	r1, r1, #16
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	0c09      	lsrs	r1, r1, #16
 8001b3a:	183f      	adds	r7, r7, r0
 8001b3c:	185b      	adds	r3, r3, r1
 8001b3e:	42bc      	cmp	r4, r7
 8001b40:	d200      	bcs.n	8001b44 <__aeabi_ddiv+0x270>
 8001b42:	e102      	b.n	8001d4a <__aeabi_ddiv+0x476>
 8001b44:	d100      	bne.n	8001b48 <__aeabi_ddiv+0x274>
 8001b46:	e0fd      	b.n	8001d44 <__aeabi_ddiv+0x470>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <__aeabi_ddiv+0x388>)
 8001b4e:	4453      	add	r3, sl
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_ddiv+0x282>
 8001b54:	e0ae      	b.n	8001cb4 <__aeabi_ddiv+0x3e0>
 8001b56:	0751      	lsls	r1, r2, #29
 8001b58:	d000      	beq.n	8001b5c <__aeabi_ddiv+0x288>
 8001b5a:	e198      	b.n	8001e8e <__aeabi_ddiv+0x5ba>
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	01c9      	lsls	r1, r1, #7
 8001b60:	d506      	bpl.n	8001b70 <__aeabi_ddiv+0x29c>
 8001b62:	4659      	mov	r1, fp
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <__aeabi_ddiv+0x38c>)
 8001b66:	4019      	ands	r1, r3
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	468b      	mov	fp, r1
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4453      	add	r3, sl
 8001b70:	493c      	ldr	r1, [pc, #240]	@ (8001c64 <__aeabi_ddiv+0x390>)
 8001b72:	428b      	cmp	r3, r1
 8001b74:	dd00      	ble.n	8001b78 <__aeabi_ddiv+0x2a4>
 8001b76:	e71a      	b.n	80019ae <__aeabi_ddiv+0xda>
 8001b78:	4659      	mov	r1, fp
 8001b7a:	08d2      	lsrs	r2, r2, #3
 8001b7c:	0749      	lsls	r1, r1, #29
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	465a      	mov	r2, fp
 8001b82:	055b      	lsls	r3, r3, #21
 8001b84:	0254      	lsls	r4, r2, #9
 8001b86:	4688      	mov	r8, r1
 8001b88:	0b24      	lsrs	r4, r4, #12
 8001b8a:	0d5b      	lsrs	r3, r3, #21
 8001b8c:	e702      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001b8e:	465a      	mov	r2, fp
 8001b90:	9b00      	ldr	r3, [sp, #0]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	d100      	bne.n	8001b98 <__aeabi_ddiv+0x2c4>
 8001b96:	e07e      	b.n	8001c96 <__aeabi_ddiv+0x3c2>
 8001b98:	465b      	mov	r3, fp
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_ddiv+0x2cc>
 8001b9e:	e100      	b.n	8001da2 <__aeabi_ddiv+0x4ce>
 8001ba0:	4658      	mov	r0, fp
 8001ba2:	f001 fabb 	bl	800311c <__clzsi2>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	0003      	movs	r3, r0
 8001baa:	3a0b      	subs	r2, #11
 8001bac:	271d      	movs	r7, #29
 8001bae:	9e00      	ldr	r6, [sp, #0]
 8001bb0:	1aba      	subs	r2, r7, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4658      	mov	r0, fp
 8001bb6:	40d6      	lsrs	r6, r2
 8001bb8:	3908      	subs	r1, #8
 8001bba:	4088      	lsls	r0, r1
 8001bbc:	0032      	movs	r2, r6
 8001bbe:	4302      	orrs	r2, r0
 8001bc0:	4693      	mov	fp, r2
 8001bc2:	9a00      	ldr	r2, [sp, #0]
 8001bc4:	408a      	lsls	r2, r1
 8001bc6:	4928      	ldr	r1, [pc, #160]	@ (8001c68 <__aeabi_ddiv+0x394>)
 8001bc8:	4453      	add	r3, sl
 8001bca:	468a      	mov	sl, r1
 8001bcc:	449a      	add	sl, r3
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e6c8      	b.n	8001964 <__aeabi_ddiv+0x90>
 8001bd2:	465b      	mov	r3, fp
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	d056      	beq.n	8001c88 <__aeabi_ddiv+0x3b4>
 8001bda:	465b      	mov	r3, fp
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_ddiv+0x30e>
 8001be0:	e0cd      	b.n	8001d7e <__aeabi_ddiv+0x4aa>
 8001be2:	4658      	mov	r0, fp
 8001be4:	f001 fa9a 	bl	800311c <__clzsi2>
 8001be8:	230b      	movs	r3, #11
 8001bea:	425b      	negs	r3, r3
 8001bec:	469c      	mov	ip, r3
 8001bee:	0002      	movs	r2, r0
 8001bf0:	4484      	add	ip, r0
 8001bf2:	4666      	mov	r6, ip
 8001bf4:	231d      	movs	r3, #29
 8001bf6:	1b9b      	subs	r3, r3, r6
 8001bf8:	0026      	movs	r6, r4
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	4658      	mov	r0, fp
 8001bfe:	40de      	lsrs	r6, r3
 8001c00:	3908      	subs	r1, #8
 8001c02:	4088      	lsls	r0, r1
 8001c04:	0033      	movs	r3, r6
 8001c06:	4303      	orrs	r3, r0
 8001c08:	4699      	mov	r9, r3
 8001c0a:	0023      	movs	r3, r4
 8001c0c:	408b      	lsls	r3, r1
 8001c0e:	4698      	mov	r8, r3
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <__aeabi_ddiv+0x398>)
 8001c12:	2400      	movs	r4, #0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	469a      	mov	sl, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9303      	str	r3, [sp, #12]
 8001c1c:	e682      	b.n	8001924 <__aeabi_ddiv+0x50>
 8001c1e:	465a      	mov	r2, fp
 8001c20:	4302      	orrs	r2, r0
 8001c22:	4691      	mov	r9, r2
 8001c24:	d12a      	bne.n	8001c7c <__aeabi_ddiv+0x3a8>
 8001c26:	2200      	movs	r2, #0
 8001c28:	469a      	mov	sl, r3
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	2408      	movs	r4, #8
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	e677      	b.n	8001924 <__aeabi_ddiv+0x50>
 8001c34:	465a      	mov	r2, fp
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <__aeabi_ddiv+0x39c>)
 8001c3c:	469c      	mov	ip, r3
 8001c3e:	44e2      	add	sl, ip
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d117      	bne.n	8001c74 <__aeabi_ddiv+0x3a0>
 8001c44:	2302      	movs	r3, #2
 8001c46:	431c      	orrs	r4, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	469b      	mov	fp, r3
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	e689      	b.n	8001964 <__aeabi_ddiv+0x90>
 8001c50:	000007ff 	.word	0x000007ff
 8001c54:	fffffc01 	.word	0xfffffc01
 8001c58:	0800b77c 	.word	0x0800b77c
 8001c5c:	000003ff 	.word	0x000003ff
 8001c60:	feffffff 	.word	0xfeffffff
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	000003f3 	.word	0x000003f3
 8001c6c:	fffffc0d 	.word	0xfffffc0d
 8001c70:	fffff801 	.word	0xfffff801
 8001c74:	2303      	movs	r3, #3
 8001c76:	0032      	movs	r2, r6
 8001c78:	431c      	orrs	r4, r3
 8001c7a:	e673      	b.n	8001964 <__aeabi_ddiv+0x90>
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	2303      	movs	r3, #3
 8001c80:	46d9      	mov	r9, fp
 8001c82:	240c      	movs	r4, #12
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	e64d      	b.n	8001924 <__aeabi_ddiv+0x50>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	469a      	mov	sl, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2404      	movs	r4, #4
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	e646      	b.n	8001924 <__aeabi_ddiv+0x50>
 8001c96:	2301      	movs	r3, #1
 8001c98:	431c      	orrs	r4, r3
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	e660      	b.n	8001964 <__aeabi_ddiv+0x90>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2480      	movs	r4, #128	@ 0x80
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	2600      	movs	r6, #0
 8001caa:	4b92      	ldr	r3, [pc, #584]	@ (8001ef4 <__aeabi_ddiv+0x620>)
 8001cac:	0324      	lsls	r4, r4, #12
 8001cae:	e671      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	1ac9      	subs	r1, r1, r3
 8001cb8:	2938      	cmp	r1, #56	@ 0x38
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_ddiv+0x3ea>
 8001cbc:	e666      	b.n	800198c <__aeabi_ddiv+0xb8>
 8001cbe:	291f      	cmp	r1, #31
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_ddiv+0x3f0>
 8001cc2:	e0ab      	b.n	8001e1c <__aeabi_ddiv+0x548>
 8001cc4:	201f      	movs	r0, #31
 8001cc6:	4240      	negs	r0, r0
 8001cc8:	1ac3      	subs	r3, r0, r3
 8001cca:	4658      	mov	r0, fp
 8001ccc:	40d8      	lsrs	r0, r3
 8001cce:	0003      	movs	r3, r0
 8001cd0:	2920      	cmp	r1, #32
 8001cd2:	d004      	beq.n	8001cde <__aeabi_ddiv+0x40a>
 8001cd4:	4658      	mov	r0, fp
 8001cd6:	4988      	ldr	r1, [pc, #544]	@ (8001ef8 <__aeabi_ddiv+0x624>)
 8001cd8:	4451      	add	r1, sl
 8001cda:	4088      	lsls	r0, r1
 8001cdc:	4302      	orrs	r2, r0
 8001cde:	1e51      	subs	r1, r2, #1
 8001ce0:	418a      	sbcs	r2, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	2400      	movs	r4, #0
 8001cea:	4011      	ands	r1, r2
 8001cec:	4213      	tst	r3, r2
 8001cee:	d00c      	beq.n	8001d0a <__aeabi_ddiv+0x436>
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_ddiv+0x426>
 8001cf8:	e0f9      	b.n	8001eee <__aeabi_ddiv+0x61a>
 8001cfa:	1d11      	adds	r1, r2, #4
 8001cfc:	4291      	cmp	r1, r2
 8001cfe:	419b      	sbcs	r3, r3
 8001d00:	000a      	movs	r2, r1
 8001d02:	425b      	negs	r3, r3
 8001d04:	0759      	lsls	r1, r3, #29
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	0b1c      	lsrs	r4, r3, #12
 8001d0a:	08d2      	lsrs	r2, r2, #3
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	4690      	mov	r8, r2
 8001d10:	2300      	movs	r3, #0
 8001d12:	e63f      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001d14:	2480      	movs	r4, #128	@ 0x80
 8001d16:	464b      	mov	r3, r9
 8001d18:	0324      	lsls	r4, r4, #12
 8001d1a:	4223      	tst	r3, r4
 8001d1c:	d009      	beq.n	8001d32 <__aeabi_ddiv+0x45e>
 8001d1e:	465b      	mov	r3, fp
 8001d20:	4223      	tst	r3, r4
 8001d22:	d106      	bne.n	8001d32 <__aeabi_ddiv+0x45e>
 8001d24:	431c      	orrs	r4, r3
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	002e      	movs	r6, r5
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4b71      	ldr	r3, [pc, #452]	@ (8001ef4 <__aeabi_ddiv+0x620>)
 8001d2e:	0b24      	lsrs	r4, r4, #12
 8001d30:	e630      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001d32:	2480      	movs	r4, #128	@ 0x80
 8001d34:	464b      	mov	r3, r9
 8001d36:	0324      	lsls	r4, r4, #12
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	0324      	lsls	r4, r4, #12
 8001d3c:	9e02      	ldr	r6, [sp, #8]
 8001d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef4 <__aeabi_ddiv+0x620>)
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	e627      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d100      	bne.n	8001d4a <__aeabi_ddiv+0x476>
 8001d48:	e700      	b.n	8001b4c <__aeabi_ddiv+0x278>
 8001d4a:	9800      	ldr	r0, [sp, #0]
 8001d4c:	1e51      	subs	r1, r2, #1
 8001d4e:	4684      	mov	ip, r0
 8001d50:	4464      	add	r4, ip
 8001d52:	4284      	cmp	r4, r0
 8001d54:	d200      	bcs.n	8001d58 <__aeabi_ddiv+0x484>
 8001d56:	e084      	b.n	8001e62 <__aeabi_ddiv+0x58e>
 8001d58:	42bc      	cmp	r4, r7
 8001d5a:	d200      	bcs.n	8001d5e <__aeabi_ddiv+0x48a>
 8001d5c:	e0ae      	b.n	8001ebc <__aeabi_ddiv+0x5e8>
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x48e>
 8001d60:	e0c1      	b.n	8001ee6 <__aeabi_ddiv+0x612>
 8001d62:	000a      	movs	r2, r1
 8001d64:	e6f0      	b.n	8001b48 <__aeabi_ddiv+0x274>
 8001d66:	4542      	cmp	r2, r8
 8001d68:	d900      	bls.n	8001d6c <__aeabi_ddiv+0x498>
 8001d6a:	e62c      	b.n	80019c6 <__aeabi_ddiv+0xf2>
 8001d6c:	464b      	mov	r3, r9
 8001d6e:	07dc      	lsls	r4, r3, #31
 8001d70:	0858      	lsrs	r0, r3, #1
 8001d72:	4643      	mov	r3, r8
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	431c      	orrs	r4, r3
 8001d78:	4643      	mov	r3, r8
 8001d7a:	07df      	lsls	r7, r3, #31
 8001d7c:	e62a      	b.n	80019d4 <__aeabi_ddiv+0x100>
 8001d7e:	f001 f9cd 	bl	800311c <__clzsi2>
 8001d82:	2315      	movs	r3, #21
 8001d84:	469c      	mov	ip, r3
 8001d86:	4484      	add	ip, r0
 8001d88:	0002      	movs	r2, r0
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	3220      	adds	r2, #32
 8001d8e:	2b1c      	cmp	r3, #28
 8001d90:	dc00      	bgt.n	8001d94 <__aeabi_ddiv+0x4c0>
 8001d92:	e72e      	b.n	8001bf2 <__aeabi_ddiv+0x31e>
 8001d94:	0023      	movs	r3, r4
 8001d96:	3808      	subs	r0, #8
 8001d98:	4083      	lsls	r3, r0
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	e736      	b.n	8001c10 <__aeabi_ddiv+0x33c>
 8001da2:	f001 f9bb 	bl	800311c <__clzsi2>
 8001da6:	0002      	movs	r2, r0
 8001da8:	0003      	movs	r3, r0
 8001daa:	3215      	adds	r2, #21
 8001dac:	3320      	adds	r3, #32
 8001dae:	2a1c      	cmp	r2, #28
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_ddiv+0x4e0>
 8001db2:	e6fb      	b.n	8001bac <__aeabi_ddiv+0x2d8>
 8001db4:	9900      	ldr	r1, [sp, #0]
 8001db6:	3808      	subs	r0, #8
 8001db8:	4081      	lsls	r1, r0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	468b      	mov	fp, r1
 8001dbe:	e702      	b.n	8001bc6 <__aeabi_ddiv+0x2f2>
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	468c      	mov	ip, r1
 8001dc6:	4464      	add	r4, ip
 8001dc8:	42a1      	cmp	r1, r4
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x4fa>
 8001dcc:	e69a      	b.n	8001b04 <__aeabi_ddiv+0x230>
 8001dce:	42a2      	cmp	r2, r4
 8001dd0:	d800      	bhi.n	8001dd4 <__aeabi_ddiv+0x500>
 8001dd2:	e697      	b.n	8001b04 <__aeabi_ddiv+0x230>
 8001dd4:	1e83      	subs	r3, r0, #2
 8001dd6:	4464      	add	r4, ip
 8001dd8:	e694      	b.n	8001b04 <__aeabi_ddiv+0x230>
 8001dda:	46ac      	mov	ip, r5
 8001ddc:	4461      	add	r1, ip
 8001dde:	3f01      	subs	r7, #1
 8001de0:	428d      	cmp	r5, r1
 8001de2:	d900      	bls.n	8001de6 <__aeabi_ddiv+0x512>
 8001de4:	e680      	b.n	8001ae8 <__aeabi_ddiv+0x214>
 8001de6:	428a      	cmp	r2, r1
 8001de8:	d800      	bhi.n	8001dec <__aeabi_ddiv+0x518>
 8001dea:	e67d      	b.n	8001ae8 <__aeabi_ddiv+0x214>
 8001dec:	1e87      	subs	r7, r0, #2
 8001dee:	4461      	add	r1, ip
 8001df0:	e67a      	b.n	8001ae8 <__aeabi_ddiv+0x214>
 8001df2:	4285      	cmp	r5, r0
 8001df4:	d000      	beq.n	8001df8 <__aeabi_ddiv+0x524>
 8001df6:	e65f      	b.n	8001ab8 <__aeabi_ddiv+0x1e4>
 8001df8:	45b9      	cmp	r9, r7
 8001dfa:	d900      	bls.n	8001dfe <__aeabi_ddiv+0x52a>
 8001dfc:	e65c      	b.n	8001ab8 <__aeabi_ddiv+0x1e4>
 8001dfe:	e656      	b.n	8001aae <__aeabi_ddiv+0x1da>
 8001e00:	42a2      	cmp	r2, r4
 8001e02:	d800      	bhi.n	8001e06 <__aeabi_ddiv+0x532>
 8001e04:	e61a      	b.n	8001a3c <__aeabi_ddiv+0x168>
 8001e06:	1e83      	subs	r3, r0, #2
 8001e08:	4464      	add	r4, ip
 8001e0a:	e617      	b.n	8001a3c <__aeabi_ddiv+0x168>
 8001e0c:	428a      	cmp	r2, r1
 8001e0e:	d800      	bhi.n	8001e12 <__aeabi_ddiv+0x53e>
 8001e10:	e600      	b.n	8001a14 <__aeabi_ddiv+0x140>
 8001e12:	46ac      	mov	ip, r5
 8001e14:	1e83      	subs	r3, r0, #2
 8001e16:	4698      	mov	r8, r3
 8001e18:	4461      	add	r1, ip
 8001e1a:	e5fb      	b.n	8001a14 <__aeabi_ddiv+0x140>
 8001e1c:	4837      	ldr	r0, [pc, #220]	@ (8001efc <__aeabi_ddiv+0x628>)
 8001e1e:	0014      	movs	r4, r2
 8001e20:	4450      	add	r0, sl
 8001e22:	4082      	lsls	r2, r0
 8001e24:	465b      	mov	r3, fp
 8001e26:	0017      	movs	r7, r2
 8001e28:	4083      	lsls	r3, r0
 8001e2a:	40cc      	lsrs	r4, r1
 8001e2c:	1e7a      	subs	r2, r7, #1
 8001e2e:	4197      	sbcs	r7, r2
 8001e30:	4323      	orrs	r3, r4
 8001e32:	433b      	orrs	r3, r7
 8001e34:	001a      	movs	r2, r3
 8001e36:	465b      	mov	r3, fp
 8001e38:	40cb      	lsrs	r3, r1
 8001e3a:	0751      	lsls	r1, r2, #29
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_ddiv+0x57e>
 8001e3e:	210f      	movs	r1, #15
 8001e40:	4011      	ands	r1, r2
 8001e42:	2904      	cmp	r1, #4
 8001e44:	d005      	beq.n	8001e52 <__aeabi_ddiv+0x57e>
 8001e46:	1d11      	adds	r1, r2, #4
 8001e48:	4291      	cmp	r1, r2
 8001e4a:	4192      	sbcs	r2, r2
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	000a      	movs	r2, r1
 8001e52:	0219      	lsls	r1, r3, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_ddiv+0x584>
 8001e56:	e755      	b.n	8001d04 <__aeabi_ddiv+0x430>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	4690      	mov	r8, r2
 8001e60:	e598      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001e62:	000a      	movs	r2, r1
 8001e64:	42bc      	cmp	r4, r7
 8001e66:	d000      	beq.n	8001e6a <__aeabi_ddiv+0x596>
 8001e68:	e66e      	b.n	8001b48 <__aeabi_ddiv+0x274>
 8001e6a:	454b      	cmp	r3, r9
 8001e6c:	d000      	beq.n	8001e70 <__aeabi_ddiv+0x59c>
 8001e6e:	e66b      	b.n	8001b48 <__aeabi_ddiv+0x274>
 8001e70:	e66c      	b.n	8001b4c <__aeabi_ddiv+0x278>
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <__aeabi_ddiv+0x62c>)
 8001e74:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <__aeabi_ddiv+0x630>)
 8001e76:	4453      	add	r3, sl
 8001e78:	4592      	cmp	sl, r2
 8001e7a:	da00      	bge.n	8001e7e <__aeabi_ddiv+0x5aa>
 8001e7c:	e718      	b.n	8001cb0 <__aeabi_ddiv+0x3dc>
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4249      	negs	r1, r1
 8001e82:	1d0a      	adds	r2, r1, #4
 8001e84:	428a      	cmp	r2, r1
 8001e86:	4189      	sbcs	r1, r1
 8001e88:	4249      	negs	r1, r1
 8001e8a:	448b      	add	fp, r1
 8001e8c:	e666      	b.n	8001b5c <__aeabi_ddiv+0x288>
 8001e8e:	210f      	movs	r1, #15
 8001e90:	4011      	ands	r1, r2
 8001e92:	2904      	cmp	r1, #4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_ddiv+0x5c4>
 8001e96:	e661      	b.n	8001b5c <__aeabi_ddiv+0x288>
 8001e98:	0011      	movs	r1, r2
 8001e9a:	e7f2      	b.n	8001e82 <__aeabi_ddiv+0x5ae>
 8001e9c:	42bc      	cmp	r4, r7
 8001e9e:	d800      	bhi.n	8001ea2 <__aeabi_ddiv+0x5ce>
 8001ea0:	e60a      	b.n	8001ab8 <__aeabi_ddiv+0x1e4>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	469c      	mov	ip, r3
 8001ea8:	9900      	ldr	r1, [sp, #0]
 8001eaa:	444f      	add	r7, r9
 8001eac:	454f      	cmp	r7, r9
 8001eae:	419b      	sbcs	r3, r3
 8001eb0:	44e3      	add	fp, ip
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	4463      	add	r3, ip
 8001eb8:	18c0      	adds	r0, r0, r3
 8001eba:	e5ff      	b.n	8001abc <__aeabi_ddiv+0x1e8>
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	9d00      	ldr	r5, [sp, #0]
 8001ec0:	0048      	lsls	r0, r1, #1
 8001ec2:	4548      	cmp	r0, r9
 8001ec4:	4189      	sbcs	r1, r1
 8001ec6:	46ac      	mov	ip, r5
 8001ec8:	4249      	negs	r1, r1
 8001eca:	4461      	add	r1, ip
 8001ecc:	4681      	mov	r9, r0
 8001ece:	3a02      	subs	r2, #2
 8001ed0:	1864      	adds	r4, r4, r1
 8001ed2:	e7c7      	b.n	8001e64 <__aeabi_ddiv+0x590>
 8001ed4:	2480      	movs	r4, #128	@ 0x80
 8001ed6:	465b      	mov	r3, fp
 8001ed8:	0324      	lsls	r4, r4, #12
 8001eda:	431c      	orrs	r4, r3
 8001edc:	0324      	lsls	r4, r4, #12
 8001ede:	4690      	mov	r8, r2
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__aeabi_ddiv+0x620>)
 8001ee2:	0b24      	lsrs	r4, r4, #12
 8001ee4:	e556      	b.n	8001994 <__aeabi_ddiv+0xc0>
 8001ee6:	4599      	cmp	r9, r3
 8001ee8:	d3e8      	bcc.n	8001ebc <__aeabi_ddiv+0x5e8>
 8001eea:	000a      	movs	r2, r1
 8001eec:	e7bd      	b.n	8001e6a <__aeabi_ddiv+0x596>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e708      	b.n	8001d04 <__aeabi_ddiv+0x430>
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	0000043e 	.word	0x0000043e
 8001efc:	0000041e 	.word	0x0000041e
 8001f00:	000003ff 	.word	0x000003ff
 8001f04:	fffffc02 	.word	0xfffffc02

08001f08 <__eqdf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	4657      	mov	r7, sl
 8001f0c:	46de      	mov	lr, fp
 8001f0e:	464e      	mov	r6, r9
 8001f10:	4645      	mov	r5, r8
 8001f12:	b5e0      	push	{r5, r6, r7, lr}
 8001f14:	000d      	movs	r5, r1
 8001f16:	0004      	movs	r4, r0
 8001f18:	0fe8      	lsrs	r0, r5, #31
 8001f1a:	4683      	mov	fp, r0
 8001f1c:	0309      	lsls	r1, r1, #12
 8001f1e:	0fd8      	lsrs	r0, r3, #31
 8001f20:	0b09      	lsrs	r1, r1, #12
 8001f22:	4682      	mov	sl, r0
 8001f24:	4819      	ldr	r0, [pc, #100]	@ (8001f8c <__eqdf2+0x84>)
 8001f26:	468c      	mov	ip, r1
 8001f28:	031f      	lsls	r7, r3, #12
 8001f2a:	0069      	lsls	r1, r5, #1
 8001f2c:	005e      	lsls	r6, r3, #1
 8001f2e:	0d49      	lsrs	r1, r1, #21
 8001f30:	0b3f      	lsrs	r7, r7, #12
 8001f32:	0d76      	lsrs	r6, r6, #21
 8001f34:	4281      	cmp	r1, r0
 8001f36:	d018      	beq.n	8001f6a <__eqdf2+0x62>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d00f      	beq.n	8001f5c <__eqdf2+0x54>
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	42b1      	cmp	r1, r6
 8001f40:	d10d      	bne.n	8001f5e <__eqdf2+0x56>
 8001f42:	45bc      	cmp	ip, r7
 8001f44:	d10b      	bne.n	8001f5e <__eqdf2+0x56>
 8001f46:	4294      	cmp	r4, r2
 8001f48:	d109      	bne.n	8001f5e <__eqdf2+0x56>
 8001f4a:	45d3      	cmp	fp, sl
 8001f4c:	d01c      	beq.n	8001f88 <__eqdf2+0x80>
 8001f4e:	2900      	cmp	r1, #0
 8001f50:	d105      	bne.n	8001f5e <__eqdf2+0x56>
 8001f52:	4660      	mov	r0, ip
 8001f54:	4320      	orrs	r0, r4
 8001f56:	1e43      	subs	r3, r0, #1
 8001f58:	4198      	sbcs	r0, r3
 8001f5a:	e000      	b.n	8001f5e <__eqdf2+0x56>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f60:	46bb      	mov	fp, r7
 8001f62:	46b2      	mov	sl, r6
 8001f64:	46a9      	mov	r9, r5
 8001f66:	46a0      	mov	r8, r4
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	428e      	cmp	r6, r1
 8001f6e:	d1f6      	bne.n	8001f5e <__eqdf2+0x56>
 8001f70:	4661      	mov	r1, ip
 8001f72:	4339      	orrs	r1, r7
 8001f74:	000f      	movs	r7, r1
 8001f76:	4317      	orrs	r7, r2
 8001f78:	4327      	orrs	r7, r4
 8001f7a:	d1f0      	bne.n	8001f5e <__eqdf2+0x56>
 8001f7c:	465b      	mov	r3, fp
 8001f7e:	4652      	mov	r2, sl
 8001f80:	1a98      	subs	r0, r3, r2
 8001f82:	1e43      	subs	r3, r0, #1
 8001f84:	4198      	sbcs	r0, r3
 8001f86:	e7ea      	b.n	8001f5e <__eqdf2+0x56>
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e7e8      	b.n	8001f5e <__eqdf2+0x56>
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__gedf2>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	464e      	mov	r6, r9
 8001f96:	4645      	mov	r5, r8
 8001f98:	46de      	mov	lr, fp
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	000d      	movs	r5, r1
 8001f9e:	030f      	lsls	r7, r1, #12
 8001fa0:	0b39      	lsrs	r1, r7, #12
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	0004      	movs	r4, r0
 8001fa6:	4680      	mov	r8, r0
 8001fa8:	9101      	str	r1, [sp, #4]
 8001faa:	0058      	lsls	r0, r3, #1
 8001fac:	0fe9      	lsrs	r1, r5, #31
 8001fae:	4f31      	ldr	r7, [pc, #196]	@ (8002074 <__gedf2+0xe4>)
 8001fb0:	0d40      	lsrs	r0, r0, #21
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	006e      	lsls	r6, r5, #1
 8001fb6:	0319      	lsls	r1, r3, #12
 8001fb8:	4682      	mov	sl, r0
 8001fba:	4691      	mov	r9, r2
 8001fbc:	0d76      	lsrs	r6, r6, #21
 8001fbe:	0b09      	lsrs	r1, r1, #12
 8001fc0:	0fd8      	lsrs	r0, r3, #31
 8001fc2:	42be      	cmp	r6, r7
 8001fc4:	d01f      	beq.n	8002006 <__gedf2+0x76>
 8001fc6:	45ba      	cmp	sl, r7
 8001fc8:	d00f      	beq.n	8001fea <__gedf2+0x5a>
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	d12f      	bne.n	800202e <__gedf2+0x9e>
 8001fce:	4655      	mov	r5, sl
 8001fd0:	9e01      	ldr	r6, [sp, #4]
 8001fd2:	4334      	orrs	r4, r6
 8001fd4:	2d00      	cmp	r5, #0
 8001fd6:	d127      	bne.n	8002028 <__gedf2+0x98>
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	d03a      	beq.n	8002052 <__gedf2+0xc2>
 8001fdc:	2c00      	cmp	r4, #0
 8001fde:	d145      	bne.n	800206c <__gedf2+0xdc>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	d11a      	bne.n	800201a <__gedf2+0x8a>
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	4240      	negs	r0, r0
 8001fe8:	e017      	b.n	800201a <__gedf2+0x8a>
 8001fea:	4311      	orrs	r1, r2
 8001fec:	d13b      	bne.n	8002066 <__gedf2+0xd6>
 8001fee:	2e00      	cmp	r6, #0
 8001ff0:	d102      	bne.n	8001ff8 <__gedf2+0x68>
 8001ff2:	9f01      	ldr	r7, [sp, #4]
 8001ff4:	4327      	orrs	r7, r4
 8001ff6:	d0f3      	beq.n	8001fe0 <__gedf2+0x50>
 8001ff8:	4584      	cmp	ip, r0
 8001ffa:	d109      	bne.n	8002010 <__gedf2+0x80>
 8001ffc:	4663      	mov	r3, ip
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <__gedf2+0x54>
 8002002:	4660      	mov	r0, ip
 8002004:	e009      	b.n	800201a <__gedf2+0x8a>
 8002006:	9f01      	ldr	r7, [sp, #4]
 8002008:	4327      	orrs	r7, r4
 800200a:	d12c      	bne.n	8002066 <__gedf2+0xd6>
 800200c:	45b2      	cmp	sl, r6
 800200e:	d024      	beq.n	800205a <__gedf2+0xca>
 8002010:	4663      	mov	r3, ip
 8002012:	2002      	movs	r0, #2
 8002014:	3b01      	subs	r3, #1
 8002016:	4018      	ands	r0, r3
 8002018:	3801      	subs	r0, #1
 800201a:	b003      	add	sp, #12
 800201c:	bcf0      	pop	{r4, r5, r6, r7}
 800201e:	46bb      	mov	fp, r7
 8002020:	46b2      	mov	sl, r6
 8002022:	46a9      	mov	r9, r5
 8002024:	46a0      	mov	r8, r4
 8002026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002028:	2c00      	cmp	r4, #0
 800202a:	d0d9      	beq.n	8001fe0 <__gedf2+0x50>
 800202c:	e7e4      	b.n	8001ff8 <__gedf2+0x68>
 800202e:	4654      	mov	r4, sl
 8002030:	2c00      	cmp	r4, #0
 8002032:	d0ed      	beq.n	8002010 <__gedf2+0x80>
 8002034:	4584      	cmp	ip, r0
 8002036:	d1eb      	bne.n	8002010 <__gedf2+0x80>
 8002038:	4556      	cmp	r6, sl
 800203a:	dce9      	bgt.n	8002010 <__gedf2+0x80>
 800203c:	dbde      	blt.n	8001ffc <__gedf2+0x6c>
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	428b      	cmp	r3, r1
 8002042:	d8e5      	bhi.n	8002010 <__gedf2+0x80>
 8002044:	d1da      	bne.n	8001ffc <__gedf2+0x6c>
 8002046:	45c8      	cmp	r8, r9
 8002048:	d8e2      	bhi.n	8002010 <__gedf2+0x80>
 800204a:	2000      	movs	r0, #0
 800204c:	45c8      	cmp	r8, r9
 800204e:	d2e4      	bcs.n	800201a <__gedf2+0x8a>
 8002050:	e7d4      	b.n	8001ffc <__gedf2+0x6c>
 8002052:	2000      	movs	r0, #0
 8002054:	2c00      	cmp	r4, #0
 8002056:	d0e0      	beq.n	800201a <__gedf2+0x8a>
 8002058:	e7da      	b.n	8002010 <__gedf2+0x80>
 800205a:	4311      	orrs	r1, r2
 800205c:	d103      	bne.n	8002066 <__gedf2+0xd6>
 800205e:	4584      	cmp	ip, r0
 8002060:	d1d6      	bne.n	8002010 <__gedf2+0x80>
 8002062:	2000      	movs	r0, #0
 8002064:	e7d9      	b.n	800201a <__gedf2+0x8a>
 8002066:	2002      	movs	r0, #2
 8002068:	4240      	negs	r0, r0
 800206a:	e7d6      	b.n	800201a <__gedf2+0x8a>
 800206c:	4584      	cmp	ip, r0
 800206e:	d0e6      	beq.n	800203e <__gedf2+0xae>
 8002070:	e7ce      	b.n	8002010 <__gedf2+0x80>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff

08002078 <__ledf2>:
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	4657      	mov	r7, sl
 800207c:	464e      	mov	r6, r9
 800207e:	4645      	mov	r5, r8
 8002080:	46de      	mov	lr, fp
 8002082:	b5e0      	push	{r5, r6, r7, lr}
 8002084:	000d      	movs	r5, r1
 8002086:	030f      	lsls	r7, r1, #12
 8002088:	0004      	movs	r4, r0
 800208a:	4680      	mov	r8, r0
 800208c:	0fe8      	lsrs	r0, r5, #31
 800208e:	0b39      	lsrs	r1, r7, #12
 8002090:	4684      	mov	ip, r0
 8002092:	b083      	sub	sp, #12
 8002094:	0058      	lsls	r0, r3, #1
 8002096:	4f30      	ldr	r7, [pc, #192]	@ (8002158 <__ledf2+0xe0>)
 8002098:	0d40      	lsrs	r0, r0, #21
 800209a:	9101      	str	r1, [sp, #4]
 800209c:	031e      	lsls	r6, r3, #12
 800209e:	0069      	lsls	r1, r5, #1
 80020a0:	4682      	mov	sl, r0
 80020a2:	4691      	mov	r9, r2
 80020a4:	0d49      	lsrs	r1, r1, #21
 80020a6:	0b36      	lsrs	r6, r6, #12
 80020a8:	0fd8      	lsrs	r0, r3, #31
 80020aa:	42b9      	cmp	r1, r7
 80020ac:	d020      	beq.n	80020f0 <__ledf2+0x78>
 80020ae:	45ba      	cmp	sl, r7
 80020b0:	d00f      	beq.n	80020d2 <__ledf2+0x5a>
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d12b      	bne.n	800210e <__ledf2+0x96>
 80020b6:	9901      	ldr	r1, [sp, #4]
 80020b8:	430c      	orrs	r4, r1
 80020ba:	4651      	mov	r1, sl
 80020bc:	2900      	cmp	r1, #0
 80020be:	d137      	bne.n	8002130 <__ledf2+0xb8>
 80020c0:	4332      	orrs	r2, r6
 80020c2:	d038      	beq.n	8002136 <__ledf2+0xbe>
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d144      	bne.n	8002152 <__ledf2+0xda>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d119      	bne.n	8002100 <__ledf2+0x88>
 80020cc:	2001      	movs	r0, #1
 80020ce:	4240      	negs	r0, r0
 80020d0:	e016      	b.n	8002100 <__ledf2+0x88>
 80020d2:	4316      	orrs	r6, r2
 80020d4:	d113      	bne.n	80020fe <__ledf2+0x86>
 80020d6:	2900      	cmp	r1, #0
 80020d8:	d102      	bne.n	80020e0 <__ledf2+0x68>
 80020da:	9f01      	ldr	r7, [sp, #4]
 80020dc:	4327      	orrs	r7, r4
 80020de:	d0f3      	beq.n	80020c8 <__ledf2+0x50>
 80020e0:	4584      	cmp	ip, r0
 80020e2:	d020      	beq.n	8002126 <__ledf2+0xae>
 80020e4:	4663      	mov	r3, ip
 80020e6:	2002      	movs	r0, #2
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4018      	ands	r0, r3
 80020ec:	3801      	subs	r0, #1
 80020ee:	e007      	b.n	8002100 <__ledf2+0x88>
 80020f0:	9f01      	ldr	r7, [sp, #4]
 80020f2:	4327      	orrs	r7, r4
 80020f4:	d103      	bne.n	80020fe <__ledf2+0x86>
 80020f6:	458a      	cmp	sl, r1
 80020f8:	d1f4      	bne.n	80020e4 <__ledf2+0x6c>
 80020fa:	4316      	orrs	r6, r2
 80020fc:	d01f      	beq.n	800213e <__ledf2+0xc6>
 80020fe:	2002      	movs	r0, #2
 8002100:	b003      	add	sp, #12
 8002102:	bcf0      	pop	{r4, r5, r6, r7}
 8002104:	46bb      	mov	fp, r7
 8002106:	46b2      	mov	sl, r6
 8002108:	46a9      	mov	r9, r5
 800210a:	46a0      	mov	r8, r4
 800210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210e:	4654      	mov	r4, sl
 8002110:	2c00      	cmp	r4, #0
 8002112:	d0e7      	beq.n	80020e4 <__ledf2+0x6c>
 8002114:	4584      	cmp	ip, r0
 8002116:	d1e5      	bne.n	80020e4 <__ledf2+0x6c>
 8002118:	4551      	cmp	r1, sl
 800211a:	dce3      	bgt.n	80020e4 <__ledf2+0x6c>
 800211c:	db03      	blt.n	8002126 <__ledf2+0xae>
 800211e:	9b01      	ldr	r3, [sp, #4]
 8002120:	42b3      	cmp	r3, r6
 8002122:	d8df      	bhi.n	80020e4 <__ledf2+0x6c>
 8002124:	d00f      	beq.n	8002146 <__ledf2+0xce>
 8002126:	4663      	mov	r3, ip
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0cf      	beq.n	80020cc <__ledf2+0x54>
 800212c:	4660      	mov	r0, ip
 800212e:	e7e7      	b.n	8002100 <__ledf2+0x88>
 8002130:	2c00      	cmp	r4, #0
 8002132:	d0c9      	beq.n	80020c8 <__ledf2+0x50>
 8002134:	e7d4      	b.n	80020e0 <__ledf2+0x68>
 8002136:	2000      	movs	r0, #0
 8002138:	2c00      	cmp	r4, #0
 800213a:	d0e1      	beq.n	8002100 <__ledf2+0x88>
 800213c:	e7d2      	b.n	80020e4 <__ledf2+0x6c>
 800213e:	4584      	cmp	ip, r0
 8002140:	d1d0      	bne.n	80020e4 <__ledf2+0x6c>
 8002142:	2000      	movs	r0, #0
 8002144:	e7dc      	b.n	8002100 <__ledf2+0x88>
 8002146:	45c8      	cmp	r8, r9
 8002148:	d8cc      	bhi.n	80020e4 <__ledf2+0x6c>
 800214a:	2000      	movs	r0, #0
 800214c:	45c8      	cmp	r8, r9
 800214e:	d2d7      	bcs.n	8002100 <__ledf2+0x88>
 8002150:	e7e9      	b.n	8002126 <__ledf2+0xae>
 8002152:	4584      	cmp	ip, r0
 8002154:	d0e3      	beq.n	800211e <__ledf2+0xa6>
 8002156:	e7c5      	b.n	80020e4 <__ledf2+0x6c>
 8002158:	000007ff 	.word	0x000007ff

0800215c <__aeabi_dmul>:
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	4657      	mov	r7, sl
 8002160:	46de      	mov	lr, fp
 8002162:	464e      	mov	r6, r9
 8002164:	4645      	mov	r5, r8
 8002166:	b5e0      	push	{r5, r6, r7, lr}
 8002168:	001f      	movs	r7, r3
 800216a:	030b      	lsls	r3, r1, #12
 800216c:	0b1b      	lsrs	r3, r3, #12
 800216e:	0016      	movs	r6, r2
 8002170:	469a      	mov	sl, r3
 8002172:	0fca      	lsrs	r2, r1, #31
 8002174:	004b      	lsls	r3, r1, #1
 8002176:	0004      	movs	r4, r0
 8002178:	4693      	mov	fp, r2
 800217a:	b087      	sub	sp, #28
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0x26>
 8002180:	e0d5      	b.n	800232e <__aeabi_dmul+0x1d2>
 8002182:	4abb      	ldr	r2, [pc, #748]	@ (8002470 <__aeabi_dmul+0x314>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x2e>
 8002188:	e0f8      	b.n	800237c <__aeabi_dmul+0x220>
 800218a:	4651      	mov	r1, sl
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00c9      	lsls	r1, r1, #3
 8002190:	430a      	orrs	r2, r1
 8002192:	2180      	movs	r1, #128	@ 0x80
 8002194:	0409      	lsls	r1, r1, #16
 8002196:	4311      	orrs	r1, r2
 8002198:	00c2      	lsls	r2, r0, #3
 800219a:	4691      	mov	r9, r2
 800219c:	4ab5      	ldr	r2, [pc, #724]	@ (8002474 <__aeabi_dmul+0x318>)
 800219e:	468a      	mov	sl, r1
 80021a0:	189d      	adds	r5, r3, r2
 80021a2:	2300      	movs	r3, #0
 80021a4:	4698      	mov	r8, r3
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	033c      	lsls	r4, r7, #12
 80021aa:	007b      	lsls	r3, r7, #1
 80021ac:	0ffa      	lsrs	r2, r7, #31
 80021ae:	0030      	movs	r0, r6
 80021b0:	0b24      	lsrs	r4, r4, #12
 80021b2:	0d5b      	lsrs	r3, r3, #21
 80021b4:	9200      	str	r2, [sp, #0]
 80021b6:	d100      	bne.n	80021ba <__aeabi_dmul+0x5e>
 80021b8:	e096      	b.n	80022e8 <__aeabi_dmul+0x18c>
 80021ba:	4aad      	ldr	r2, [pc, #692]	@ (8002470 <__aeabi_dmul+0x314>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d031      	beq.n	8002224 <__aeabi_dmul+0xc8>
 80021c0:	0f72      	lsrs	r2, r6, #29
 80021c2:	00e4      	lsls	r4, r4, #3
 80021c4:	4322      	orrs	r2, r4
 80021c6:	2480      	movs	r4, #128	@ 0x80
 80021c8:	0424      	lsls	r4, r4, #16
 80021ca:	4314      	orrs	r4, r2
 80021cc:	4aa9      	ldr	r2, [pc, #676]	@ (8002474 <__aeabi_dmul+0x318>)
 80021ce:	00f0      	lsls	r0, r6, #3
 80021d0:	4694      	mov	ip, r2
 80021d2:	4463      	add	r3, ip
 80021d4:	195b      	adds	r3, r3, r5
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	9201      	str	r2, [sp, #4]
 80021da:	4642      	mov	r2, r8
 80021dc:	2600      	movs	r6, #0
 80021de:	2a0a      	cmp	r2, #10
 80021e0:	dc42      	bgt.n	8002268 <__aeabi_dmul+0x10c>
 80021e2:	465a      	mov	r2, fp
 80021e4:	9900      	ldr	r1, [sp, #0]
 80021e6:	404a      	eors	r2, r1
 80021e8:	4693      	mov	fp, r2
 80021ea:	4642      	mov	r2, r8
 80021ec:	2a02      	cmp	r2, #2
 80021ee:	dc32      	bgt.n	8002256 <__aeabi_dmul+0xfa>
 80021f0:	3a01      	subs	r2, #1
 80021f2:	2a01      	cmp	r2, #1
 80021f4:	d900      	bls.n	80021f8 <__aeabi_dmul+0x9c>
 80021f6:	e149      	b.n	800248c <__aeabi_dmul+0x330>
 80021f8:	2e02      	cmp	r6, #2
 80021fa:	d100      	bne.n	80021fe <__aeabi_dmul+0xa2>
 80021fc:	e0ca      	b.n	8002394 <__aeabi_dmul+0x238>
 80021fe:	2e01      	cmp	r6, #1
 8002200:	d13d      	bne.n	800227e <__aeabi_dmul+0x122>
 8002202:	2300      	movs	r3, #0
 8002204:	2400      	movs	r4, #0
 8002206:	2200      	movs	r2, #0
 8002208:	0010      	movs	r0, r2
 800220a:	465a      	mov	r2, fp
 800220c:	051b      	lsls	r3, r3, #20
 800220e:	4323      	orrs	r3, r4
 8002210:	07d2      	lsls	r2, r2, #31
 8002212:	4313      	orrs	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	b007      	add	sp, #28
 8002218:	bcf0      	pop	{r4, r5, r6, r7}
 800221a:	46bb      	mov	fp, r7
 800221c:	46b2      	mov	sl, r6
 800221e:	46a9      	mov	r9, r5
 8002220:	46a0      	mov	r8, r4
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002224:	4b92      	ldr	r3, [pc, #584]	@ (8002470 <__aeabi_dmul+0x314>)
 8002226:	4326      	orrs	r6, r4
 8002228:	18eb      	adds	r3, r5, r3
 800222a:	2e00      	cmp	r6, #0
 800222c:	d100      	bne.n	8002230 <__aeabi_dmul+0xd4>
 800222e:	e0bb      	b.n	80023a8 <__aeabi_dmul+0x24c>
 8002230:	2203      	movs	r2, #3
 8002232:	4641      	mov	r1, r8
 8002234:	4311      	orrs	r1, r2
 8002236:	465a      	mov	r2, fp
 8002238:	4688      	mov	r8, r1
 800223a:	9900      	ldr	r1, [sp, #0]
 800223c:	404a      	eors	r2, r1
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	0109      	lsls	r1, r1, #4
 8002242:	468c      	mov	ip, r1
 8002244:	0029      	movs	r1, r5
 8002246:	4461      	add	r1, ip
 8002248:	9101      	str	r1, [sp, #4]
 800224a:	4641      	mov	r1, r8
 800224c:	290a      	cmp	r1, #10
 800224e:	dd00      	ble.n	8002252 <__aeabi_dmul+0xf6>
 8002250:	e233      	b.n	80026ba <__aeabi_dmul+0x55e>
 8002252:	4693      	mov	fp, r2
 8002254:	2603      	movs	r6, #3
 8002256:	4642      	mov	r2, r8
 8002258:	2701      	movs	r7, #1
 800225a:	4097      	lsls	r7, r2
 800225c:	21a6      	movs	r1, #166	@ 0xa6
 800225e:	003a      	movs	r2, r7
 8002260:	00c9      	lsls	r1, r1, #3
 8002262:	400a      	ands	r2, r1
 8002264:	420f      	tst	r7, r1
 8002266:	d031      	beq.n	80022cc <__aeabi_dmul+0x170>
 8002268:	9e02      	ldr	r6, [sp, #8]
 800226a:	2e02      	cmp	r6, #2
 800226c:	d100      	bne.n	8002270 <__aeabi_dmul+0x114>
 800226e:	e235      	b.n	80026dc <__aeabi_dmul+0x580>
 8002270:	2e03      	cmp	r6, #3
 8002272:	d100      	bne.n	8002276 <__aeabi_dmul+0x11a>
 8002274:	e1d2      	b.n	800261c <__aeabi_dmul+0x4c0>
 8002276:	4654      	mov	r4, sl
 8002278:	4648      	mov	r0, r9
 800227a:	2e01      	cmp	r6, #1
 800227c:	d0c1      	beq.n	8002202 <__aeabi_dmul+0xa6>
 800227e:	9a01      	ldr	r2, [sp, #4]
 8002280:	4b7d      	ldr	r3, [pc, #500]	@ (8002478 <__aeabi_dmul+0x31c>)
 8002282:	4694      	mov	ip, r2
 8002284:	4463      	add	r3, ip
 8002286:	2b00      	cmp	r3, #0
 8002288:	dc00      	bgt.n	800228c <__aeabi_dmul+0x130>
 800228a:	e0c0      	b.n	800240e <__aeabi_dmul+0x2b2>
 800228c:	0742      	lsls	r2, r0, #29
 800228e:	d009      	beq.n	80022a4 <__aeabi_dmul+0x148>
 8002290:	220f      	movs	r2, #15
 8002292:	4002      	ands	r2, r0
 8002294:	2a04      	cmp	r2, #4
 8002296:	d005      	beq.n	80022a4 <__aeabi_dmul+0x148>
 8002298:	1d02      	adds	r2, r0, #4
 800229a:	4282      	cmp	r2, r0
 800229c:	4180      	sbcs	r0, r0
 800229e:	4240      	negs	r0, r0
 80022a0:	1824      	adds	r4, r4, r0
 80022a2:	0010      	movs	r0, r2
 80022a4:	01e2      	lsls	r2, r4, #7
 80022a6:	d506      	bpl.n	80022b6 <__aeabi_dmul+0x15a>
 80022a8:	4b74      	ldr	r3, [pc, #464]	@ (800247c <__aeabi_dmul+0x320>)
 80022aa:	9a01      	ldr	r2, [sp, #4]
 80022ac:	401c      	ands	r4, r3
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	4694      	mov	ip, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4463      	add	r3, ip
 80022b6:	4a72      	ldr	r2, [pc, #456]	@ (8002480 <__aeabi_dmul+0x324>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	dc6b      	bgt.n	8002394 <__aeabi_dmul+0x238>
 80022bc:	0762      	lsls	r2, r4, #29
 80022be:	08c0      	lsrs	r0, r0, #3
 80022c0:	0264      	lsls	r4, r4, #9
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4302      	orrs	r2, r0
 80022c6:	0b24      	lsrs	r4, r4, #12
 80022c8:	0d5b      	lsrs	r3, r3, #21
 80022ca:	e79d      	b.n	8002208 <__aeabi_dmul+0xac>
 80022cc:	2190      	movs	r1, #144	@ 0x90
 80022ce:	0089      	lsls	r1, r1, #2
 80022d0:	420f      	tst	r7, r1
 80022d2:	d163      	bne.n	800239c <__aeabi_dmul+0x240>
 80022d4:	2288      	movs	r2, #136	@ 0x88
 80022d6:	423a      	tst	r2, r7
 80022d8:	d100      	bne.n	80022dc <__aeabi_dmul+0x180>
 80022da:	e0d7      	b.n	800248c <__aeabi_dmul+0x330>
 80022dc:	9b00      	ldr	r3, [sp, #0]
 80022de:	46a2      	mov	sl, r4
 80022e0:	469b      	mov	fp, r3
 80022e2:	4681      	mov	r9, r0
 80022e4:	9602      	str	r6, [sp, #8]
 80022e6:	e7bf      	b.n	8002268 <__aeabi_dmul+0x10c>
 80022e8:	0023      	movs	r3, r4
 80022ea:	4333      	orrs	r3, r6
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dmul+0x194>
 80022ee:	e07f      	b.n	80023f0 <__aeabi_dmul+0x294>
 80022f0:	2c00      	cmp	r4, #0
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dmul+0x19a>
 80022f4:	e1ad      	b.n	8002652 <__aeabi_dmul+0x4f6>
 80022f6:	0020      	movs	r0, r4
 80022f8:	f000 ff10 	bl	800311c <__clzsi2>
 80022fc:	0002      	movs	r2, r0
 80022fe:	0003      	movs	r3, r0
 8002300:	3a0b      	subs	r2, #11
 8002302:	201d      	movs	r0, #29
 8002304:	0019      	movs	r1, r3
 8002306:	1a82      	subs	r2, r0, r2
 8002308:	0030      	movs	r0, r6
 800230a:	3908      	subs	r1, #8
 800230c:	40d0      	lsrs	r0, r2
 800230e:	408c      	lsls	r4, r1
 8002310:	4304      	orrs	r4, r0
 8002312:	0030      	movs	r0, r6
 8002314:	4088      	lsls	r0, r1
 8002316:	4a5b      	ldr	r2, [pc, #364]	@ (8002484 <__aeabi_dmul+0x328>)
 8002318:	1aeb      	subs	r3, r5, r3
 800231a:	4694      	mov	ip, r2
 800231c:	4463      	add	r3, ip
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	9201      	str	r2, [sp, #4]
 8002322:	4642      	mov	r2, r8
 8002324:	2600      	movs	r6, #0
 8002326:	2a0a      	cmp	r2, #10
 8002328:	dc00      	bgt.n	800232c <__aeabi_dmul+0x1d0>
 800232a:	e75a      	b.n	80021e2 <__aeabi_dmul+0x86>
 800232c:	e79c      	b.n	8002268 <__aeabi_dmul+0x10c>
 800232e:	4653      	mov	r3, sl
 8002330:	4303      	orrs	r3, r0
 8002332:	4699      	mov	r9, r3
 8002334:	d054      	beq.n	80023e0 <__aeabi_dmul+0x284>
 8002336:	4653      	mov	r3, sl
 8002338:	2b00      	cmp	r3, #0
 800233a:	d100      	bne.n	800233e <__aeabi_dmul+0x1e2>
 800233c:	e177      	b.n	800262e <__aeabi_dmul+0x4d2>
 800233e:	4650      	mov	r0, sl
 8002340:	f000 feec 	bl	800311c <__clzsi2>
 8002344:	230b      	movs	r3, #11
 8002346:	425b      	negs	r3, r3
 8002348:	469c      	mov	ip, r3
 800234a:	0002      	movs	r2, r0
 800234c:	4484      	add	ip, r0
 800234e:	0011      	movs	r1, r2
 8002350:	4650      	mov	r0, sl
 8002352:	3908      	subs	r1, #8
 8002354:	4088      	lsls	r0, r1
 8002356:	231d      	movs	r3, #29
 8002358:	4680      	mov	r8, r0
 800235a:	4660      	mov	r0, ip
 800235c:	1a1b      	subs	r3, r3, r0
 800235e:	0020      	movs	r0, r4
 8002360:	40d8      	lsrs	r0, r3
 8002362:	0003      	movs	r3, r0
 8002364:	4640      	mov	r0, r8
 8002366:	4303      	orrs	r3, r0
 8002368:	469a      	mov	sl, r3
 800236a:	0023      	movs	r3, r4
 800236c:	408b      	lsls	r3, r1
 800236e:	4699      	mov	r9, r3
 8002370:	2300      	movs	r3, #0
 8002372:	4d44      	ldr	r5, [pc, #272]	@ (8002484 <__aeabi_dmul+0x328>)
 8002374:	4698      	mov	r8, r3
 8002376:	1aad      	subs	r5, r5, r2
 8002378:	9302      	str	r3, [sp, #8]
 800237a:	e715      	b.n	80021a8 <__aeabi_dmul+0x4c>
 800237c:	4652      	mov	r2, sl
 800237e:	4302      	orrs	r2, r0
 8002380:	4691      	mov	r9, r2
 8002382:	d126      	bne.n	80023d2 <__aeabi_dmul+0x276>
 8002384:	2200      	movs	r2, #0
 8002386:	001d      	movs	r5, r3
 8002388:	2302      	movs	r3, #2
 800238a:	4692      	mov	sl, r2
 800238c:	3208      	adds	r2, #8
 800238e:	4690      	mov	r8, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	e709      	b.n	80021a8 <__aeabi_dmul+0x4c>
 8002394:	2400      	movs	r4, #0
 8002396:	2200      	movs	r2, #0
 8002398:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <__aeabi_dmul+0x314>)
 800239a:	e735      	b.n	8002208 <__aeabi_dmul+0xac>
 800239c:	2300      	movs	r3, #0
 800239e:	2480      	movs	r4, #128	@ 0x80
 80023a0:	469b      	mov	fp, r3
 80023a2:	0324      	lsls	r4, r4, #12
 80023a4:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <__aeabi_dmul+0x314>)
 80023a6:	e72f      	b.n	8002208 <__aeabi_dmul+0xac>
 80023a8:	2202      	movs	r2, #2
 80023aa:	4641      	mov	r1, r8
 80023ac:	4311      	orrs	r1, r2
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	4694      	mov	ip, r2
 80023b4:	002a      	movs	r2, r5
 80023b6:	4462      	add	r2, ip
 80023b8:	4688      	mov	r8, r1
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	290a      	cmp	r1, #10
 80023be:	dd00      	ble.n	80023c2 <__aeabi_dmul+0x266>
 80023c0:	e752      	b.n	8002268 <__aeabi_dmul+0x10c>
 80023c2:	465a      	mov	r2, fp
 80023c4:	2000      	movs	r0, #0
 80023c6:	9900      	ldr	r1, [sp, #0]
 80023c8:	0004      	movs	r4, r0
 80023ca:	404a      	eors	r2, r1
 80023cc:	4693      	mov	fp, r2
 80023ce:	2602      	movs	r6, #2
 80023d0:	e70b      	b.n	80021ea <__aeabi_dmul+0x8e>
 80023d2:	220c      	movs	r2, #12
 80023d4:	001d      	movs	r5, r3
 80023d6:	2303      	movs	r3, #3
 80023d8:	4681      	mov	r9, r0
 80023da:	4690      	mov	r8, r2
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	e6e3      	b.n	80021a8 <__aeabi_dmul+0x4c>
 80023e0:	2300      	movs	r3, #0
 80023e2:	469a      	mov	sl, r3
 80023e4:	3304      	adds	r3, #4
 80023e6:	4698      	mov	r8, r3
 80023e8:	3b03      	subs	r3, #3
 80023ea:	2500      	movs	r5, #0
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	e6db      	b.n	80021a8 <__aeabi_dmul+0x4c>
 80023f0:	4642      	mov	r2, r8
 80023f2:	3301      	adds	r3, #1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	002b      	movs	r3, r5
 80023f8:	4690      	mov	r8, r2
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	4642      	mov	r2, r8
 8002400:	2400      	movs	r4, #0
 8002402:	2000      	movs	r0, #0
 8002404:	2601      	movs	r6, #1
 8002406:	2a0a      	cmp	r2, #10
 8002408:	dc00      	bgt.n	800240c <__aeabi_dmul+0x2b0>
 800240a:	e6ea      	b.n	80021e2 <__aeabi_dmul+0x86>
 800240c:	e72c      	b.n	8002268 <__aeabi_dmul+0x10c>
 800240e:	2201      	movs	r2, #1
 8002410:	1ad2      	subs	r2, r2, r3
 8002412:	2a38      	cmp	r2, #56	@ 0x38
 8002414:	dd00      	ble.n	8002418 <__aeabi_dmul+0x2bc>
 8002416:	e6f4      	b.n	8002202 <__aeabi_dmul+0xa6>
 8002418:	2a1f      	cmp	r2, #31
 800241a:	dc00      	bgt.n	800241e <__aeabi_dmul+0x2c2>
 800241c:	e12a      	b.n	8002674 <__aeabi_dmul+0x518>
 800241e:	211f      	movs	r1, #31
 8002420:	4249      	negs	r1, r1
 8002422:	1acb      	subs	r3, r1, r3
 8002424:	0021      	movs	r1, r4
 8002426:	40d9      	lsrs	r1, r3
 8002428:	000b      	movs	r3, r1
 800242a:	2a20      	cmp	r2, #32
 800242c:	d005      	beq.n	800243a <__aeabi_dmul+0x2de>
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <__aeabi_dmul+0x32c>)
 8002430:	9d01      	ldr	r5, [sp, #4]
 8002432:	4694      	mov	ip, r2
 8002434:	4465      	add	r5, ip
 8002436:	40ac      	lsls	r4, r5
 8002438:	4320      	orrs	r0, r4
 800243a:	1e42      	subs	r2, r0, #1
 800243c:	4190      	sbcs	r0, r2
 800243e:	4318      	orrs	r0, r3
 8002440:	2307      	movs	r3, #7
 8002442:	0019      	movs	r1, r3
 8002444:	2400      	movs	r4, #0
 8002446:	4001      	ands	r1, r0
 8002448:	4203      	tst	r3, r0
 800244a:	d00c      	beq.n	8002466 <__aeabi_dmul+0x30a>
 800244c:	230f      	movs	r3, #15
 800244e:	4003      	ands	r3, r0
 8002450:	2b04      	cmp	r3, #4
 8002452:	d100      	bne.n	8002456 <__aeabi_dmul+0x2fa>
 8002454:	e140      	b.n	80026d8 <__aeabi_dmul+0x57c>
 8002456:	1d03      	adds	r3, r0, #4
 8002458:	4283      	cmp	r3, r0
 800245a:	41a4      	sbcs	r4, r4
 800245c:	0018      	movs	r0, r3
 800245e:	4264      	negs	r4, r4
 8002460:	0761      	lsls	r1, r4, #29
 8002462:	0264      	lsls	r4, r4, #9
 8002464:	0b24      	lsrs	r4, r4, #12
 8002466:	08c2      	lsrs	r2, r0, #3
 8002468:	2300      	movs	r3, #0
 800246a:	430a      	orrs	r2, r1
 800246c:	e6cc      	b.n	8002208 <__aeabi_dmul+0xac>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	000007ff 	.word	0x000007ff
 8002474:	fffffc01 	.word	0xfffffc01
 8002478:	000003ff 	.word	0x000003ff
 800247c:	feffffff 	.word	0xfeffffff
 8002480:	000007fe 	.word	0x000007fe
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	4649      	mov	r1, r9
 800248e:	464a      	mov	r2, r9
 8002490:	0409      	lsls	r1, r1, #16
 8002492:	0c09      	lsrs	r1, r1, #16
 8002494:	000d      	movs	r5, r1
 8002496:	0c16      	lsrs	r6, r2, #16
 8002498:	0c02      	lsrs	r2, r0, #16
 800249a:	0400      	lsls	r0, r0, #16
 800249c:	0c00      	lsrs	r0, r0, #16
 800249e:	4345      	muls	r5, r0
 80024a0:	46ac      	mov	ip, r5
 80024a2:	0005      	movs	r5, r0
 80024a4:	4375      	muls	r5, r6
 80024a6:	46a8      	mov	r8, r5
 80024a8:	0015      	movs	r5, r2
 80024aa:	000f      	movs	r7, r1
 80024ac:	4375      	muls	r5, r6
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	9502      	str	r5, [sp, #8]
 80024b2:	002a      	movs	r2, r5
 80024b4:	9d00      	ldr	r5, [sp, #0]
 80024b6:	436f      	muls	r7, r5
 80024b8:	4665      	mov	r5, ip
 80024ba:	0c2d      	lsrs	r5, r5, #16
 80024bc:	46a9      	mov	r9, r5
 80024be:	4447      	add	r7, r8
 80024c0:	444f      	add	r7, r9
 80024c2:	45b8      	cmp	r8, r7
 80024c4:	d905      	bls.n	80024d2 <__aeabi_dmul+0x376>
 80024c6:	0015      	movs	r5, r2
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	0252      	lsls	r2, r2, #9
 80024cc:	4690      	mov	r8, r2
 80024ce:	4445      	add	r5, r8
 80024d0:	9502      	str	r5, [sp, #8]
 80024d2:	0c3d      	lsrs	r5, r7, #16
 80024d4:	9503      	str	r5, [sp, #12]
 80024d6:	4665      	mov	r5, ip
 80024d8:	042d      	lsls	r5, r5, #16
 80024da:	043f      	lsls	r7, r7, #16
 80024dc:	0c2d      	lsrs	r5, r5, #16
 80024de:	46ac      	mov	ip, r5
 80024e0:	003d      	movs	r5, r7
 80024e2:	4465      	add	r5, ip
 80024e4:	9504      	str	r5, [sp, #16]
 80024e6:	0c25      	lsrs	r5, r4, #16
 80024e8:	0424      	lsls	r4, r4, #16
 80024ea:	0c24      	lsrs	r4, r4, #16
 80024ec:	46ac      	mov	ip, r5
 80024ee:	0025      	movs	r5, r4
 80024f0:	4375      	muls	r5, r6
 80024f2:	46a8      	mov	r8, r5
 80024f4:	4665      	mov	r5, ip
 80024f6:	000f      	movs	r7, r1
 80024f8:	4369      	muls	r1, r5
 80024fa:	4441      	add	r1, r8
 80024fc:	4689      	mov	r9, r1
 80024fe:	4367      	muls	r7, r4
 8002500:	0c39      	lsrs	r1, r7, #16
 8002502:	4449      	add	r1, r9
 8002504:	436e      	muls	r6, r5
 8002506:	4588      	cmp	r8, r1
 8002508:	d903      	bls.n	8002512 <__aeabi_dmul+0x3b6>
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	0252      	lsls	r2, r2, #9
 800250e:	4690      	mov	r8, r2
 8002510:	4446      	add	r6, r8
 8002512:	0c0d      	lsrs	r5, r1, #16
 8002514:	46a8      	mov	r8, r5
 8002516:	0035      	movs	r5, r6
 8002518:	4445      	add	r5, r8
 800251a:	9505      	str	r5, [sp, #20]
 800251c:	9d03      	ldr	r5, [sp, #12]
 800251e:	043f      	lsls	r7, r7, #16
 8002520:	46a8      	mov	r8, r5
 8002522:	0c3f      	lsrs	r7, r7, #16
 8002524:	0409      	lsls	r1, r1, #16
 8002526:	19c9      	adds	r1, r1, r7
 8002528:	4488      	add	r8, r1
 800252a:	4645      	mov	r5, r8
 800252c:	9503      	str	r5, [sp, #12]
 800252e:	4655      	mov	r5, sl
 8002530:	042e      	lsls	r6, r5, #16
 8002532:	0c36      	lsrs	r6, r6, #16
 8002534:	0c2f      	lsrs	r7, r5, #16
 8002536:	0035      	movs	r5, r6
 8002538:	4345      	muls	r5, r0
 800253a:	4378      	muls	r0, r7
 800253c:	4681      	mov	r9, r0
 800253e:	0038      	movs	r0, r7
 8002540:	46a8      	mov	r8, r5
 8002542:	0c2d      	lsrs	r5, r5, #16
 8002544:	46aa      	mov	sl, r5
 8002546:	9a00      	ldr	r2, [sp, #0]
 8002548:	4350      	muls	r0, r2
 800254a:	4372      	muls	r2, r6
 800254c:	444a      	add	r2, r9
 800254e:	4452      	add	r2, sl
 8002550:	4591      	cmp	r9, r2
 8002552:	d903      	bls.n	800255c <__aeabi_dmul+0x400>
 8002554:	2580      	movs	r5, #128	@ 0x80
 8002556:	026d      	lsls	r5, r5, #9
 8002558:	46a9      	mov	r9, r5
 800255a:	4448      	add	r0, r9
 800255c:	0c15      	lsrs	r5, r2, #16
 800255e:	46a9      	mov	r9, r5
 8002560:	4645      	mov	r5, r8
 8002562:	042d      	lsls	r5, r5, #16
 8002564:	0c2d      	lsrs	r5, r5, #16
 8002566:	46a8      	mov	r8, r5
 8002568:	4665      	mov	r5, ip
 800256a:	437d      	muls	r5, r7
 800256c:	0412      	lsls	r2, r2, #16
 800256e:	4448      	add	r0, r9
 8002570:	4490      	add	r8, r2
 8002572:	46a9      	mov	r9, r5
 8002574:	0032      	movs	r2, r6
 8002576:	4665      	mov	r5, ip
 8002578:	4362      	muls	r2, r4
 800257a:	436e      	muls	r6, r5
 800257c:	437c      	muls	r4, r7
 800257e:	0c17      	lsrs	r7, r2, #16
 8002580:	1936      	adds	r6, r6, r4
 8002582:	19bf      	adds	r7, r7, r6
 8002584:	42bc      	cmp	r4, r7
 8002586:	d903      	bls.n	8002590 <__aeabi_dmul+0x434>
 8002588:	2480      	movs	r4, #128	@ 0x80
 800258a:	0264      	lsls	r4, r4, #9
 800258c:	46a4      	mov	ip, r4
 800258e:	44e1      	add	r9, ip
 8002590:	9c02      	ldr	r4, [sp, #8]
 8002592:	9e03      	ldr	r6, [sp, #12]
 8002594:	46a4      	mov	ip, r4
 8002596:	9d05      	ldr	r5, [sp, #20]
 8002598:	4466      	add	r6, ip
 800259a:	428e      	cmp	r6, r1
 800259c:	4189      	sbcs	r1, r1
 800259e:	46ac      	mov	ip, r5
 80025a0:	0412      	lsls	r2, r2, #16
 80025a2:	043c      	lsls	r4, r7, #16
 80025a4:	0c12      	lsrs	r2, r2, #16
 80025a6:	18a2      	adds	r2, r4, r2
 80025a8:	4462      	add	r2, ip
 80025aa:	4249      	negs	r1, r1
 80025ac:	1854      	adds	r4, r2, r1
 80025ae:	4446      	add	r6, r8
 80025b0:	46a4      	mov	ip, r4
 80025b2:	4546      	cmp	r6, r8
 80025b4:	41a4      	sbcs	r4, r4
 80025b6:	4682      	mov	sl, r0
 80025b8:	4264      	negs	r4, r4
 80025ba:	46a0      	mov	r8, r4
 80025bc:	42aa      	cmp	r2, r5
 80025be:	4192      	sbcs	r2, r2
 80025c0:	458c      	cmp	ip, r1
 80025c2:	4189      	sbcs	r1, r1
 80025c4:	44e2      	add	sl, ip
 80025c6:	44d0      	add	r8, sl
 80025c8:	4249      	negs	r1, r1
 80025ca:	4252      	negs	r2, r2
 80025cc:	430a      	orrs	r2, r1
 80025ce:	45a0      	cmp	r8, r4
 80025d0:	41a4      	sbcs	r4, r4
 80025d2:	4582      	cmp	sl, r0
 80025d4:	4189      	sbcs	r1, r1
 80025d6:	4264      	negs	r4, r4
 80025d8:	4249      	negs	r1, r1
 80025da:	430c      	orrs	r4, r1
 80025dc:	4641      	mov	r1, r8
 80025de:	0c3f      	lsrs	r7, r7, #16
 80025e0:	19d2      	adds	r2, r2, r7
 80025e2:	1912      	adds	r2, r2, r4
 80025e4:	0dcc      	lsrs	r4, r1, #23
 80025e6:	9904      	ldr	r1, [sp, #16]
 80025e8:	0270      	lsls	r0, r6, #9
 80025ea:	4308      	orrs	r0, r1
 80025ec:	1e41      	subs	r1, r0, #1
 80025ee:	4188      	sbcs	r0, r1
 80025f0:	4641      	mov	r1, r8
 80025f2:	444a      	add	r2, r9
 80025f4:	0df6      	lsrs	r6, r6, #23
 80025f6:	0252      	lsls	r2, r2, #9
 80025f8:	4330      	orrs	r0, r6
 80025fa:	0249      	lsls	r1, r1, #9
 80025fc:	4314      	orrs	r4, r2
 80025fe:	4308      	orrs	r0, r1
 8002600:	01d2      	lsls	r2, r2, #7
 8002602:	d535      	bpl.n	8002670 <__aeabi_dmul+0x514>
 8002604:	2201      	movs	r2, #1
 8002606:	0843      	lsrs	r3, r0, #1
 8002608:	4002      	ands	r2, r0
 800260a:	4313      	orrs	r3, r2
 800260c:	07e0      	lsls	r0, r4, #31
 800260e:	4318      	orrs	r0, r3
 8002610:	0864      	lsrs	r4, r4, #1
 8002612:	e634      	b.n	800227e <__aeabi_dmul+0x122>
 8002614:	9b00      	ldr	r3, [sp, #0]
 8002616:	46a2      	mov	sl, r4
 8002618:	469b      	mov	fp, r3
 800261a:	4681      	mov	r9, r0
 800261c:	2480      	movs	r4, #128	@ 0x80
 800261e:	4653      	mov	r3, sl
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	431c      	orrs	r4, r3
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	464a      	mov	r2, r9
 8002628:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <__aeabi_dmul+0x588>)
 800262a:	0b24      	lsrs	r4, r4, #12
 800262c:	e5ec      	b.n	8002208 <__aeabi_dmul+0xac>
 800262e:	f000 fd75 	bl	800311c <__clzsi2>
 8002632:	2315      	movs	r3, #21
 8002634:	469c      	mov	ip, r3
 8002636:	4484      	add	ip, r0
 8002638:	0002      	movs	r2, r0
 800263a:	4663      	mov	r3, ip
 800263c:	3220      	adds	r2, #32
 800263e:	2b1c      	cmp	r3, #28
 8002640:	dc00      	bgt.n	8002644 <__aeabi_dmul+0x4e8>
 8002642:	e684      	b.n	800234e <__aeabi_dmul+0x1f2>
 8002644:	2300      	movs	r3, #0
 8002646:	4699      	mov	r9, r3
 8002648:	0023      	movs	r3, r4
 800264a:	3808      	subs	r0, #8
 800264c:	4083      	lsls	r3, r0
 800264e:	469a      	mov	sl, r3
 8002650:	e68e      	b.n	8002370 <__aeabi_dmul+0x214>
 8002652:	f000 fd63 	bl	800311c <__clzsi2>
 8002656:	0002      	movs	r2, r0
 8002658:	0003      	movs	r3, r0
 800265a:	3215      	adds	r2, #21
 800265c:	3320      	adds	r3, #32
 800265e:	2a1c      	cmp	r2, #28
 8002660:	dc00      	bgt.n	8002664 <__aeabi_dmul+0x508>
 8002662:	e64e      	b.n	8002302 <__aeabi_dmul+0x1a6>
 8002664:	0002      	movs	r2, r0
 8002666:	0034      	movs	r4, r6
 8002668:	3a08      	subs	r2, #8
 800266a:	2000      	movs	r0, #0
 800266c:	4094      	lsls	r4, r2
 800266e:	e652      	b.n	8002316 <__aeabi_dmul+0x1ba>
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	e604      	b.n	800227e <__aeabi_dmul+0x122>
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <__aeabi_dmul+0x58c>)
 8002676:	0021      	movs	r1, r4
 8002678:	469c      	mov	ip, r3
 800267a:	0003      	movs	r3, r0
 800267c:	9d01      	ldr	r5, [sp, #4]
 800267e:	40d3      	lsrs	r3, r2
 8002680:	4465      	add	r5, ip
 8002682:	40a9      	lsls	r1, r5
 8002684:	4319      	orrs	r1, r3
 8002686:	0003      	movs	r3, r0
 8002688:	40ab      	lsls	r3, r5
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	4183      	sbcs	r3, r0
 800268e:	4319      	orrs	r1, r3
 8002690:	0008      	movs	r0, r1
 8002692:	40d4      	lsrs	r4, r2
 8002694:	074b      	lsls	r3, r1, #29
 8002696:	d009      	beq.n	80026ac <__aeabi_dmul+0x550>
 8002698:	230f      	movs	r3, #15
 800269a:	400b      	ands	r3, r1
 800269c:	2b04      	cmp	r3, #4
 800269e:	d005      	beq.n	80026ac <__aeabi_dmul+0x550>
 80026a0:	1d0b      	adds	r3, r1, #4
 80026a2:	428b      	cmp	r3, r1
 80026a4:	4180      	sbcs	r0, r0
 80026a6:	4240      	negs	r0, r0
 80026a8:	1824      	adds	r4, r4, r0
 80026aa:	0018      	movs	r0, r3
 80026ac:	0223      	lsls	r3, r4, #8
 80026ae:	d400      	bmi.n	80026b2 <__aeabi_dmul+0x556>
 80026b0:	e6d6      	b.n	8002460 <__aeabi_dmul+0x304>
 80026b2:	2301      	movs	r3, #1
 80026b4:	2400      	movs	r4, #0
 80026b6:	2200      	movs	r2, #0
 80026b8:	e5a6      	b.n	8002208 <__aeabi_dmul+0xac>
 80026ba:	290f      	cmp	r1, #15
 80026bc:	d1aa      	bne.n	8002614 <__aeabi_dmul+0x4b8>
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	4652      	mov	r2, sl
 80026c2:	031b      	lsls	r3, r3, #12
 80026c4:	421a      	tst	r2, r3
 80026c6:	d0a9      	beq.n	800261c <__aeabi_dmul+0x4c0>
 80026c8:	421c      	tst	r4, r3
 80026ca:	d1a7      	bne.n	800261c <__aeabi_dmul+0x4c0>
 80026cc:	431c      	orrs	r4, r3
 80026ce:	9b00      	ldr	r3, [sp, #0]
 80026d0:	0002      	movs	r2, r0
 80026d2:	469b      	mov	fp, r3
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <__aeabi_dmul+0x588>)
 80026d6:	e597      	b.n	8002208 <__aeabi_dmul+0xac>
 80026d8:	2400      	movs	r4, #0
 80026da:	e6c1      	b.n	8002460 <__aeabi_dmul+0x304>
 80026dc:	2400      	movs	r4, #0
 80026de:	4b01      	ldr	r3, [pc, #4]	@ (80026e4 <__aeabi_dmul+0x588>)
 80026e0:	0022      	movs	r2, r4
 80026e2:	e591      	b.n	8002208 <__aeabi_dmul+0xac>
 80026e4:	000007ff 	.word	0x000007ff
 80026e8:	0000041e 	.word	0x0000041e

080026ec <__aeabi_dsub>:
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	464e      	mov	r6, r9
 80026f0:	4645      	mov	r5, r8
 80026f2:	46de      	mov	lr, fp
 80026f4:	4657      	mov	r7, sl
 80026f6:	b5e0      	push	{r5, r6, r7, lr}
 80026f8:	b085      	sub	sp, #20
 80026fa:	9000      	str	r0, [sp, #0]
 80026fc:	9101      	str	r1, [sp, #4]
 80026fe:	030c      	lsls	r4, r1, #12
 8002700:	004f      	lsls	r7, r1, #1
 8002702:	0fce      	lsrs	r6, r1, #31
 8002704:	0a61      	lsrs	r1, r4, #9
 8002706:	9c00      	ldr	r4, [sp, #0]
 8002708:	46b0      	mov	r8, r6
 800270a:	0f64      	lsrs	r4, r4, #29
 800270c:	430c      	orrs	r4, r1
 800270e:	9900      	ldr	r1, [sp, #0]
 8002710:	0d7f      	lsrs	r7, r7, #21
 8002712:	00c8      	lsls	r0, r1, #3
 8002714:	0011      	movs	r1, r2
 8002716:	001a      	movs	r2, r3
 8002718:	031b      	lsls	r3, r3, #12
 800271a:	469c      	mov	ip, r3
 800271c:	9100      	str	r1, [sp, #0]
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	0051      	lsls	r1, r2, #1
 8002722:	0d4b      	lsrs	r3, r1, #21
 8002724:	4699      	mov	r9, r3
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	9d00      	ldr	r5, [sp, #0]
 800272a:	0fd9      	lsrs	r1, r3, #31
 800272c:	4663      	mov	r3, ip
 800272e:	0f6a      	lsrs	r2, r5, #29
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	4313      	orrs	r3, r2
 8002734:	00ea      	lsls	r2, r5, #3
 8002736:	4694      	mov	ip, r2
 8002738:	4693      	mov	fp, r2
 800273a:	4ac1      	ldr	r2, [pc, #772]	@ (8002a40 <__aeabi_dsub+0x354>)
 800273c:	9003      	str	r0, [sp, #12]
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	4591      	cmp	r9, r2
 8002742:	d100      	bne.n	8002746 <__aeabi_dsub+0x5a>
 8002744:	e0cd      	b.n	80028e2 <__aeabi_dsub+0x1f6>
 8002746:	2501      	movs	r5, #1
 8002748:	4069      	eors	r1, r5
 800274a:	464d      	mov	r5, r9
 800274c:	1b7d      	subs	r5, r7, r5
 800274e:	46aa      	mov	sl, r5
 8002750:	428e      	cmp	r6, r1
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x6a>
 8002754:	e080      	b.n	8002858 <__aeabi_dsub+0x16c>
 8002756:	2d00      	cmp	r5, #0
 8002758:	dc00      	bgt.n	800275c <__aeabi_dsub+0x70>
 800275a:	e335      	b.n	8002dc8 <__aeabi_dsub+0x6dc>
 800275c:	4649      	mov	r1, r9
 800275e:	2900      	cmp	r1, #0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x78>
 8002762:	e0df      	b.n	8002924 <__aeabi_dsub+0x238>
 8002764:	4297      	cmp	r7, r2
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x7e>
 8002768:	e194      	b.n	8002a94 <__aeabi_dsub+0x3a8>
 800276a:	4652      	mov	r2, sl
 800276c:	2501      	movs	r5, #1
 800276e:	2a38      	cmp	r2, #56	@ 0x38
 8002770:	dc19      	bgt.n	80027a6 <__aeabi_dsub+0xba>
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	9b02      	ldr	r3, [sp, #8]
 8002776:	0412      	lsls	r2, r2, #16
 8002778:	4313      	orrs	r3, r2
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	4652      	mov	r2, sl
 800277e:	2a1f      	cmp	r2, #31
 8002780:	dd00      	ble.n	8002784 <__aeabi_dsub+0x98>
 8002782:	e1e3      	b.n	8002b4c <__aeabi_dsub+0x460>
 8002784:	4653      	mov	r3, sl
 8002786:	2220      	movs	r2, #32
 8002788:	4661      	mov	r1, ip
 800278a:	9d02      	ldr	r5, [sp, #8]
 800278c:	1ad2      	subs	r2, r2, r3
 800278e:	4095      	lsls	r5, r2
 8002790:	40d9      	lsrs	r1, r3
 8002792:	430d      	orrs	r5, r1
 8002794:	4661      	mov	r1, ip
 8002796:	4091      	lsls	r1, r2
 8002798:	000a      	movs	r2, r1
 800279a:	1e51      	subs	r1, r2, #1
 800279c:	418a      	sbcs	r2, r1
 800279e:	4315      	orrs	r5, r2
 80027a0:	9a02      	ldr	r2, [sp, #8]
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	1aa4      	subs	r4, r4, r2
 80027a6:	1b45      	subs	r5, r0, r5
 80027a8:	42a8      	cmp	r0, r5
 80027aa:	4180      	sbcs	r0, r0
 80027ac:	4240      	negs	r0, r0
 80027ae:	1a24      	subs	r4, r4, r0
 80027b0:	0223      	lsls	r3, r4, #8
 80027b2:	d400      	bmi.n	80027b6 <__aeabi_dsub+0xca>
 80027b4:	e13d      	b.n	8002a32 <__aeabi_dsub+0x346>
 80027b6:	0264      	lsls	r4, r4, #9
 80027b8:	0a64      	lsrs	r4, r4, #9
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0xd4>
 80027be:	e147      	b.n	8002a50 <__aeabi_dsub+0x364>
 80027c0:	0020      	movs	r0, r4
 80027c2:	f000 fcab 	bl	800311c <__clzsi2>
 80027c6:	0003      	movs	r3, r0
 80027c8:	3b08      	subs	r3, #8
 80027ca:	2120      	movs	r1, #32
 80027cc:	0028      	movs	r0, r5
 80027ce:	1aca      	subs	r2, r1, r3
 80027d0:	40d0      	lsrs	r0, r2
 80027d2:	409c      	lsls	r4, r3
 80027d4:	0002      	movs	r2, r0
 80027d6:	409d      	lsls	r5, r3
 80027d8:	4322      	orrs	r2, r4
 80027da:	429f      	cmp	r7, r3
 80027dc:	dd00      	ble.n	80027e0 <__aeabi_dsub+0xf4>
 80027de:	e177      	b.n	8002ad0 <__aeabi_dsub+0x3e4>
 80027e0:	1bd8      	subs	r0, r3, r7
 80027e2:	3001      	adds	r0, #1
 80027e4:	1a09      	subs	r1, r1, r0
 80027e6:	002c      	movs	r4, r5
 80027e8:	408d      	lsls	r5, r1
 80027ea:	40c4      	lsrs	r4, r0
 80027ec:	1e6b      	subs	r3, r5, #1
 80027ee:	419d      	sbcs	r5, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	40c2      	lsrs	r2, r0
 80027f4:	408b      	lsls	r3, r1
 80027f6:	4325      	orrs	r5, r4
 80027f8:	2700      	movs	r7, #0
 80027fa:	0014      	movs	r4, r2
 80027fc:	431d      	orrs	r5, r3
 80027fe:	076b      	lsls	r3, r5, #29
 8002800:	d009      	beq.n	8002816 <__aeabi_dsub+0x12a>
 8002802:	230f      	movs	r3, #15
 8002804:	402b      	ands	r3, r5
 8002806:	2b04      	cmp	r3, #4
 8002808:	d005      	beq.n	8002816 <__aeabi_dsub+0x12a>
 800280a:	1d2b      	adds	r3, r5, #4
 800280c:	42ab      	cmp	r3, r5
 800280e:	41ad      	sbcs	r5, r5
 8002810:	426d      	negs	r5, r5
 8002812:	1964      	adds	r4, r4, r5
 8002814:	001d      	movs	r5, r3
 8002816:	0223      	lsls	r3, r4, #8
 8002818:	d400      	bmi.n	800281c <__aeabi_dsub+0x130>
 800281a:	e140      	b.n	8002a9e <__aeabi_dsub+0x3b2>
 800281c:	4a88      	ldr	r2, [pc, #544]	@ (8002a40 <__aeabi_dsub+0x354>)
 800281e:	3701      	adds	r7, #1
 8002820:	4297      	cmp	r7, r2
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x13a>
 8002824:	e101      	b.n	8002a2a <__aeabi_dsub+0x33e>
 8002826:	2601      	movs	r6, #1
 8002828:	4643      	mov	r3, r8
 800282a:	4986      	ldr	r1, [pc, #536]	@ (8002a44 <__aeabi_dsub+0x358>)
 800282c:	08ed      	lsrs	r5, r5, #3
 800282e:	4021      	ands	r1, r4
 8002830:	074a      	lsls	r2, r1, #29
 8002832:	432a      	orrs	r2, r5
 8002834:	057c      	lsls	r4, r7, #21
 8002836:	024d      	lsls	r5, r1, #9
 8002838:	0b2d      	lsrs	r5, r5, #12
 800283a:	0d64      	lsrs	r4, r4, #21
 800283c:	401e      	ands	r6, r3
 800283e:	0524      	lsls	r4, r4, #20
 8002840:	432c      	orrs	r4, r5
 8002842:	07f6      	lsls	r6, r6, #31
 8002844:	4334      	orrs	r4, r6
 8002846:	0010      	movs	r0, r2
 8002848:	0021      	movs	r1, r4
 800284a:	b005      	add	sp, #20
 800284c:	bcf0      	pop	{r4, r5, r6, r7}
 800284e:	46bb      	mov	fp, r7
 8002850:	46b2      	mov	sl, r6
 8002852:	46a9      	mov	r9, r5
 8002854:	46a0      	mov	r8, r4
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002858:	2d00      	cmp	r5, #0
 800285a:	dc00      	bgt.n	800285e <__aeabi_dsub+0x172>
 800285c:	e2d0      	b.n	8002e00 <__aeabi_dsub+0x714>
 800285e:	4649      	mov	r1, r9
 8002860:	2900      	cmp	r1, #0
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x17a>
 8002864:	e0d4      	b.n	8002a10 <__aeabi_dsub+0x324>
 8002866:	4661      	mov	r1, ip
 8002868:	9b02      	ldr	r3, [sp, #8]
 800286a:	4319      	orrs	r1, r3
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x184>
 800286e:	e12b      	b.n	8002ac8 <__aeabi_dsub+0x3dc>
 8002870:	1e69      	subs	r1, r5, #1
 8002872:	2d01      	cmp	r5, #1
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x18c>
 8002876:	e1d9      	b.n	8002c2c <__aeabi_dsub+0x540>
 8002878:	4295      	cmp	r5, r2
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x192>
 800287c:	e10a      	b.n	8002a94 <__aeabi_dsub+0x3a8>
 800287e:	2501      	movs	r5, #1
 8002880:	2938      	cmp	r1, #56	@ 0x38
 8002882:	dc17      	bgt.n	80028b4 <__aeabi_dsub+0x1c8>
 8002884:	468a      	mov	sl, r1
 8002886:	4653      	mov	r3, sl
 8002888:	2b1f      	cmp	r3, #31
 800288a:	dd00      	ble.n	800288e <__aeabi_dsub+0x1a2>
 800288c:	e1e7      	b.n	8002c5e <__aeabi_dsub+0x572>
 800288e:	2220      	movs	r2, #32
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	9b02      	ldr	r3, [sp, #8]
 8002894:	4661      	mov	r1, ip
 8002896:	4093      	lsls	r3, r2
 8002898:	001d      	movs	r5, r3
 800289a:	4653      	mov	r3, sl
 800289c:	40d9      	lsrs	r1, r3
 800289e:	4663      	mov	r3, ip
 80028a0:	4093      	lsls	r3, r2
 80028a2:	001a      	movs	r2, r3
 80028a4:	430d      	orrs	r5, r1
 80028a6:	1e51      	subs	r1, r2, #1
 80028a8:	418a      	sbcs	r2, r1
 80028aa:	4653      	mov	r3, sl
 80028ac:	4315      	orrs	r5, r2
 80028ae:	9a02      	ldr	r2, [sp, #8]
 80028b0:	40da      	lsrs	r2, r3
 80028b2:	18a4      	adds	r4, r4, r2
 80028b4:	182d      	adds	r5, r5, r0
 80028b6:	4285      	cmp	r5, r0
 80028b8:	4180      	sbcs	r0, r0
 80028ba:	4240      	negs	r0, r0
 80028bc:	1824      	adds	r4, r4, r0
 80028be:	0223      	lsls	r3, r4, #8
 80028c0:	d400      	bmi.n	80028c4 <__aeabi_dsub+0x1d8>
 80028c2:	e0b6      	b.n	8002a32 <__aeabi_dsub+0x346>
 80028c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <__aeabi_dsub+0x354>)
 80028c6:	3701      	adds	r7, #1
 80028c8:	429f      	cmp	r7, r3
 80028ca:	d100      	bne.n	80028ce <__aeabi_dsub+0x1e2>
 80028cc:	e0ad      	b.n	8002a2a <__aeabi_dsub+0x33e>
 80028ce:	2101      	movs	r1, #1
 80028d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a44 <__aeabi_dsub+0x358>)
 80028d2:	086a      	lsrs	r2, r5, #1
 80028d4:	401c      	ands	r4, r3
 80028d6:	4029      	ands	r1, r5
 80028d8:	430a      	orrs	r2, r1
 80028da:	07e5      	lsls	r5, r4, #31
 80028dc:	4315      	orrs	r5, r2
 80028de:	0864      	lsrs	r4, r4, #1
 80028e0:	e78d      	b.n	80027fe <__aeabi_dsub+0x112>
 80028e2:	4a59      	ldr	r2, [pc, #356]	@ (8002a48 <__aeabi_dsub+0x35c>)
 80028e4:	9b02      	ldr	r3, [sp, #8]
 80028e6:	4692      	mov	sl, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	44ba      	add	sl, r7
 80028ec:	431a      	orrs	r2, r3
 80028ee:	d02c      	beq.n	800294a <__aeabi_dsub+0x25e>
 80028f0:	428e      	cmp	r6, r1
 80028f2:	d02e      	beq.n	8002952 <__aeabi_dsub+0x266>
 80028f4:	4652      	mov	r2, sl
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d060      	beq.n	80029bc <__aeabi_dsub+0x2d0>
 80028fa:	2f00      	cmp	r7, #0
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x214>
 80028fe:	e0db      	b.n	8002ab8 <__aeabi_dsub+0x3cc>
 8002900:	4663      	mov	r3, ip
 8002902:	000e      	movs	r6, r1
 8002904:	9c02      	ldr	r4, [sp, #8]
 8002906:	08d8      	lsrs	r0, r3, #3
 8002908:	0762      	lsls	r2, r4, #29
 800290a:	4302      	orrs	r2, r0
 800290c:	08e4      	lsrs	r4, r4, #3
 800290e:	0013      	movs	r3, r2
 8002910:	4323      	orrs	r3, r4
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x22a>
 8002914:	e254      	b.n	8002dc0 <__aeabi_dsub+0x6d4>
 8002916:	2580      	movs	r5, #128	@ 0x80
 8002918:	032d      	lsls	r5, r5, #12
 800291a:	4325      	orrs	r5, r4
 800291c:	032d      	lsls	r5, r5, #12
 800291e:	4c48      	ldr	r4, [pc, #288]	@ (8002a40 <__aeabi_dsub+0x354>)
 8002920:	0b2d      	lsrs	r5, r5, #12
 8002922:	e78c      	b.n	800283e <__aeabi_dsub+0x152>
 8002924:	4661      	mov	r1, ip
 8002926:	9b02      	ldr	r3, [sp, #8]
 8002928:	4319      	orrs	r1, r3
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x242>
 800292c:	e0cc      	b.n	8002ac8 <__aeabi_dsub+0x3dc>
 800292e:	0029      	movs	r1, r5
 8002930:	3901      	subs	r1, #1
 8002932:	2d01      	cmp	r5, #1
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x24c>
 8002936:	e188      	b.n	8002c4a <__aeabi_dsub+0x55e>
 8002938:	4295      	cmp	r5, r2
 800293a:	d100      	bne.n	800293e <__aeabi_dsub+0x252>
 800293c:	e0aa      	b.n	8002a94 <__aeabi_dsub+0x3a8>
 800293e:	2501      	movs	r5, #1
 8002940:	2938      	cmp	r1, #56	@ 0x38
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0x25a>
 8002944:	e72f      	b.n	80027a6 <__aeabi_dsub+0xba>
 8002946:	468a      	mov	sl, r1
 8002948:	e718      	b.n	800277c <__aeabi_dsub+0x90>
 800294a:	2201      	movs	r2, #1
 800294c:	4051      	eors	r1, r2
 800294e:	428e      	cmp	r6, r1
 8002950:	d1d0      	bne.n	80028f4 <__aeabi_dsub+0x208>
 8002952:	4653      	mov	r3, sl
 8002954:	2b00      	cmp	r3, #0
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x26e>
 8002958:	e0be      	b.n	8002ad8 <__aeabi_dsub+0x3ec>
 800295a:	2f00      	cmp	r7, #0
 800295c:	d000      	beq.n	8002960 <__aeabi_dsub+0x274>
 800295e:	e138      	b.n	8002bd2 <__aeabi_dsub+0x4e6>
 8002960:	46ca      	mov	sl, r9
 8002962:	0022      	movs	r2, r4
 8002964:	4302      	orrs	r2, r0
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x27e>
 8002968:	e1e2      	b.n	8002d30 <__aeabi_dsub+0x644>
 800296a:	4653      	mov	r3, sl
 800296c:	1e59      	subs	r1, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x288>
 8002972:	e20d      	b.n	8002d90 <__aeabi_dsub+0x6a4>
 8002974:	4a32      	ldr	r2, [pc, #200]	@ (8002a40 <__aeabi_dsub+0x354>)
 8002976:	4592      	cmp	sl, r2
 8002978:	d100      	bne.n	800297c <__aeabi_dsub+0x290>
 800297a:	e1d2      	b.n	8002d22 <__aeabi_dsub+0x636>
 800297c:	2701      	movs	r7, #1
 800297e:	2938      	cmp	r1, #56	@ 0x38
 8002980:	dc13      	bgt.n	80029aa <__aeabi_dsub+0x2be>
 8002982:	291f      	cmp	r1, #31
 8002984:	dd00      	ble.n	8002988 <__aeabi_dsub+0x29c>
 8002986:	e1ee      	b.n	8002d66 <__aeabi_dsub+0x67a>
 8002988:	2220      	movs	r2, #32
 800298a:	9b02      	ldr	r3, [sp, #8]
 800298c:	1a52      	subs	r2, r2, r1
 800298e:	0025      	movs	r5, r4
 8002990:	0007      	movs	r7, r0
 8002992:	469a      	mov	sl, r3
 8002994:	40cc      	lsrs	r4, r1
 8002996:	4090      	lsls	r0, r2
 8002998:	4095      	lsls	r5, r2
 800299a:	40cf      	lsrs	r7, r1
 800299c:	44a2      	add	sl, r4
 800299e:	1e42      	subs	r2, r0, #1
 80029a0:	4190      	sbcs	r0, r2
 80029a2:	4653      	mov	r3, sl
 80029a4:	432f      	orrs	r7, r5
 80029a6:	4307      	orrs	r7, r0
 80029a8:	9302      	str	r3, [sp, #8]
 80029aa:	003d      	movs	r5, r7
 80029ac:	4465      	add	r5, ip
 80029ae:	4565      	cmp	r5, ip
 80029b0:	4192      	sbcs	r2, r2
 80029b2:	9b02      	ldr	r3, [sp, #8]
 80029b4:	4252      	negs	r2, r2
 80029b6:	464f      	mov	r7, r9
 80029b8:	18d4      	adds	r4, r2, r3
 80029ba:	e780      	b.n	80028be <__aeabi_dsub+0x1d2>
 80029bc:	4a23      	ldr	r2, [pc, #140]	@ (8002a4c <__aeabi_dsub+0x360>)
 80029be:	1c7d      	adds	r5, r7, #1
 80029c0:	4215      	tst	r5, r2
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x2da>
 80029c4:	e0aa      	b.n	8002b1c <__aeabi_dsub+0x430>
 80029c6:	4662      	mov	r2, ip
 80029c8:	0025      	movs	r5, r4
 80029ca:	9b02      	ldr	r3, [sp, #8]
 80029cc:	4305      	orrs	r5, r0
 80029ce:	431a      	orrs	r2, r3
 80029d0:	2f00      	cmp	r7, #0
 80029d2:	d000      	beq.n	80029d6 <__aeabi_dsub+0x2ea>
 80029d4:	e0f5      	b.n	8002bc2 <__aeabi_dsub+0x4d6>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x2f0>
 80029da:	e16b      	b.n	8002cb4 <__aeabi_dsub+0x5c8>
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x2f6>
 80029e0:	e152      	b.n	8002c88 <__aeabi_dsub+0x59c>
 80029e2:	4663      	mov	r3, ip
 80029e4:	1ac5      	subs	r5, r0, r3
 80029e6:	9b02      	ldr	r3, [sp, #8]
 80029e8:	1ae2      	subs	r2, r4, r3
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	419b      	sbcs	r3, r3
 80029ee:	425b      	negs	r3, r3
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	021a      	lsls	r2, r3, #8
 80029f4:	d400      	bmi.n	80029f8 <__aeabi_dsub+0x30c>
 80029f6:	e1d5      	b.n	8002da4 <__aeabi_dsub+0x6b8>
 80029f8:	4663      	mov	r3, ip
 80029fa:	1a1d      	subs	r5, r3, r0
 80029fc:	45ac      	cmp	ip, r5
 80029fe:	4192      	sbcs	r2, r2
 8002a00:	2601      	movs	r6, #1
 8002a02:	9b02      	ldr	r3, [sp, #8]
 8002a04:	4252      	negs	r2, r2
 8002a06:	1b1c      	subs	r4, r3, r4
 8002a08:	4688      	mov	r8, r1
 8002a0a:	1aa4      	subs	r4, r4, r2
 8002a0c:	400e      	ands	r6, r1
 8002a0e:	e6f6      	b.n	80027fe <__aeabi_dsub+0x112>
 8002a10:	4297      	cmp	r7, r2
 8002a12:	d03f      	beq.n	8002a94 <__aeabi_dsub+0x3a8>
 8002a14:	4652      	mov	r2, sl
 8002a16:	2501      	movs	r5, #1
 8002a18:	2a38      	cmp	r2, #56	@ 0x38
 8002a1a:	dd00      	ble.n	8002a1e <__aeabi_dsub+0x332>
 8002a1c:	e74a      	b.n	80028b4 <__aeabi_dsub+0x1c8>
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	0412      	lsls	r2, r2, #16
 8002a24:	4313      	orrs	r3, r2
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	e72d      	b.n	8002886 <__aeabi_dsub+0x19a>
 8002a2a:	003c      	movs	r4, r7
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	e705      	b.n	800283e <__aeabi_dsub+0x152>
 8002a32:	2307      	movs	r3, #7
 8002a34:	402b      	ands	r3, r5
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d000      	beq.n	8002a3c <__aeabi_dsub+0x350>
 8002a3a:	e6e2      	b.n	8002802 <__aeabi_dsub+0x116>
 8002a3c:	e06b      	b.n	8002b16 <__aeabi_dsub+0x42a>
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	000007ff 	.word	0x000007ff
 8002a44:	ff7fffff 	.word	0xff7fffff
 8002a48:	fffff801 	.word	0xfffff801
 8002a4c:	000007fe 	.word	0x000007fe
 8002a50:	0028      	movs	r0, r5
 8002a52:	f000 fb63 	bl	800311c <__clzsi2>
 8002a56:	0003      	movs	r3, r0
 8002a58:	3318      	adds	r3, #24
 8002a5a:	2b1f      	cmp	r3, #31
 8002a5c:	dc00      	bgt.n	8002a60 <__aeabi_dsub+0x374>
 8002a5e:	e6b4      	b.n	80027ca <__aeabi_dsub+0xde>
 8002a60:	002a      	movs	r2, r5
 8002a62:	3808      	subs	r0, #8
 8002a64:	4082      	lsls	r2, r0
 8002a66:	429f      	cmp	r7, r3
 8002a68:	dd00      	ble.n	8002a6c <__aeabi_dsub+0x380>
 8002a6a:	e0b9      	b.n	8002be0 <__aeabi_dsub+0x4f4>
 8002a6c:	1bdb      	subs	r3, r3, r7
 8002a6e:	1c58      	adds	r0, r3, #1
 8002a70:	281f      	cmp	r0, #31
 8002a72:	dc00      	bgt.n	8002a76 <__aeabi_dsub+0x38a>
 8002a74:	e1a0      	b.n	8002db8 <__aeabi_dsub+0x6cc>
 8002a76:	0015      	movs	r5, r2
 8002a78:	3b1f      	subs	r3, #31
 8002a7a:	40dd      	lsrs	r5, r3
 8002a7c:	2820      	cmp	r0, #32
 8002a7e:	d005      	beq.n	8002a8c <__aeabi_dsub+0x3a0>
 8002a80:	2340      	movs	r3, #64	@ 0x40
 8002a82:	1a1b      	subs	r3, r3, r0
 8002a84:	409a      	lsls	r2, r3
 8002a86:	1e53      	subs	r3, r2, #1
 8002a88:	419a      	sbcs	r2, r3
 8002a8a:	4315      	orrs	r5, r2
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	2700      	movs	r7, #0
 8002a90:	402b      	ands	r3, r5
 8002a92:	e7d0      	b.n	8002a36 <__aeabi_dsub+0x34a>
 8002a94:	08c0      	lsrs	r0, r0, #3
 8002a96:	0762      	lsls	r2, r4, #29
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	08e4      	lsrs	r4, r4, #3
 8002a9c:	e737      	b.n	800290e <__aeabi_dsub+0x222>
 8002a9e:	08ea      	lsrs	r2, r5, #3
 8002aa0:	0763      	lsls	r3, r4, #29
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	4bd3      	ldr	r3, [pc, #844]	@ (8002df4 <__aeabi_dsub+0x708>)
 8002aa6:	08e4      	lsrs	r4, r4, #3
 8002aa8:	429f      	cmp	r7, r3
 8002aaa:	d100      	bne.n	8002aae <__aeabi_dsub+0x3c2>
 8002aac:	e72f      	b.n	800290e <__aeabi_dsub+0x222>
 8002aae:	0324      	lsls	r4, r4, #12
 8002ab0:	0b25      	lsrs	r5, r4, #12
 8002ab2:	057c      	lsls	r4, r7, #21
 8002ab4:	0d64      	lsrs	r4, r4, #21
 8002ab6:	e6c2      	b.n	800283e <__aeabi_dsub+0x152>
 8002ab8:	46ca      	mov	sl, r9
 8002aba:	0022      	movs	r2, r4
 8002abc:	4302      	orrs	r2, r0
 8002abe:	d158      	bne.n	8002b72 <__aeabi_dsub+0x486>
 8002ac0:	4663      	mov	r3, ip
 8002ac2:	000e      	movs	r6, r1
 8002ac4:	9c02      	ldr	r4, [sp, #8]
 8002ac6:	9303      	str	r3, [sp, #12]
 8002ac8:	9b03      	ldr	r3, [sp, #12]
 8002aca:	4657      	mov	r7, sl
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	e7e7      	b.n	8002aa0 <__aeabi_dsub+0x3b4>
 8002ad0:	4cc9      	ldr	r4, [pc, #804]	@ (8002df8 <__aeabi_dsub+0x70c>)
 8002ad2:	1aff      	subs	r7, r7, r3
 8002ad4:	4014      	ands	r4, r2
 8002ad6:	e692      	b.n	80027fe <__aeabi_dsub+0x112>
 8002ad8:	4dc8      	ldr	r5, [pc, #800]	@ (8002dfc <__aeabi_dsub+0x710>)
 8002ada:	1c7a      	adds	r2, r7, #1
 8002adc:	422a      	tst	r2, r5
 8002ade:	d000      	beq.n	8002ae2 <__aeabi_dsub+0x3f6>
 8002ae0:	e084      	b.n	8002bec <__aeabi_dsub+0x500>
 8002ae2:	0022      	movs	r2, r4
 8002ae4:	4302      	orrs	r2, r0
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	d000      	beq.n	8002aec <__aeabi_dsub+0x400>
 8002aea:	e0ef      	b.n	8002ccc <__aeabi_dsub+0x5e0>
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d100      	bne.n	8002af2 <__aeabi_dsub+0x406>
 8002af0:	e0e5      	b.n	8002cbe <__aeabi_dsub+0x5d2>
 8002af2:	4662      	mov	r2, ip
 8002af4:	9902      	ldr	r1, [sp, #8]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x410>
 8002afa:	e0c5      	b.n	8002c88 <__aeabi_dsub+0x59c>
 8002afc:	4663      	mov	r3, ip
 8002afe:	18c5      	adds	r5, r0, r3
 8002b00:	468c      	mov	ip, r1
 8002b02:	4285      	cmp	r5, r0
 8002b04:	4180      	sbcs	r0, r0
 8002b06:	4464      	add	r4, ip
 8002b08:	4240      	negs	r0, r0
 8002b0a:	1824      	adds	r4, r4, r0
 8002b0c:	0223      	lsls	r3, r4, #8
 8002b0e:	d502      	bpl.n	8002b16 <__aeabi_dsub+0x42a>
 8002b10:	4bb9      	ldr	r3, [pc, #740]	@ (8002df8 <__aeabi_dsub+0x70c>)
 8002b12:	3701      	adds	r7, #1
 8002b14:	401c      	ands	r4, r3
 8002b16:	46ba      	mov	sl, r7
 8002b18:	9503      	str	r5, [sp, #12]
 8002b1a:	e7d5      	b.n	8002ac8 <__aeabi_dsub+0x3dc>
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	1a85      	subs	r5, r0, r2
 8002b20:	42a8      	cmp	r0, r5
 8002b22:	4192      	sbcs	r2, r2
 8002b24:	4252      	negs	r2, r2
 8002b26:	4691      	mov	r9, r2
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	1ae3      	subs	r3, r4, r3
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	464b      	mov	r3, r9
 8002b30:	1ad2      	subs	r2, r2, r3
 8002b32:	0013      	movs	r3, r2
 8002b34:	4691      	mov	r9, r2
 8002b36:	021a      	lsls	r2, r3, #8
 8002b38:	d46c      	bmi.n	8002c14 <__aeabi_dsub+0x528>
 8002b3a:	464a      	mov	r2, r9
 8002b3c:	464c      	mov	r4, r9
 8002b3e:	432a      	orrs	r2, r5
 8002b40:	d000      	beq.n	8002b44 <__aeabi_dsub+0x458>
 8002b42:	e63a      	b.n	80027ba <__aeabi_dsub+0xce>
 8002b44:	2600      	movs	r6, #0
 8002b46:	2400      	movs	r4, #0
 8002b48:	2500      	movs	r5, #0
 8002b4a:	e678      	b.n	800283e <__aeabi_dsub+0x152>
 8002b4c:	9902      	ldr	r1, [sp, #8]
 8002b4e:	4653      	mov	r3, sl
 8002b50:	000d      	movs	r5, r1
 8002b52:	3a20      	subs	r2, #32
 8002b54:	40d5      	lsrs	r5, r2
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d006      	beq.n	8002b68 <__aeabi_dsub+0x47c>
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	1ad2      	subs	r2, r2, r3
 8002b5e:	000b      	movs	r3, r1
 8002b60:	4093      	lsls	r3, r2
 8002b62:	4662      	mov	r2, ip
 8002b64:	431a      	orrs	r2, r3
 8002b66:	4693      	mov	fp, r2
 8002b68:	465b      	mov	r3, fp
 8002b6a:	1e5a      	subs	r2, r3, #1
 8002b6c:	4193      	sbcs	r3, r2
 8002b6e:	431d      	orrs	r5, r3
 8002b70:	e619      	b.n	80027a6 <__aeabi_dsub+0xba>
 8002b72:	4653      	mov	r3, sl
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x490>
 8002b7a:	e0c6      	b.n	8002d0a <__aeabi_dsub+0x61e>
 8002b7c:	4e9d      	ldr	r6, [pc, #628]	@ (8002df4 <__aeabi_dsub+0x708>)
 8002b7e:	45b2      	cmp	sl, r6
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x498>
 8002b82:	e6bd      	b.n	8002900 <__aeabi_dsub+0x214>
 8002b84:	4688      	mov	r8, r1
 8002b86:	000e      	movs	r6, r1
 8002b88:	2501      	movs	r5, #1
 8002b8a:	2a38      	cmp	r2, #56	@ 0x38
 8002b8c:	dc10      	bgt.n	8002bb0 <__aeabi_dsub+0x4c4>
 8002b8e:	2a1f      	cmp	r2, #31
 8002b90:	dc7f      	bgt.n	8002c92 <__aeabi_dsub+0x5a6>
 8002b92:	2120      	movs	r1, #32
 8002b94:	0025      	movs	r5, r4
 8002b96:	1a89      	subs	r1, r1, r2
 8002b98:	0007      	movs	r7, r0
 8002b9a:	4088      	lsls	r0, r1
 8002b9c:	408d      	lsls	r5, r1
 8002b9e:	40d7      	lsrs	r7, r2
 8002ba0:	40d4      	lsrs	r4, r2
 8002ba2:	1e41      	subs	r1, r0, #1
 8002ba4:	4188      	sbcs	r0, r1
 8002ba6:	9b02      	ldr	r3, [sp, #8]
 8002ba8:	433d      	orrs	r5, r7
 8002baa:	1b1b      	subs	r3, r3, r4
 8002bac:	4305      	orrs	r5, r0
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	1b55      	subs	r5, r2, r5
 8002bb4:	45ac      	cmp	ip, r5
 8002bb6:	4192      	sbcs	r2, r2
 8002bb8:	9b02      	ldr	r3, [sp, #8]
 8002bba:	4252      	negs	r2, r2
 8002bbc:	464f      	mov	r7, r9
 8002bbe:	1a9c      	subs	r4, r3, r2
 8002bc0:	e5f6      	b.n	80027b0 <__aeabi_dsub+0xc4>
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	d000      	beq.n	8002bc8 <__aeabi_dsub+0x4dc>
 8002bc6:	e0b7      	b.n	8002d38 <__aeabi_dsub+0x64c>
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d100      	bne.n	8002bce <__aeabi_dsub+0x4e2>
 8002bcc:	e0f0      	b.n	8002db0 <__aeabi_dsub+0x6c4>
 8002bce:	2601      	movs	r6, #1
 8002bd0:	400e      	ands	r6, r1
 8002bd2:	4663      	mov	r3, ip
 8002bd4:	9802      	ldr	r0, [sp, #8]
 8002bd6:	08d9      	lsrs	r1, r3, #3
 8002bd8:	0742      	lsls	r2, r0, #29
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	08c4      	lsrs	r4, r0, #3
 8002bde:	e696      	b.n	800290e <__aeabi_dsub+0x222>
 8002be0:	4c85      	ldr	r4, [pc, #532]	@ (8002df8 <__aeabi_dsub+0x70c>)
 8002be2:	1aff      	subs	r7, r7, r3
 8002be4:	4014      	ands	r4, r2
 8002be6:	0762      	lsls	r2, r4, #29
 8002be8:	08e4      	lsrs	r4, r4, #3
 8002bea:	e760      	b.n	8002aae <__aeabi_dsub+0x3c2>
 8002bec:	4981      	ldr	r1, [pc, #516]	@ (8002df4 <__aeabi_dsub+0x708>)
 8002bee:	428a      	cmp	r2, r1
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dsub+0x508>
 8002bf2:	e0c9      	b.n	8002d88 <__aeabi_dsub+0x69c>
 8002bf4:	4663      	mov	r3, ip
 8002bf6:	18c1      	adds	r1, r0, r3
 8002bf8:	4281      	cmp	r1, r0
 8002bfa:	4180      	sbcs	r0, r0
 8002bfc:	9b02      	ldr	r3, [sp, #8]
 8002bfe:	4240      	negs	r0, r0
 8002c00:	18e3      	adds	r3, r4, r3
 8002c02:	181b      	adds	r3, r3, r0
 8002c04:	07dd      	lsls	r5, r3, #31
 8002c06:	085c      	lsrs	r4, r3, #1
 8002c08:	2307      	movs	r3, #7
 8002c0a:	0849      	lsrs	r1, r1, #1
 8002c0c:	430d      	orrs	r5, r1
 8002c0e:	0017      	movs	r7, r2
 8002c10:	402b      	ands	r3, r5
 8002c12:	e710      	b.n	8002a36 <__aeabi_dsub+0x34a>
 8002c14:	4663      	mov	r3, ip
 8002c16:	1a1d      	subs	r5, r3, r0
 8002c18:	45ac      	cmp	ip, r5
 8002c1a:	4192      	sbcs	r2, r2
 8002c1c:	2601      	movs	r6, #1
 8002c1e:	9b02      	ldr	r3, [sp, #8]
 8002c20:	4252      	negs	r2, r2
 8002c22:	1b1c      	subs	r4, r3, r4
 8002c24:	4688      	mov	r8, r1
 8002c26:	1aa4      	subs	r4, r4, r2
 8002c28:	400e      	ands	r6, r1
 8002c2a:	e5c6      	b.n	80027ba <__aeabi_dsub+0xce>
 8002c2c:	4663      	mov	r3, ip
 8002c2e:	18c5      	adds	r5, r0, r3
 8002c30:	9b02      	ldr	r3, [sp, #8]
 8002c32:	4285      	cmp	r5, r0
 8002c34:	4180      	sbcs	r0, r0
 8002c36:	469c      	mov	ip, r3
 8002c38:	4240      	negs	r0, r0
 8002c3a:	4464      	add	r4, ip
 8002c3c:	1824      	adds	r4, r4, r0
 8002c3e:	2701      	movs	r7, #1
 8002c40:	0223      	lsls	r3, r4, #8
 8002c42:	d400      	bmi.n	8002c46 <__aeabi_dsub+0x55a>
 8002c44:	e6f5      	b.n	8002a32 <__aeabi_dsub+0x346>
 8002c46:	2702      	movs	r7, #2
 8002c48:	e641      	b.n	80028ce <__aeabi_dsub+0x1e2>
 8002c4a:	4663      	mov	r3, ip
 8002c4c:	1ac5      	subs	r5, r0, r3
 8002c4e:	42a8      	cmp	r0, r5
 8002c50:	4180      	sbcs	r0, r0
 8002c52:	9b02      	ldr	r3, [sp, #8]
 8002c54:	4240      	negs	r0, r0
 8002c56:	1ae4      	subs	r4, r4, r3
 8002c58:	2701      	movs	r7, #1
 8002c5a:	1a24      	subs	r4, r4, r0
 8002c5c:	e5a8      	b.n	80027b0 <__aeabi_dsub+0xc4>
 8002c5e:	9d02      	ldr	r5, [sp, #8]
 8002c60:	4652      	mov	r2, sl
 8002c62:	002b      	movs	r3, r5
 8002c64:	3a20      	subs	r2, #32
 8002c66:	40d3      	lsrs	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	4653      	mov	r3, sl
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d006      	beq.n	8002c7e <__aeabi_dsub+0x592>
 8002c70:	2240      	movs	r2, #64	@ 0x40
 8002c72:	1ad2      	subs	r2, r2, r3
 8002c74:	002b      	movs	r3, r5
 8002c76:	4093      	lsls	r3, r2
 8002c78:	4662      	mov	r2, ip
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	4693      	mov	fp, r2
 8002c7e:	465d      	mov	r5, fp
 8002c80:	1e6b      	subs	r3, r5, #1
 8002c82:	419d      	sbcs	r5, r3
 8002c84:	430d      	orrs	r5, r1
 8002c86:	e615      	b.n	80028b4 <__aeabi_dsub+0x1c8>
 8002c88:	0762      	lsls	r2, r4, #29
 8002c8a:	08c0      	lsrs	r0, r0, #3
 8002c8c:	4302      	orrs	r2, r0
 8002c8e:	08e4      	lsrs	r4, r4, #3
 8002c90:	e70d      	b.n	8002aae <__aeabi_dsub+0x3c2>
 8002c92:	0011      	movs	r1, r2
 8002c94:	0027      	movs	r7, r4
 8002c96:	3920      	subs	r1, #32
 8002c98:	40cf      	lsrs	r7, r1
 8002c9a:	2a20      	cmp	r2, #32
 8002c9c:	d005      	beq.n	8002caa <__aeabi_dsub+0x5be>
 8002c9e:	2140      	movs	r1, #64	@ 0x40
 8002ca0:	1a8a      	subs	r2, r1, r2
 8002ca2:	4094      	lsls	r4, r2
 8002ca4:	0025      	movs	r5, r4
 8002ca6:	4305      	orrs	r5, r0
 8002ca8:	9503      	str	r5, [sp, #12]
 8002caa:	9d03      	ldr	r5, [sp, #12]
 8002cac:	1e6a      	subs	r2, r5, #1
 8002cae:	4195      	sbcs	r5, r2
 8002cb0:	433d      	orrs	r5, r7
 8002cb2:	e77d      	b.n	8002bb0 <__aeabi_dsub+0x4c4>
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d100      	bne.n	8002cba <__aeabi_dsub+0x5ce>
 8002cb8:	e744      	b.n	8002b44 <__aeabi_dsub+0x458>
 8002cba:	2601      	movs	r6, #1
 8002cbc:	400e      	ands	r6, r1
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	08d9      	lsrs	r1, r3, #3
 8002cc2:	9b02      	ldr	r3, [sp, #8]
 8002cc4:	075a      	lsls	r2, r3, #29
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	08dc      	lsrs	r4, r3, #3
 8002cca:	e6f0      	b.n	8002aae <__aeabi_dsub+0x3c2>
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d028      	beq.n	8002d22 <__aeabi_dsub+0x636>
 8002cd0:	4662      	mov	r2, ip
 8002cd2:	9f02      	ldr	r7, [sp, #8]
 8002cd4:	08c0      	lsrs	r0, r0, #3
 8002cd6:	433a      	orrs	r2, r7
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x5f0>
 8002cda:	e6dc      	b.n	8002a96 <__aeabi_dsub+0x3aa>
 8002cdc:	0762      	lsls	r2, r4, #29
 8002cde:	4310      	orrs	r0, r2
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	08e4      	lsrs	r4, r4, #3
 8002ce4:	0312      	lsls	r2, r2, #12
 8002ce6:	4214      	tst	r4, r2
 8002ce8:	d009      	beq.n	8002cfe <__aeabi_dsub+0x612>
 8002cea:	08fd      	lsrs	r5, r7, #3
 8002cec:	4215      	tst	r5, r2
 8002cee:	d106      	bne.n	8002cfe <__aeabi_dsub+0x612>
 8002cf0:	4663      	mov	r3, ip
 8002cf2:	2601      	movs	r6, #1
 8002cf4:	002c      	movs	r4, r5
 8002cf6:	08d8      	lsrs	r0, r3, #3
 8002cf8:	077b      	lsls	r3, r7, #29
 8002cfa:	4318      	orrs	r0, r3
 8002cfc:	400e      	ands	r6, r1
 8002cfe:	0f42      	lsrs	r2, r0, #29
 8002d00:	00c0      	lsls	r0, r0, #3
 8002d02:	08c0      	lsrs	r0, r0, #3
 8002d04:	0752      	lsls	r2, r2, #29
 8002d06:	4302      	orrs	r2, r0
 8002d08:	e601      	b.n	800290e <__aeabi_dsub+0x222>
 8002d0a:	4663      	mov	r3, ip
 8002d0c:	1a1d      	subs	r5, r3, r0
 8002d0e:	45ac      	cmp	ip, r5
 8002d10:	4192      	sbcs	r2, r2
 8002d12:	9b02      	ldr	r3, [sp, #8]
 8002d14:	4252      	negs	r2, r2
 8002d16:	1b1c      	subs	r4, r3, r4
 8002d18:	000e      	movs	r6, r1
 8002d1a:	4688      	mov	r8, r1
 8002d1c:	2701      	movs	r7, #1
 8002d1e:	1aa4      	subs	r4, r4, r2
 8002d20:	e546      	b.n	80027b0 <__aeabi_dsub+0xc4>
 8002d22:	4663      	mov	r3, ip
 8002d24:	08d9      	lsrs	r1, r3, #3
 8002d26:	9b02      	ldr	r3, [sp, #8]
 8002d28:	075a      	lsls	r2, r3, #29
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	08dc      	lsrs	r4, r3, #3
 8002d2e:	e5ee      	b.n	800290e <__aeabi_dsub+0x222>
 8002d30:	4663      	mov	r3, ip
 8002d32:	9c02      	ldr	r4, [sp, #8]
 8002d34:	9303      	str	r3, [sp, #12]
 8002d36:	e6c7      	b.n	8002ac8 <__aeabi_dsub+0x3dc>
 8002d38:	08c0      	lsrs	r0, r0, #3
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	d100      	bne.n	8002d40 <__aeabi_dsub+0x654>
 8002d3e:	e6aa      	b.n	8002a96 <__aeabi_dsub+0x3aa>
 8002d40:	0762      	lsls	r2, r4, #29
 8002d42:	4310      	orrs	r0, r2
 8002d44:	2280      	movs	r2, #128	@ 0x80
 8002d46:	08e4      	lsrs	r4, r4, #3
 8002d48:	0312      	lsls	r2, r2, #12
 8002d4a:	4214      	tst	r4, r2
 8002d4c:	d0d7      	beq.n	8002cfe <__aeabi_dsub+0x612>
 8002d4e:	9f02      	ldr	r7, [sp, #8]
 8002d50:	08fd      	lsrs	r5, r7, #3
 8002d52:	4215      	tst	r5, r2
 8002d54:	d1d3      	bne.n	8002cfe <__aeabi_dsub+0x612>
 8002d56:	4663      	mov	r3, ip
 8002d58:	2601      	movs	r6, #1
 8002d5a:	08d8      	lsrs	r0, r3, #3
 8002d5c:	077b      	lsls	r3, r7, #29
 8002d5e:	002c      	movs	r4, r5
 8002d60:	4318      	orrs	r0, r3
 8002d62:	400e      	ands	r6, r1
 8002d64:	e7cb      	b.n	8002cfe <__aeabi_dsub+0x612>
 8002d66:	000a      	movs	r2, r1
 8002d68:	0027      	movs	r7, r4
 8002d6a:	3a20      	subs	r2, #32
 8002d6c:	40d7      	lsrs	r7, r2
 8002d6e:	2920      	cmp	r1, #32
 8002d70:	d005      	beq.n	8002d7e <__aeabi_dsub+0x692>
 8002d72:	2240      	movs	r2, #64	@ 0x40
 8002d74:	1a52      	subs	r2, r2, r1
 8002d76:	4094      	lsls	r4, r2
 8002d78:	0025      	movs	r5, r4
 8002d7a:	4305      	orrs	r5, r0
 8002d7c:	9503      	str	r5, [sp, #12]
 8002d7e:	9d03      	ldr	r5, [sp, #12]
 8002d80:	1e6a      	subs	r2, r5, #1
 8002d82:	4195      	sbcs	r5, r2
 8002d84:	432f      	orrs	r7, r5
 8002d86:	e610      	b.n	80029aa <__aeabi_dsub+0x2be>
 8002d88:	0014      	movs	r4, r2
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	e556      	b.n	800283e <__aeabi_dsub+0x152>
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	4460      	add	r0, ip
 8002d94:	4699      	mov	r9, r3
 8002d96:	4560      	cmp	r0, ip
 8002d98:	4192      	sbcs	r2, r2
 8002d9a:	444c      	add	r4, r9
 8002d9c:	4252      	negs	r2, r2
 8002d9e:	0005      	movs	r5, r0
 8002da0:	18a4      	adds	r4, r4, r2
 8002da2:	e74c      	b.n	8002c3e <__aeabi_dsub+0x552>
 8002da4:	001a      	movs	r2, r3
 8002da6:	001c      	movs	r4, r3
 8002da8:	432a      	orrs	r2, r5
 8002daa:	d000      	beq.n	8002dae <__aeabi_dsub+0x6c2>
 8002dac:	e6b3      	b.n	8002b16 <__aeabi_dsub+0x42a>
 8002dae:	e6c9      	b.n	8002b44 <__aeabi_dsub+0x458>
 8002db0:	2480      	movs	r4, #128	@ 0x80
 8002db2:	2600      	movs	r6, #0
 8002db4:	0324      	lsls	r4, r4, #12
 8002db6:	e5ae      	b.n	8002916 <__aeabi_dsub+0x22a>
 8002db8:	2120      	movs	r1, #32
 8002dba:	2500      	movs	r5, #0
 8002dbc:	1a09      	subs	r1, r1, r0
 8002dbe:	e517      	b.n	80027f0 <__aeabi_dsub+0x104>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2500      	movs	r5, #0
 8002dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002df4 <__aeabi_dsub+0x708>)
 8002dc6:	e53a      	b.n	800283e <__aeabi_dsub+0x152>
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	d100      	bne.n	8002dce <__aeabi_dsub+0x6e2>
 8002dcc:	e5f6      	b.n	80029bc <__aeabi_dsub+0x2d0>
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1bda      	subs	r2, r3, r7
 8002dd2:	4692      	mov	sl, r2
 8002dd4:	2f00      	cmp	r7, #0
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x6ee>
 8002dd8:	e66f      	b.n	8002aba <__aeabi_dsub+0x3ce>
 8002dda:	2a38      	cmp	r2, #56	@ 0x38
 8002ddc:	dc05      	bgt.n	8002dea <__aeabi_dsub+0x6fe>
 8002dde:	2680      	movs	r6, #128	@ 0x80
 8002de0:	0436      	lsls	r6, r6, #16
 8002de2:	4334      	orrs	r4, r6
 8002de4:	4688      	mov	r8, r1
 8002de6:	000e      	movs	r6, r1
 8002de8:	e6d1      	b.n	8002b8e <__aeabi_dsub+0x4a2>
 8002dea:	4688      	mov	r8, r1
 8002dec:	000e      	movs	r6, r1
 8002dee:	2501      	movs	r5, #1
 8002df0:	e6de      	b.n	8002bb0 <__aeabi_dsub+0x4c4>
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	000007ff 	.word	0x000007ff
 8002df8:	ff7fffff 	.word	0xff7fffff
 8002dfc:	000007fe 	.word	0x000007fe
 8002e00:	2d00      	cmp	r5, #0
 8002e02:	d100      	bne.n	8002e06 <__aeabi_dsub+0x71a>
 8002e04:	e668      	b.n	8002ad8 <__aeabi_dsub+0x3ec>
 8002e06:	464b      	mov	r3, r9
 8002e08:	1bd9      	subs	r1, r3, r7
 8002e0a:	2f00      	cmp	r7, #0
 8002e0c:	d101      	bne.n	8002e12 <__aeabi_dsub+0x726>
 8002e0e:	468a      	mov	sl, r1
 8002e10:	e5a7      	b.n	8002962 <__aeabi_dsub+0x276>
 8002e12:	2701      	movs	r7, #1
 8002e14:	2938      	cmp	r1, #56	@ 0x38
 8002e16:	dd00      	ble.n	8002e1a <__aeabi_dsub+0x72e>
 8002e18:	e5c7      	b.n	80029aa <__aeabi_dsub+0x2be>
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	0412      	lsls	r2, r2, #16
 8002e1e:	4314      	orrs	r4, r2
 8002e20:	e5af      	b.n	8002982 <__aeabi_dsub+0x296>
 8002e22:	46c0      	nop			@ (mov r8, r8)

08002e24 <__aeabi_dcmpun>:
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	46c6      	mov	lr, r8
 8002e28:	031e      	lsls	r6, r3, #12
 8002e2a:	0b36      	lsrs	r6, r6, #12
 8002e2c:	46b0      	mov	r8, r6
 8002e2e:	4e0d      	ldr	r6, [pc, #52]	@ (8002e64 <__aeabi_dcmpun+0x40>)
 8002e30:	030c      	lsls	r4, r1, #12
 8002e32:	004d      	lsls	r5, r1, #1
 8002e34:	005f      	lsls	r7, r3, #1
 8002e36:	b500      	push	{lr}
 8002e38:	0b24      	lsrs	r4, r4, #12
 8002e3a:	0d6d      	lsrs	r5, r5, #21
 8002e3c:	0d7f      	lsrs	r7, r7, #21
 8002e3e:	42b5      	cmp	r5, r6
 8002e40:	d00b      	beq.n	8002e5a <__aeabi_dcmpun+0x36>
 8002e42:	4908      	ldr	r1, [pc, #32]	@ (8002e64 <__aeabi_dcmpun+0x40>)
 8002e44:	2000      	movs	r0, #0
 8002e46:	428f      	cmp	r7, r1
 8002e48:	d104      	bne.n	8002e54 <__aeabi_dcmpun+0x30>
 8002e4a:	4646      	mov	r6, r8
 8002e4c:	4316      	orrs	r6, r2
 8002e4e:	0030      	movs	r0, r6
 8002e50:	1e43      	subs	r3, r0, #1
 8002e52:	4198      	sbcs	r0, r3
 8002e54:	bc80      	pop	{r7}
 8002e56:	46b8      	mov	r8, r7
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	4304      	orrs	r4, r0
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	2c00      	cmp	r4, #0
 8002e60:	d1f8      	bne.n	8002e54 <__aeabi_dcmpun+0x30>
 8002e62:	e7ee      	b.n	8002e42 <__aeabi_dcmpun+0x1e>
 8002e64:	000007ff 	.word	0x000007ff

08002e68 <__aeabi_d2iz>:
 8002e68:	000b      	movs	r3, r1
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	4d16      	ldr	r5, [pc, #88]	@ (8002ec8 <__aeabi_d2iz+0x60>)
 8002e70:	030c      	lsls	r4, r1, #12
 8002e72:	b082      	sub	sp, #8
 8002e74:	0049      	lsls	r1, r1, #1
 8002e76:	2000      	movs	r0, #0
 8002e78:	9200      	str	r2, [sp, #0]
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	0b24      	lsrs	r4, r4, #12
 8002e7e:	0d49      	lsrs	r1, r1, #21
 8002e80:	0fde      	lsrs	r6, r3, #31
 8002e82:	42a9      	cmp	r1, r5
 8002e84:	dd04      	ble.n	8002e90 <__aeabi_d2iz+0x28>
 8002e86:	4811      	ldr	r0, [pc, #68]	@ (8002ecc <__aeabi_d2iz+0x64>)
 8002e88:	4281      	cmp	r1, r0
 8002e8a:	dd03      	ble.n	8002e94 <__aeabi_d2iz+0x2c>
 8002e8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <__aeabi_d2iz+0x68>)
 8002e8e:	18f0      	adds	r0, r6, r3
 8002e90:	b002      	add	sp, #8
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	2080      	movs	r0, #128	@ 0x80
 8002e96:	0340      	lsls	r0, r0, #13
 8002e98:	4320      	orrs	r0, r4
 8002e9a:	4c0e      	ldr	r4, [pc, #56]	@ (8002ed4 <__aeabi_d2iz+0x6c>)
 8002e9c:	1a64      	subs	r4, r4, r1
 8002e9e:	2c1f      	cmp	r4, #31
 8002ea0:	dd08      	ble.n	8002eb4 <__aeabi_d2iz+0x4c>
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <__aeabi_d2iz+0x70>)
 8002ea4:	1a5b      	subs	r3, r3, r1
 8002ea6:	40d8      	lsrs	r0, r3
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	4258      	negs	r0, r3
 8002eac:	2e00      	cmp	r6, #0
 8002eae:	d1ef      	bne.n	8002e90 <__aeabi_d2iz+0x28>
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	e7ed      	b.n	8002e90 <__aeabi_d2iz+0x28>
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <__aeabi_d2iz+0x74>)
 8002eb6:	9a00      	ldr	r2, [sp, #0]
 8002eb8:	469c      	mov	ip, r3
 8002eba:	0003      	movs	r3, r0
 8002ebc:	4461      	add	r1, ip
 8002ebe:	408b      	lsls	r3, r1
 8002ec0:	40e2      	lsrs	r2, r4
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	e7f1      	b.n	8002eaa <__aeabi_d2iz+0x42>
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	000003fe 	.word	0x000003fe
 8002ecc:	0000041d 	.word	0x0000041d
 8002ed0:	7fffffff 	.word	0x7fffffff
 8002ed4:	00000433 	.word	0x00000433
 8002ed8:	00000413 	.word	0x00000413
 8002edc:	fffffbed 	.word	0xfffffbed

08002ee0 <__aeabi_i2d>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d016      	beq.n	8002f14 <__aeabi_i2d+0x34>
 8002ee6:	17c3      	asrs	r3, r0, #31
 8002ee8:	18c5      	adds	r5, r0, r3
 8002eea:	405d      	eors	r5, r3
 8002eec:	0fc4      	lsrs	r4, r0, #31
 8002eee:	0028      	movs	r0, r5
 8002ef0:	f000 f914 	bl	800311c <__clzsi2>
 8002ef4:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <__aeabi_i2d+0x58>)
 8002ef6:	1a1b      	subs	r3, r3, r0
 8002ef8:	055b      	lsls	r3, r3, #21
 8002efa:	0d5b      	lsrs	r3, r3, #21
 8002efc:	280a      	cmp	r0, #10
 8002efe:	dc14      	bgt.n	8002f2a <__aeabi_i2d+0x4a>
 8002f00:	0002      	movs	r2, r0
 8002f02:	002e      	movs	r6, r5
 8002f04:	3215      	adds	r2, #21
 8002f06:	4096      	lsls	r6, r2
 8002f08:	220b      	movs	r2, #11
 8002f0a:	1a12      	subs	r2, r2, r0
 8002f0c:	40d5      	lsrs	r5, r2
 8002f0e:	032d      	lsls	r5, r5, #12
 8002f10:	0b2d      	lsrs	r5, r5, #12
 8002f12:	e003      	b.n	8002f1c <__aeabi_i2d+0x3c>
 8002f14:	2400      	movs	r4, #0
 8002f16:	2300      	movs	r3, #0
 8002f18:	2500      	movs	r5, #0
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	051b      	lsls	r3, r3, #20
 8002f1e:	432b      	orrs	r3, r5
 8002f20:	07e4      	lsls	r4, r4, #31
 8002f22:	4323      	orrs	r3, r4
 8002f24:	0030      	movs	r0, r6
 8002f26:	0019      	movs	r1, r3
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
 8002f2a:	380b      	subs	r0, #11
 8002f2c:	4085      	lsls	r5, r0
 8002f2e:	032d      	lsls	r5, r5, #12
 8002f30:	2600      	movs	r6, #0
 8002f32:	0b2d      	lsrs	r5, r5, #12
 8002f34:	e7f2      	b.n	8002f1c <__aeabi_i2d+0x3c>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	0000041e 	.word	0x0000041e

08002f3c <__aeabi_ui2d>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	1e04      	subs	r4, r0, #0
 8002f40:	d010      	beq.n	8002f64 <__aeabi_ui2d+0x28>
 8002f42:	f000 f8eb 	bl	800311c <__clzsi2>
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <__aeabi_ui2d+0x44>)
 8002f48:	1a1b      	subs	r3, r3, r0
 8002f4a:	055b      	lsls	r3, r3, #21
 8002f4c:	0d5b      	lsrs	r3, r3, #21
 8002f4e:	280a      	cmp	r0, #10
 8002f50:	dc0f      	bgt.n	8002f72 <__aeabi_ui2d+0x36>
 8002f52:	220b      	movs	r2, #11
 8002f54:	0021      	movs	r1, r4
 8002f56:	1a12      	subs	r2, r2, r0
 8002f58:	40d1      	lsrs	r1, r2
 8002f5a:	3015      	adds	r0, #21
 8002f5c:	030a      	lsls	r2, r1, #12
 8002f5e:	4084      	lsls	r4, r0
 8002f60:	0b12      	lsrs	r2, r2, #12
 8002f62:	e001      	b.n	8002f68 <__aeabi_ui2d+0x2c>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2200      	movs	r2, #0
 8002f68:	051b      	lsls	r3, r3, #20
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	0019      	movs	r1, r3
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	0022      	movs	r2, r4
 8002f74:	380b      	subs	r0, #11
 8002f76:	4082      	lsls	r2, r0
 8002f78:	0312      	lsls	r2, r2, #12
 8002f7a:	2400      	movs	r4, #0
 8002f7c:	0b12      	lsrs	r2, r2, #12
 8002f7e:	e7f3      	b.n	8002f68 <__aeabi_ui2d+0x2c>
 8002f80:	0000041e 	.word	0x0000041e

08002f84 <__aeabi_f2d>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	0242      	lsls	r2, r0, #9
 8002f88:	0043      	lsls	r3, r0, #1
 8002f8a:	0fc4      	lsrs	r4, r0, #31
 8002f8c:	20fe      	movs	r0, #254	@ 0xfe
 8002f8e:	0e1b      	lsrs	r3, r3, #24
 8002f90:	1c59      	adds	r1, r3, #1
 8002f92:	0a55      	lsrs	r5, r2, #9
 8002f94:	4208      	tst	r0, r1
 8002f96:	d00c      	beq.n	8002fb2 <__aeabi_f2d+0x2e>
 8002f98:	21e0      	movs	r1, #224	@ 0xe0
 8002f9a:	0089      	lsls	r1, r1, #2
 8002f9c:	468c      	mov	ip, r1
 8002f9e:	076d      	lsls	r5, r5, #29
 8002fa0:	0b12      	lsrs	r2, r2, #12
 8002fa2:	4463      	add	r3, ip
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	07e4      	lsls	r4, r4, #31
 8002faa:	4323      	orrs	r3, r4
 8002fac:	0028      	movs	r0, r5
 8002fae:	0019      	movs	r1, r3
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d114      	bne.n	8002fe0 <__aeabi_f2d+0x5c>
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	d01b      	beq.n	8002ff2 <__aeabi_f2d+0x6e>
 8002fba:	0028      	movs	r0, r5
 8002fbc:	f000 f8ae 	bl	800311c <__clzsi2>
 8002fc0:	280a      	cmp	r0, #10
 8002fc2:	dc1c      	bgt.n	8002ffe <__aeabi_f2d+0x7a>
 8002fc4:	230b      	movs	r3, #11
 8002fc6:	002a      	movs	r2, r5
 8002fc8:	1a1b      	subs	r3, r3, r0
 8002fca:	40da      	lsrs	r2, r3
 8002fcc:	0003      	movs	r3, r0
 8002fce:	3315      	adds	r3, #21
 8002fd0:	409d      	lsls	r5, r3
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <__aeabi_f2d+0x88>)
 8002fd4:	0312      	lsls	r2, r2, #12
 8002fd6:	1a1b      	subs	r3, r3, r0
 8002fd8:	055b      	lsls	r3, r3, #21
 8002fda:	0b12      	lsrs	r2, r2, #12
 8002fdc:	0d5b      	lsrs	r3, r3, #21
 8002fde:	e7e1      	b.n	8002fa4 <__aeabi_f2d+0x20>
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	d009      	beq.n	8002ff8 <__aeabi_f2d+0x74>
 8002fe4:	0b13      	lsrs	r3, r2, #12
 8002fe6:	2280      	movs	r2, #128	@ 0x80
 8002fe8:	0312      	lsls	r2, r2, #12
 8002fea:	431a      	orrs	r2, r3
 8002fec:	076d      	lsls	r5, r5, #29
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <__aeabi_f2d+0x8c>)
 8002ff0:	e7d8      	b.n	8002fa4 <__aeabi_f2d+0x20>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	e7d5      	b.n	8002fa4 <__aeabi_f2d+0x20>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <__aeabi_f2d+0x8c>)
 8002ffc:	e7d2      	b.n	8002fa4 <__aeabi_f2d+0x20>
 8002ffe:	0003      	movs	r3, r0
 8003000:	002a      	movs	r2, r5
 8003002:	3b0b      	subs	r3, #11
 8003004:	409a      	lsls	r2, r3
 8003006:	2500      	movs	r5, #0
 8003008:	e7e3      	b.n	8002fd2 <__aeabi_f2d+0x4e>
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	00000389 	.word	0x00000389
 8003010:	000007ff 	.word	0x000007ff

08003014 <__aeabi_d2f>:
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	004b      	lsls	r3, r1, #1
 8003018:	030f      	lsls	r7, r1, #12
 800301a:	0d5b      	lsrs	r3, r3, #21
 800301c:	4c3b      	ldr	r4, [pc, #236]	@ (800310c <__aeabi_d2f+0xf8>)
 800301e:	0f45      	lsrs	r5, r0, #29
 8003020:	b083      	sub	sp, #12
 8003022:	0a7f      	lsrs	r7, r7, #9
 8003024:	1c5e      	adds	r6, r3, #1
 8003026:	432f      	orrs	r7, r5
 8003028:	9000      	str	r0, [sp, #0]
 800302a:	9101      	str	r1, [sp, #4]
 800302c:	0fca      	lsrs	r2, r1, #31
 800302e:	00c5      	lsls	r5, r0, #3
 8003030:	4226      	tst	r6, r4
 8003032:	d00b      	beq.n	800304c <__aeabi_d2f+0x38>
 8003034:	4936      	ldr	r1, [pc, #216]	@ (8003110 <__aeabi_d2f+0xfc>)
 8003036:	185c      	adds	r4, r3, r1
 8003038:	2cfe      	cmp	r4, #254	@ 0xfe
 800303a:	dd13      	ble.n	8003064 <__aeabi_d2f+0x50>
 800303c:	20ff      	movs	r0, #255	@ 0xff
 800303e:	2300      	movs	r3, #0
 8003040:	05c0      	lsls	r0, r0, #23
 8003042:	4318      	orrs	r0, r3
 8003044:	07d2      	lsls	r2, r2, #31
 8003046:	4310      	orrs	r0, r2
 8003048:	b003      	add	sp, #12
 800304a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <__aeabi_d2f+0x42>
 8003050:	2000      	movs	r0, #0
 8003052:	2300      	movs	r3, #0
 8003054:	e7f4      	b.n	8003040 <__aeabi_d2f+0x2c>
 8003056:	433d      	orrs	r5, r7
 8003058:	d0f0      	beq.n	800303c <__aeabi_d2f+0x28>
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	03db      	lsls	r3, r3, #15
 800305e:	20ff      	movs	r0, #255	@ 0xff
 8003060:	433b      	orrs	r3, r7
 8003062:	e7ed      	b.n	8003040 <__aeabi_d2f+0x2c>
 8003064:	2c00      	cmp	r4, #0
 8003066:	dd14      	ble.n	8003092 <__aeabi_d2f+0x7e>
 8003068:	9b00      	ldr	r3, [sp, #0]
 800306a:	00ff      	lsls	r7, r7, #3
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	4183      	sbcs	r3, r0
 8003072:	0f69      	lsrs	r1, r5, #29
 8003074:	433b      	orrs	r3, r7
 8003076:	430b      	orrs	r3, r1
 8003078:	0759      	lsls	r1, r3, #29
 800307a:	d041      	beq.n	8003100 <__aeabi_d2f+0xec>
 800307c:	210f      	movs	r1, #15
 800307e:	4019      	ands	r1, r3
 8003080:	2904      	cmp	r1, #4
 8003082:	d028      	beq.n	80030d6 <__aeabi_d2f+0xc2>
 8003084:	3304      	adds	r3, #4
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	d525      	bpl.n	80030d6 <__aeabi_d2f+0xc2>
 800308a:	3401      	adds	r4, #1
 800308c:	2300      	movs	r3, #0
 800308e:	b2e0      	uxtb	r0, r4
 8003090:	e7d6      	b.n	8003040 <__aeabi_d2f+0x2c>
 8003092:	0021      	movs	r1, r4
 8003094:	3117      	adds	r1, #23
 8003096:	dbdb      	blt.n	8003050 <__aeabi_d2f+0x3c>
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	201e      	movs	r0, #30
 800309c:	0409      	lsls	r1, r1, #16
 800309e:	4339      	orrs	r1, r7
 80030a0:	1b00      	subs	r0, r0, r4
 80030a2:	281f      	cmp	r0, #31
 80030a4:	dd1b      	ble.n	80030de <__aeabi_d2f+0xca>
 80030a6:	2602      	movs	r6, #2
 80030a8:	4276      	negs	r6, r6
 80030aa:	1b34      	subs	r4, r6, r4
 80030ac:	000e      	movs	r6, r1
 80030ae:	40e6      	lsrs	r6, r4
 80030b0:	0034      	movs	r4, r6
 80030b2:	2820      	cmp	r0, #32
 80030b4:	d004      	beq.n	80030c0 <__aeabi_d2f+0xac>
 80030b6:	4817      	ldr	r0, [pc, #92]	@ (8003114 <__aeabi_d2f+0x100>)
 80030b8:	4684      	mov	ip, r0
 80030ba:	4463      	add	r3, ip
 80030bc:	4099      	lsls	r1, r3
 80030be:	430d      	orrs	r5, r1
 80030c0:	002b      	movs	r3, r5
 80030c2:	1e59      	subs	r1, r3, #1
 80030c4:	418b      	sbcs	r3, r1
 80030c6:	4323      	orrs	r3, r4
 80030c8:	0759      	lsls	r1, r3, #29
 80030ca:	d015      	beq.n	80030f8 <__aeabi_d2f+0xe4>
 80030cc:	210f      	movs	r1, #15
 80030ce:	2400      	movs	r4, #0
 80030d0:	4019      	ands	r1, r3
 80030d2:	2904      	cmp	r1, #4
 80030d4:	d117      	bne.n	8003106 <__aeabi_d2f+0xf2>
 80030d6:	019b      	lsls	r3, r3, #6
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	b2e0      	uxtb	r0, r4
 80030dc:	e7b0      	b.n	8003040 <__aeabi_d2f+0x2c>
 80030de:	4c0e      	ldr	r4, [pc, #56]	@ (8003118 <__aeabi_d2f+0x104>)
 80030e0:	191c      	adds	r4, r3, r4
 80030e2:	002b      	movs	r3, r5
 80030e4:	40a5      	lsls	r5, r4
 80030e6:	40c3      	lsrs	r3, r0
 80030e8:	40a1      	lsls	r1, r4
 80030ea:	1e68      	subs	r0, r5, #1
 80030ec:	4185      	sbcs	r5, r0
 80030ee:	4329      	orrs	r1, r5
 80030f0:	430b      	orrs	r3, r1
 80030f2:	2400      	movs	r4, #0
 80030f4:	0759      	lsls	r1, r3, #29
 80030f6:	d1c1      	bne.n	800307c <__aeabi_d2f+0x68>
 80030f8:	019b      	lsls	r3, r3, #6
 80030fa:	2000      	movs	r0, #0
 80030fc:	0a5b      	lsrs	r3, r3, #9
 80030fe:	e79f      	b.n	8003040 <__aeabi_d2f+0x2c>
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	b2e0      	uxtb	r0, r4
 8003104:	e79c      	b.n	8003040 <__aeabi_d2f+0x2c>
 8003106:	3304      	adds	r3, #4
 8003108:	e7e5      	b.n	80030d6 <__aeabi_d2f+0xc2>
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	000007fe 	.word	0x000007fe
 8003110:	fffffc80 	.word	0xfffffc80
 8003114:	fffffca2 	.word	0xfffffca2
 8003118:	fffffc82 	.word	0xfffffc82

0800311c <__clzsi2>:
 800311c:	211c      	movs	r1, #28
 800311e:	2301      	movs	r3, #1
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	4298      	cmp	r0, r3
 8003124:	d301      	bcc.n	800312a <__clzsi2+0xe>
 8003126:	0c00      	lsrs	r0, r0, #16
 8003128:	3910      	subs	r1, #16
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	4298      	cmp	r0, r3
 800312e:	d301      	bcc.n	8003134 <__clzsi2+0x18>
 8003130:	0a00      	lsrs	r0, r0, #8
 8003132:	3908      	subs	r1, #8
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	4298      	cmp	r0, r3
 8003138:	d301      	bcc.n	800313e <__clzsi2+0x22>
 800313a:	0900      	lsrs	r0, r0, #4
 800313c:	3904      	subs	r1, #4
 800313e:	a202      	add	r2, pc, #8	@ (adr r2, 8003148 <__clzsi2+0x2c>)
 8003140:	5c10      	ldrb	r0, [r2, r0]
 8003142:	1840      	adds	r0, r0, r1
 8003144:	4770      	bx	lr
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	02020304 	.word	0x02020304
 800314c:	01010101 	.word	0x01010101
	...

08003158 <__clzdi2>:
 8003158:	b510      	push	{r4, lr}
 800315a:	2900      	cmp	r1, #0
 800315c:	d103      	bne.n	8003166 <__clzdi2+0xe>
 800315e:	f7ff ffdd 	bl	800311c <__clzsi2>
 8003162:	3020      	adds	r0, #32
 8003164:	e002      	b.n	800316c <__clzdi2+0x14>
 8003166:	0008      	movs	r0, r1
 8003168:	f7ff ffd8 	bl	800311c <__clzsi2>
 800316c:	bd10      	pop	{r4, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)

08003170 <writeRegister8>:
/**
 * @brief Write an 8-bit value to the specified register.
 * @param addr Register address.
 * @param data Data to write.
 */
void writeRegister8(uint8_t addr, uint8_t data) {
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	1dbb      	adds	r3, r7, #6
 800317e:	1c0a      	adds	r2, r1, #0
 8003180:	701a      	strb	r2, [r3, #0]
    addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	1dfa      	adds	r2, r7, #7
 8003186:	7812      	ldrb	r2, [r2, #0]
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	4249      	negs	r1, r1
 800318c:	430a      	orrs	r2, r1
 800318e:	701a      	strb	r2, [r3, #0]

    uint8_t buffer[2] = {addr, data};
 8003190:	240c      	movs	r4, #12
 8003192:	193b      	adds	r3, r7, r4
 8003194:	1dfa      	adds	r2, r7, #7
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	193b      	adds	r3, r7, r4
 800319c:	1dba      	adds	r2, r7, #6
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	705a      	strb	r2, [r3, #1]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	0059      	lsls	r1, r3, #1
 80031a6:	23a0      	movs	r3, #160	@ 0xa0
 80031a8:	05db      	lsls	r3, r3, #23
 80031aa:	2200      	movs	r2, #0
 80031ac:	0018      	movs	r0, r3
 80031ae:	f001 fa23 	bl	80045f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, SPI_DELAY);
 80031b2:	1939      	adds	r1, r7, r4
 80031b4:	4808      	ldr	r0, [pc, #32]	@ (80031d8 <writeRegister8+0x68>)
 80031b6:	23ff      	movs	r3, #255	@ 0xff
 80031b8:	2202      	movs	r2, #2
 80031ba:	f002 f997 	bl	80054ec <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin, GPIO_PIN_SET);
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	0059      	lsls	r1, r3, #1
 80031c2:	23a0      	movs	r3, #160	@ 0xa0
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	2201      	movs	r2, #1
 80031c8:	0018      	movs	r0, r3
 80031ca:	f001 fa15 	bl	80045f8 <HAL_GPIO_WritePin>
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b005      	add	sp, #20
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	20000208 	.word	0x20000208

080031dc <readRegisterN>:
 * @brief Read multiple bytes from the specified register.
 * @param addr Register address.
 * @param buffer Buffer to store the read data.
 * @param n Number of bytes to read.
 */
void readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6039      	str	r1, [r7, #0]
 80031e4:	0011      	movs	r1, r2
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	1c02      	adds	r2, r0, #0
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	1dbb      	adds	r3, r7, #6
 80031ee:	1c0a      	adds	r2, r1, #0
 80031f0:	701a      	strb	r2, [r3, #0]
    addr &= 0x7F; // MSB=0 for read, make sure top bit is not set
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	227f      	movs	r2, #127	@ 0x7f
 80031f8:	4013      	ands	r3, r2
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	0059      	lsls	r1, r3, #1
 8003204:	23a0      	movs	r3, #160	@ 0xa0
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	2200      	movs	r2, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f001 f9f4 	bl	80045f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, SPI_DELAY);
 8003210:	1df9      	adds	r1, r7, #7
 8003212:	480c      	ldr	r0, [pc, #48]	@ (8003244 <readRegisterN+0x68>)
 8003214:	23ff      	movs	r3, #255	@ 0xff
 8003216:	2201      	movs	r2, #1
 8003218:	f002 f968 	bl	80054ec <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, n, SPI_DELAY);
 800321c:	1dbb      	adds	r3, r7, #6
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	4807      	ldr	r0, [pc, #28]	@ (8003244 <readRegisterN+0x68>)
 8003226:	23ff      	movs	r3, #255	@ 0xff
 8003228:	f002 fabe 	bl	80057a8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	0059      	lsls	r1, r3, #1
 8003230:	23a0      	movs	r3, #160	@ 0xa0
 8003232:	05db      	lsls	r3, r3, #23
 8003234:	2201      	movs	r2, #1
 8003236:	0018      	movs	r0, r3
 8003238:	f001 f9de 	bl	80045f8 <HAL_GPIO_WritePin>
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000208 	.word	0x20000208

08003248 <readRegister8>:
/**
 * @brief Read an 8-bit value from the specified register.
 * @param addr Register address.
 * @return 8-bit value read from the register.
 */
uint8_t readRegister8(uint8_t addr) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	0002      	movs	r2, r0
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	701a      	strb	r2, [r3, #0]
    uint8_t ret = 0;
 8003254:	240f      	movs	r4, #15
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    readRegisterN(addr, &ret, 1);
 800325c:	1939      	adds	r1, r7, r4
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff ffb9 	bl	80031dc <readRegisterN>
    return ret;
 800326a:	193b      	adds	r3, r7, r4
 800326c:	781b      	ldrb	r3, [r3, #0]
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b005      	add	sp, #20
 8003274:	bd90      	pop	{r4, r7, pc}

08003276 <readRegister16>:
/**
 * @brief Read a 16-bit value from the specified register.
 * @param addr Register address.
 * @return 16-bit value read from the register.
 */
uint16_t readRegister16(uint8_t addr) {
 8003276:	b590      	push	{r4, r7, lr}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	0002      	movs	r2, r0
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2] = {0, 0};
 8003282:	240c      	movs	r4, #12
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
    readRegisterN(addr, buffer, 2);
 800328a:	1939      	adds	r1, r7, r4
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2202      	movs	r2, #2
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff ffa2 	bl	80031dc <readRegisterN>

    uint16_t ret = (uint16_t)buffer[0]; // Cast to uint16_t before left shift
 8003298:	0021      	movs	r1, r4
 800329a:	187b      	adds	r3, r7, r1
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	200e      	movs	r0, #14
 80032a0:	183b      	adds	r3, r7, r0
 80032a2:	801a      	strh	r2, [r3, #0]
    ret <<= 8;
 80032a4:	183b      	adds	r3, r7, r0
 80032a6:	183a      	adds	r2, r7, r0
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	0212      	lsls	r2, r2, #8
 80032ac:	801a      	strh	r2, [r3, #0]
    ret |= buffer[1];
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	0019      	movs	r1, r3
 80032b4:	183b      	adds	r3, r7, r0
 80032b6:	183a      	adds	r2, r7, r0
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	801a      	strh	r2, [r3, #0]

    return ret;
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	881b      	ldrh	r3, [r3, #0]
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b005      	add	sp, #20
 80032c8:	bd90      	pop	{r4, r7, pc}

080032ca <setWires>:
}
/**
 * @brief Set the number of wires for the RTD configuration.
 * @param wires Number of wires configuration (2, 3, or 4-wire).
 */
void setWires(max31865_numwires_t wires) {
 80032ca:	b5b0      	push	{r4, r5, r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	0002      	movs	r2, r0
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	701a      	strb	r2, [r3, #0]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80032d6:	250f      	movs	r5, #15
 80032d8:	197c      	adds	r4, r7, r5
 80032da:	2000      	movs	r0, #0
 80032dc:	f7ff ffb4 	bl	8003248 <readRegister8>
 80032e0:	0003      	movs	r3, r0
 80032e2:	7023      	strb	r3, [r4, #0]
    if (wires == MAX31865_3WIRE) {
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <setWires+0x30>
        t |= MAX31865_CONFIG_3WIRE;
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	197a      	adds	r2, r7, r5
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	2110      	movs	r1, #16
 80032f4:	430a      	orrs	r2, r1
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e006      	b.n	8003308 <setWires+0x3e>
    } else {
        t &= ~MAX31865_CONFIG_3WIRE;
 80032fa:	220f      	movs	r2, #15
 80032fc:	18bb      	adds	r3, r7, r2
 80032fe:	18ba      	adds	r2, r7, r2
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	2110      	movs	r1, #16
 8003304:	438a      	bics	r2, r1
 8003306:	701a      	strb	r2, [r3, #0]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 8003308:	230f      	movs	r3, #15
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	0019      	movs	r1, r3
 8003310:	2000      	movs	r0, #0
 8003312:	f7ff ff2d 	bl	8003170 <writeRegister8>
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bdb0      	pop	{r4, r5, r7, pc}

0800331e <enableBias>:
/**
 * @brief Enable or disable the bias voltage on the RTD sensor.
 * @param b True to enable, false to disable.
 */
void enableBias(bool b) {
 800331e:	b5b0      	push	{r4, r5, r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	0002      	movs	r2, r0
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	701a      	strb	r2, [r3, #0]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 800332a:	250f      	movs	r5, #15
 800332c:	197c      	adds	r4, r7, r5
 800332e:	2000      	movs	r0, #0
 8003330:	f7ff ff8a 	bl	8003248 <readRegister8>
 8003334:	0003      	movs	r3, r0
 8003336:	7023      	strb	r3, [r4, #0]
    if (b) {
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <enableBias+0x32>
        t |= MAX31865_CONFIG_BIAS; // Enable bias
 8003340:	197b      	adds	r3, r7, r5
 8003342:	197a      	adds	r2, r7, r5
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	2180      	movs	r1, #128	@ 0x80
 8003348:	4249      	negs	r1, r1
 800334a:	430a      	orrs	r2, r1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e006      	b.n	800335e <enableBias+0x40>
    } else {
        t &= ~MAX31865_CONFIG_BIAS; // Disable bias
 8003350:	220f      	movs	r2, #15
 8003352:	18bb      	adds	r3, r7, r2
 8003354:	18ba      	adds	r2, r7, r2
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	217f      	movs	r1, #127	@ 0x7f
 800335a:	400a      	ands	r2, r1
 800335c:	701a      	strb	r2, [r3, #0]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 800335e:	230f      	movs	r3, #15
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	0019      	movs	r1, r3
 8003366:	2000      	movs	r0, #0
 8003368:	f7ff ff02 	bl	8003170 <writeRegister8>
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bdb0      	pop	{r4, r5, r7, pc}

08003374 <autoConvert>:

/**
 * @brief Enable or disable automatic conversion mode.
 * @param b True to enable, false to disable.
 */
void autoConvert(bool b) {
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	0002      	movs	r2, r0
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	701a      	strb	r2, [r3, #0]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8003380:	250f      	movs	r5, #15
 8003382:	197c      	adds	r4, r7, r5
 8003384:	2000      	movs	r0, #0
 8003386:	f7ff ff5f 	bl	8003248 <readRegister8>
 800338a:	0003      	movs	r3, r0
 800338c:	7023      	strb	r3, [r4, #0]
    if (b) {
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <autoConvert+0x30>
        t |= MAX31865_CONFIG_MODEAUTO; // Enable auto convert
 8003396:	197b      	adds	r3, r7, r5
 8003398:	197a      	adds	r2, r7, r5
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	2140      	movs	r1, #64	@ 0x40
 800339e:	430a      	orrs	r2, r1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e006      	b.n	80033b2 <autoConvert+0x3e>
    } else {
        t &= ~MAX31865_CONFIG_MODEAUTO; // Disable auto convert
 80033a4:	220f      	movs	r2, #15
 80033a6:	18bb      	adds	r3, r7, r2
 80033a8:	18ba      	adds	r2, r7, r2
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	2140      	movs	r1, #64	@ 0x40
 80033ae:	438a      	bics	r2, r1
 80033b0:	701a      	strb	r2, [r3, #0]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 80033b2:	230f      	movs	r3, #15
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	0019      	movs	r1, r3
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7ff fed8 	bl	8003170 <writeRegister8>
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bdb0      	pop	{r4, r5, r7, pc}

080033c8 <setThresholds>:
/**
 * @brief Set the high and low fault thresholds.
 * @param lower Lower threshold.
 * @param upper Upper threshold.
 */
void setThresholds(uint16_t lower, uint16_t upper) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	0002      	movs	r2, r0
 80033d0:	1dbb      	adds	r3, r7, #6
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	1c0a      	adds	r2, r1, #0
 80033d8:	801a      	strh	r2, [r3, #0]
    writeRegister8(MAX31865_LFAULTLSB_REG, lower & 0xFF);
 80033da:	1dbb      	adds	r3, r7, #6
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	0019      	movs	r1, r3
 80033e2:	2006      	movs	r0, #6
 80033e4:	f7ff fec4 	bl	8003170 <writeRegister8>
    writeRegister8(MAX31865_LFAULTMSB_REG, lower >> 8);
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	0019      	movs	r1, r3
 80033f4:	2005      	movs	r0, #5
 80033f6:	f7ff febb 	bl	8003170 <writeRegister8>
    writeRegister8(MAX31865_HFAULTLSB_REG, upper & 0xFF);
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	0019      	movs	r1, r3
 8003402:	2004      	movs	r0, #4
 8003404:	f7ff feb4 	bl	8003170 <writeRegister8>
    writeRegister8(MAX31865_HFAULTMSB_REG, upper >> 8);
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	b29b      	uxth	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	0019      	movs	r1, r3
 8003414:	2003      	movs	r0, #3
 8003416:	f7ff feab 	bl	8003170 <writeRegister8>
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <begin>:
/**
 * @brief Initialize the MAX31865 device.
 * @param wires Number of wires configuration (2, 3, or 4-wire).
 * @return True if initialization is successful, otherwise false.
 */
bool begin(max31865_numwires_t wires) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	0002      	movs	r2, r0
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	701a      	strb	r2, [r3, #0]
    if (HAL_SPI_Init(&hspi1) == HAL_OK) {
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <begin+0x58>)
 8003432:	0018      	movs	r0, r3
 8003434:	f001 ffc6 	bl	80053c4 <HAL_SPI_Init>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d103      	bne.n	8003444 <begin+0x20>
        initialized = true;
 800343c:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <begin+0x5c>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <begin+0x26>
    } else {
        initialized = false;
 8003444:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <begin+0x5c>)
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
    }

    setWires(wires);
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff ff3b 	bl	80032ca <setWires>
    enableBias(false);
 8003454:	2000      	movs	r0, #0
 8003456:	f7ff ff62 	bl	800331e <enableBias>
    autoConvert(false);
 800345a:	2000      	movs	r0, #0
 800345c:	f7ff ff8a 	bl	8003374 <autoConvert>
    setThresholds(0, 0xFFFF);
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <begin+0x60>)
 8003462:	0019      	movs	r1, r3
 8003464:	2000      	movs	r0, #0
 8003466:	f7ff ffaf 	bl	80033c8 <setThresholds>
    clearFault();
 800346a:	f000 f9ea 	bl	8003842 <clearFault>

    return initialized;
 800346e:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <begin+0x5c>)
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b002      	add	sp, #8
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	20000208 	.word	0x20000208
 8003480:	20000204 	.word	0x20000204
 8003484:	0000ffff 	.word	0x0000ffff

08003488 <readRTD>:

/**
 * @brief Read the RTD resistance value.
 * @return Raw RTD resistance value.
 */
uint16_t readRTD(void) {
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
    clearFault();
 800348e:	f000 f9d8 	bl	8003842 <clearFault>
    enableBias(true);
 8003492:	2001      	movs	r0, #1
 8003494:	f7ff ff43 	bl	800331e <enableBias>
    HAL_Delay(10);
 8003498:	200a      	movs	r0, #10
 800349a:	f000 fe5f 	bl	800415c <HAL_Delay>

    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 800349e:	1dfc      	adds	r4, r7, #7
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7ff fed1 	bl	8003248 <readRegister8>
 80034a6:	0003      	movs	r3, r0
 80034a8:	7023      	strb	r3, [r4, #0]
    t |= MAX31865_CONFIG_1SHOT;
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	1dfa      	adds	r2, r7, #7
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	2120      	movs	r1, #32
 80034b2:	430a      	orrs	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
    writeRegister8(MAX31865_CONFIG_REG, t);
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	0019      	movs	r1, r3
 80034bc:	2000      	movs	r0, #0
 80034be:	f7ff fe57 	bl	8003170 <writeRegister8>
    HAL_Delay(65);
 80034c2:	2041      	movs	r0, #65	@ 0x41
 80034c4:	f000 fe4a 	bl	800415c <HAL_Delay>

    uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fed3 	bl	8003276 <readRegister16>
 80034d0:	0003      	movs	r3, r0
 80034d2:	8023      	strh	r3, [r4, #0]
    enableBias(false); // Disable bias current to reduce self-heating.
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7ff ff22 	bl	800331e <enableBias>

    rtd >>= 1; // Remove fault bit
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	1d3a      	adds	r2, r7, #4
 80034de:	8812      	ldrh	r2, [r2, #0]
 80034e0:	0852      	lsrs	r2, r2, #1
 80034e2:	801a      	strh	r2, [r3, #0]

    return rtd;
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	881b      	ldrh	r3, [r3, #0]
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b003      	add	sp, #12
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <temperature>:
 * @brief Calculate the temperature from the RTD resistance.
 * @param RTDnominal Nominal resistance of the RTD at 0°C.
 * @param refResistor Reference resistance value.
 * @return Calculated temperature.
 */
float temperature(float RTDnominal, float refResistor) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    return calculateTemperature(readRTD(), RTDnominal, refResistor);
 80034fa:	f7ff ffc5 	bl	8003488 <readRTD>
 80034fe:	0003      	movs	r3, r0
 8003500:	0018      	movs	r0, r3
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1c19      	adds	r1, r3, #0
 8003508:	f000 f806 	bl	8003518 <calculateTemperature>
 800350c:	1c03      	adds	r3, r0, #0
}
 800350e:	1c18      	adds	r0, r3, #0
 8003510:	46bd      	mov	sp, r7
 8003512:	b002      	add	sp, #8
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <calculateTemperature>:
 * @param RTDraw Raw RTD resistance value.
 * @param RTDnominal Nominal resistance of the RTD at 0°C.
 * @param refResistor Reference resistance value.
 * @return Calculated temperature.
 */
float calculateTemperature(uint16_t RTDraw, float RTDnominal, float refResistor) {
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af00      	add	r7, sp, #0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	210e      	movs	r1, #14
 8003524:	187b      	adds	r3, r7, r1
 8003526:	1c02      	adds	r2, r0, #0
 8003528:	801a      	strh	r2, [r3, #0]
    float Z1, Z2, Z3, Z4, Rt, temp;

    Rt = RTDraw;
 800352a:	187b      	adds	r3, r7, r1
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	0018      	movs	r0, r3
 8003530:	f7fd fe2a 	bl	8001188 <__aeabi_ui2f>
 8003534:	1c03      	adds	r3, r0, #0
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt /= 32768;
 8003538:	218e      	movs	r1, #142	@ 0x8e
 800353a:	05c9      	lsls	r1, r1, #23
 800353c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800353e:	f7fd faff 	bl	8000b40 <__aeabi_fdiv>
 8003542:	1c03      	adds	r3, r0, #0
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= refResistor;
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800354a:	f7fd fcdf 	bl	8000f0c <__aeabi_fmul>
 800354e:	1c03      	adds	r3, r0, #0
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c

    Z1 = -RTD_A;
 8003552:	4b81      	ldr	r3, [pc, #516]	@ (8003758 <calculateTemperature+0x240>)
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
    Z2 = RTD_A * RTD_A - (4 * RTD_B);
 8003556:	4b81      	ldr	r3, [pc, #516]	@ (800375c <calculateTemperature+0x244>)
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
    Z3 = (4 * RTD_B) / RTDnominal;
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	f7ff fd12 	bl	8002f84 <__aeabi_f2d>
 8003560:	0002      	movs	r2, r0
 8003562:	000b      	movs	r3, r1
 8003564:	487e      	ldr	r0, [pc, #504]	@ (8003760 <calculateTemperature+0x248>)
 8003566:	497f      	ldr	r1, [pc, #508]	@ (8003764 <calculateTemperature+0x24c>)
 8003568:	f7fe f9b4 	bl	80018d4 <__aeabi_ddiv>
 800356c:	0002      	movs	r2, r0
 800356e:	000b      	movs	r3, r1
 8003570:	0010      	movs	r0, r2
 8003572:	0019      	movs	r1, r3
 8003574:	f7ff fd4e 	bl	8003014 <__aeabi_d2f>
 8003578:	1c03      	adds	r3, r0, #0
 800357a:	623b      	str	r3, [r7, #32]
    Z4 = 2 * RTD_B;
 800357c:	4b7a      	ldr	r3, [pc, #488]	@ (8003768 <calculateTemperature+0x250>)
 800357e:	61fb      	str	r3, [r7, #28]

    temp = Z2 + (Z3 * Rt);
 8003580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003582:	6a38      	ldr	r0, [r7, #32]
 8003584:	f7fd fcc2 	bl	8000f0c <__aeabi_fmul>
 8003588:	1c03      	adds	r3, r0, #0
 800358a:	1c19      	adds	r1, r3, #0
 800358c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800358e:	f7fd f94d 	bl	800082c <__aeabi_fadd>
 8003592:	1c03      	adds	r3, r0, #0
 8003594:	61bb      	str	r3, [r7, #24]
    temp = (sqrt(temp) + Z1) / Z4;
 8003596:	69b8      	ldr	r0, [r7, #24]
 8003598:	f7ff fcf4 	bl	8002f84 <__aeabi_f2d>
 800359c:	0002      	movs	r2, r0
 800359e:	000b      	movs	r3, r1
 80035a0:	0010      	movs	r0, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	f007 ff28 	bl	800b3f8 <sqrt>
 80035a8:	0004      	movs	r4, r0
 80035aa:	000d      	movs	r5, r1
 80035ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ae:	f7ff fce9 	bl	8002f84 <__aeabi_f2d>
 80035b2:	0002      	movs	r2, r0
 80035b4:	000b      	movs	r3, r1
 80035b6:	0020      	movs	r0, r4
 80035b8:	0029      	movs	r1, r5
 80035ba:	f7fd fe27 	bl	800120c <__aeabi_dadd>
 80035be:	0002      	movs	r2, r0
 80035c0:	000b      	movs	r3, r1
 80035c2:	0014      	movs	r4, r2
 80035c4:	001d      	movs	r5, r3
 80035c6:	69f8      	ldr	r0, [r7, #28]
 80035c8:	f7ff fcdc 	bl	8002f84 <__aeabi_f2d>
 80035cc:	0002      	movs	r2, r0
 80035ce:	000b      	movs	r3, r1
 80035d0:	0020      	movs	r0, r4
 80035d2:	0029      	movs	r1, r5
 80035d4:	f7fe f97e 	bl	80018d4 <__aeabi_ddiv>
 80035d8:	0002      	movs	r2, r0
 80035da:	000b      	movs	r3, r1
 80035dc:	0010      	movs	r0, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	f7ff fd18 	bl	8003014 <__aeabi_d2f>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	61bb      	str	r3, [r7, #24]

    if (temp >= 0) return temp;
 80035e8:	2100      	movs	r1, #0
 80035ea:	69b8      	ldr	r0, [r7, #24]
 80035ec:	f7fc ff8c 	bl	8000508 <__aeabi_fcmpge>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <calculateTemperature+0xe0>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	e0aa      	b.n	800374e <calculateTemperature+0x236>

    Rt /= RTDnominal;
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035fc:	f7fd faa0 	bl	8000b40 <__aeabi_fdiv>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= 100; // Normalize to 100 ohm
 8003604:	4959      	ldr	r1, [pc, #356]	@ (800376c <calculateTemperature+0x254>)
 8003606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003608:	f7fd fc80 	bl	8000f0c <__aeabi_fmul>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float rpoly = Rt;
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	617b      	str	r3, [r7, #20]

    temp = -242.02;
 8003614:	4b56      	ldr	r3, [pc, #344]	@ (8003770 <calculateTemperature+0x258>)
 8003616:	61bb      	str	r3, [r7, #24]
    temp += 2.2228 * rpoly;
 8003618:	69b8      	ldr	r0, [r7, #24]
 800361a:	f7ff fcb3 	bl	8002f84 <__aeabi_f2d>
 800361e:	0004      	movs	r4, r0
 8003620:	000d      	movs	r5, r1
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff fcae 	bl	8002f84 <__aeabi_f2d>
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <calculateTemperature+0x25c>)
 800362a:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <calculateTemperature+0x260>)
 800362c:	f7fe fd96 	bl	800215c <__aeabi_dmul>
 8003630:	0002      	movs	r2, r0
 8003632:	000b      	movs	r3, r1
 8003634:	0020      	movs	r0, r4
 8003636:	0029      	movs	r1, r5
 8003638:	f7fd fde8 	bl	800120c <__aeabi_dadd>
 800363c:	0002      	movs	r2, r0
 800363e:	000b      	movs	r3, r1
 8003640:	0010      	movs	r0, r2
 8003642:	0019      	movs	r1, r3
 8003644:	f7ff fce6 	bl	8003014 <__aeabi_d2f>
 8003648:	1c03      	adds	r3, r0, #0
 800364a:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // Square
 800364c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364e:	6978      	ldr	r0, [r7, #20]
 8003650:	f7fd fc5c 	bl	8000f0c <__aeabi_fmul>
 8003654:	1c03      	adds	r3, r0, #0
 8003656:	617b      	str	r3, [r7, #20]
    temp += 2.5859e-3 * rpoly;
 8003658:	69b8      	ldr	r0, [r7, #24]
 800365a:	f7ff fc93 	bl	8002f84 <__aeabi_f2d>
 800365e:	0004      	movs	r4, r0
 8003660:	000d      	movs	r5, r1
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff fc8e 	bl	8002f84 <__aeabi_f2d>
 8003668:	4a44      	ldr	r2, [pc, #272]	@ (800377c <calculateTemperature+0x264>)
 800366a:	4b45      	ldr	r3, [pc, #276]	@ (8003780 <calculateTemperature+0x268>)
 800366c:	f7fe fd76 	bl	800215c <__aeabi_dmul>
 8003670:	0002      	movs	r2, r0
 8003672:	000b      	movs	r3, r1
 8003674:	0020      	movs	r0, r4
 8003676:	0029      	movs	r1, r5
 8003678:	f7fd fdc8 	bl	800120c <__aeabi_dadd>
 800367c:	0002      	movs	r2, r0
 800367e:	000b      	movs	r3, r1
 8003680:	0010      	movs	r0, r2
 8003682:	0019      	movs	r1, r3
 8003684:	f7ff fcc6 	bl	8003014 <__aeabi_d2f>
 8003688:	1c03      	adds	r3, r0, #0
 800368a:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^3
 800368c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7fd fc3c 	bl	8000f0c <__aeabi_fmul>
 8003694:	1c03      	adds	r3, r0, #0
 8003696:	617b      	str	r3, [r7, #20]
    temp -= 4.8260e-6 * rpoly;
 8003698:	69b8      	ldr	r0, [r7, #24]
 800369a:	f7ff fc73 	bl	8002f84 <__aeabi_f2d>
 800369e:	0004      	movs	r4, r0
 80036a0:	000d      	movs	r5, r1
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff fc6e 	bl	8002f84 <__aeabi_f2d>
 80036a8:	4a36      	ldr	r2, [pc, #216]	@ (8003784 <calculateTemperature+0x26c>)
 80036aa:	4b37      	ldr	r3, [pc, #220]	@ (8003788 <calculateTemperature+0x270>)
 80036ac:	f7fe fd56 	bl	800215c <__aeabi_dmul>
 80036b0:	0002      	movs	r2, r0
 80036b2:	000b      	movs	r3, r1
 80036b4:	0020      	movs	r0, r4
 80036b6:	0029      	movs	r1, r5
 80036b8:	f7ff f818 	bl	80026ec <__aeabi_dsub>
 80036bc:	0002      	movs	r2, r0
 80036be:	000b      	movs	r3, r1
 80036c0:	0010      	movs	r0, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	f7ff fca6 	bl	8003014 <__aeabi_d2f>
 80036c8:	1c03      	adds	r3, r0, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^4
 80036cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ce:	6978      	ldr	r0, [r7, #20]
 80036d0:	f7fd fc1c 	bl	8000f0c <__aeabi_fmul>
 80036d4:	1c03      	adds	r3, r0, #0
 80036d6:	617b      	str	r3, [r7, #20]
    temp -= 2.8183e-8 * rpoly;
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f7ff fc53 	bl	8002f84 <__aeabi_f2d>
 80036de:	0004      	movs	r4, r0
 80036e0:	000d      	movs	r5, r1
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff fc4e 	bl	8002f84 <__aeabi_f2d>
 80036e8:	4a28      	ldr	r2, [pc, #160]	@ (800378c <calculateTemperature+0x274>)
 80036ea:	4b29      	ldr	r3, [pc, #164]	@ (8003790 <calculateTemperature+0x278>)
 80036ec:	f7fe fd36 	bl	800215c <__aeabi_dmul>
 80036f0:	0002      	movs	r2, r0
 80036f2:	000b      	movs	r3, r1
 80036f4:	0020      	movs	r0, r4
 80036f6:	0029      	movs	r1, r5
 80036f8:	f7fe fff8 	bl	80026ec <__aeabi_dsub>
 80036fc:	0002      	movs	r2, r0
 80036fe:	000b      	movs	r3, r1
 8003700:	0010      	movs	r0, r2
 8003702:	0019      	movs	r1, r3
 8003704:	f7ff fc86 	bl	8003014 <__aeabi_d2f>
 8003708:	1c03      	adds	r3, r0, #0
 800370a:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^5
 800370c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7fd fbfc 	bl	8000f0c <__aeabi_fmul>
 8003714:	1c03      	adds	r3, r0, #0
 8003716:	617b      	str	r3, [r7, #20]
    temp += 1.5243e-10 * rpoly;
 8003718:	69b8      	ldr	r0, [r7, #24]
 800371a:	f7ff fc33 	bl	8002f84 <__aeabi_f2d>
 800371e:	0004      	movs	r4, r0
 8003720:	000d      	movs	r5, r1
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff fc2e 	bl	8002f84 <__aeabi_f2d>
 8003728:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <calculateTemperature+0x27c>)
 800372a:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <calculateTemperature+0x280>)
 800372c:	f7fe fd16 	bl	800215c <__aeabi_dmul>
 8003730:	0002      	movs	r2, r0
 8003732:	000b      	movs	r3, r1
 8003734:	0020      	movs	r0, r4
 8003736:	0029      	movs	r1, r5
 8003738:	f7fd fd68 	bl	800120c <__aeabi_dadd>
 800373c:	0002      	movs	r2, r0
 800373e:	000b      	movs	r3, r1
 8003740:	0010      	movs	r0, r2
 8003742:	0019      	movs	r1, r3
 8003744:	f7ff fc66 	bl	8003014 <__aeabi_d2f>
 8003748:	1c03      	adds	r3, r0, #0
 800374a:	61bb      	str	r3, [r7, #24]

    return temp;
 800374c:	69bb      	ldr	r3, [r7, #24]
}
 800374e:	1c18      	adds	r0, r3, #0
 8003750:	46bd      	mov	sp, r7
 8003752:	b00c      	add	sp, #48	@ 0x30
 8003754:	bdb0      	pop	{r4, r5, r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	bb801132 	.word	0xbb801132
 800375c:	37938317 	.word	0x37938317
 8003760:	ee19ce88 	.word	0xee19ce88
 8003764:	bec360af 	.word	0xbec360af
 8003768:	b59b057f 	.word	0xb59b057f
 800376c:	42c80000 	.word	0x42c80000
 8003770:	c372051f 	.word	0xc372051f
 8003774:	5dcc63f1 	.word	0x5dcc63f1
 8003778:	4001c84b 	.word	0x4001c84b
 800377c:	7dc882bb 	.word	0x7dc882bb
 8003780:	3f652f06 	.word	0x3f652f06
 8003784:	c766c293 	.word	0xc766c293
 8003788:	3ed43de0 	.word	0x3ed43de0
 800378c:	513156ce 	.word	0x513156ce
 8003790:	3e5e42e2 	.word	0x3e5e42e2
 8003794:	61e4fa3e 	.word	0x61e4fa3e
 8003798:	3de4f327 	.word	0x3de4f327

0800379c <readFault>:
/**
 * @brief Read fault status from the MAX31865.
 * @param fault_cycle Fault detection cycle mode.
 * @return Fault status register value.
 */
uint8_t readFault(max31865_fault_cycle_t fault_cycle) {
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	0002      	movs	r2, r0
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	701a      	strb	r2, [r3, #0]
    if (fault_cycle) {
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d040      	beq.n	8003832 <readFault+0x96>
        uint8_t cfg_reg = readRegister8(MAX31865_CONFIG_REG);
 80037b0:	250f      	movs	r5, #15
 80037b2:	197c      	adds	r4, r7, r5
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7ff fd47 	bl	8003248 <readRegister8>
 80037ba:	0003      	movs	r3, r0
 80037bc:	7023      	strb	r3, [r4, #0]
        cfg_reg &= 0x11; // Mask out wire and filter bits
 80037be:	197b      	adds	r3, r7, r5
 80037c0:	197a      	adds	r2, r7, r5
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2111      	movs	r1, #17
 80037c6:	400a      	ands	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
        switch (fault_cycle) {
 80037ca:	1dfb      	adds	r3, r7, #7
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d021      	beq.n	8003816 <readFault+0x7a>
 80037d2:	dc2d      	bgt.n	8003830 <readFault+0x94>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <readFault+0x42>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d00f      	beq.n	80037fc <readFault+0x60>
        case MAX31865_FAULT_MANUAL_FINISH:
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
            return 0;
        case MAX31865_FAULT_NONE:
        default:
            break;
 80037dc:	e028      	b.n	8003830 <readFault+0x94>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10000100));
 80037de:	230f      	movs	r3, #15
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	227c      	movs	r2, #124	@ 0x7c
 80037e6:	4252      	negs	r2, r2
 80037e8:	4313      	orrs	r3, r2
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	0019      	movs	r1, r3
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fcbe 	bl	8003170 <writeRegister8>
            HAL_Delay(1);
 80037f4:	2001      	movs	r0, #1
 80037f6:	f000 fcb1 	bl	800415c <HAL_Delay>
            break;
 80037fa:	e01a      	b.n	8003832 <readFault+0x96>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001000));
 80037fc:	230f      	movs	r3, #15
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2278      	movs	r2, #120	@ 0x78
 8003804:	4252      	negs	r2, r2
 8003806:	4313      	orrs	r3, r2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	0019      	movs	r1, r3
 800380c:	2000      	movs	r0, #0
 800380e:	f7ff fcaf 	bl	8003170 <writeRegister8>
            return 0;
 8003812:	2300      	movs	r3, #0
 8003814:	e011      	b.n	800383a <readFault+0x9e>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
 8003816:	230f      	movs	r3, #15
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2274      	movs	r2, #116	@ 0x74
 800381e:	4252      	negs	r2, r2
 8003820:	4313      	orrs	r3, r2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	0019      	movs	r1, r3
 8003826:	2000      	movs	r0, #0
 8003828:	f7ff fca2 	bl	8003170 <writeRegister8>
            return 0;
 800382c:	2300      	movs	r3, #0
 800382e:	e004      	b.n	800383a <readFault+0x9e>
            break;
 8003830:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return readRegister8(MAX31865_FAULTSTAT_REG);
 8003832:	2007      	movs	r0, #7
 8003834:	f7ff fd08 	bl	8003248 <readRegister8>
 8003838:	0003      	movs	r3, r0
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bdb0      	pop	{r4, r5, r7, pc}

08003842 <clearFault>:

/**
 * @brief Clear fault status on the MAX31865.
 */
void clearFault(void) {
 8003842:	b590      	push	{r4, r7, lr}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8003848:	1dfc      	adds	r4, r7, #7
 800384a:	2000      	movs	r0, #0
 800384c:	f7ff fcfc 	bl	8003248 <readRegister8>
 8003850:	0003      	movs	r3, r0
 8003852:	7023      	strb	r3, [r4, #0]
    t &= ~0x2C;
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	1dfa      	adds	r2, r7, #7
 8003858:	7812      	ldrb	r2, [r2, #0]
 800385a:	212c      	movs	r1, #44	@ 0x2c
 800385c:	438a      	bics	r2, r1
 800385e:	701a      	strb	r2, [r3, #0]
    t |= MAX31865_CONFIG_FAULTSTAT;
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	1dfa      	adds	r2, r7, #7
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	2102      	movs	r1, #2
 8003868:	430a      	orrs	r2, r1
 800386a:	701a      	strb	r2, [r3, #0]
    writeRegister8(MAX31865_CONFIG_REG, t);
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	0019      	movs	r1, r3
 8003872:	2000      	movs	r0, #0
 8003874:	f7ff fc7c 	bl	8003170 <writeRegister8>
}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b003      	add	sp, #12
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <port_debug_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void port_debug_print(uint8_t * data)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen((const char *)data);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f7fc fc3c 	bl	8000108 <strlen>
 8003890:	0002      	movs	r2, r0
 8003892:	210e      	movs	r1, #14
 8003894:	187b      	adds	r3, r7, r1
 8003896:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, data, len, 500);
 8003898:	23fa      	movs	r3, #250	@ 0xfa
 800389a:	005c      	lsls	r4, r3, #1
 800389c:	187b      	adds	r3, r7, r1
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4804      	ldr	r0, [pc, #16]	@ (80038b4 <port_debug_print+0x34>)
 80038a4:	0023      	movs	r3, r4
 80038a6:	f002 fc0b 	bl	80060c0 <HAL_UART_Transmit>
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b005      	add	sp, #20
 80038b0:	bd90      	pop	{r4, r7, pc}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	20000260 	.word	0x20000260

080038b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038b8:	b5b0      	push	{r4, r5, r7, lr}
 80038ba:	b096      	sub	sp, #88	@ 0x58
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t rtd = 0;
 80038be:	2356      	movs	r3, #86	@ 0x56
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
	uint8_t fault;
	max31865_fault_cycle_t fault_cycle= MAX31865_FAULT_AUTO;
 80038c6:	2355      	movs	r3, #85	@ 0x55
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038ce:	f000 fbd5 	bl	800407c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038d2:	f000 f8e7 	bl	8003aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038d6:	f000 f9b9 	bl	8003c4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80038da:	f000 f94f 	bl	8003b7c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80038de:	f000 f985 	bl	8003bec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RTD_PWR_CKT_GPIO_Port,RTD_PWR_CKT_Pin,GPIO_PIN_SET);
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4862      	ldr	r0, [pc, #392]	@ (8003a70 <main+0x1b8>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	0019      	movs	r1, r3
 80038ec:	f000 fe84 	bl	80045f8 <HAL_GPIO_WritePin>
  begin(MAX31865_3WIRE);
 80038f0:	2001      	movs	r0, #1
 80038f2:	f7ff fd97 	bl	8003424 <begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rtd = readRTD();
 80038f6:	2556      	movs	r5, #86	@ 0x56
 80038f8:	197c      	adds	r4, r7, r5
 80038fa:	f7ff fdc5 	bl	8003488 <readRTD>
 80038fe:	0003      	movs	r3, r0
 8003900:	8023      	strh	r3, [r4, #0]
	     ratio = rtd;
 8003902:	002c      	movs	r4, r5
 8003904:	193b      	adds	r3, r7, r4
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	0018      	movs	r0, r3
 800390a:	f7fd fc3d 	bl	8001188 <__aeabi_ui2f>
 800390e:	1c03      	adds	r3, r0, #0
 8003910:	653b      	str	r3, [r7, #80]	@ 0x50
	     ratio /= 32768;
 8003912:	218e      	movs	r1, #142	@ 0x8e
 8003914:	05c9      	lsls	r1, r1, #23
 8003916:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003918:	f7fd f912 	bl	8000b40 <__aeabi_fdiv>
 800391c:	1c03      	adds	r3, r0, #0
 800391e:	653b      	str	r3, [r7, #80]	@ 0x50

	     sprintf(MSG1,"RTD value: %d",rtd);
 8003920:	193b      	adds	r3, r7, r4
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	4953      	ldr	r1, [pc, #332]	@ (8003a74 <main+0x1bc>)
 8003926:	2438      	movs	r4, #56	@ 0x38
 8003928:	193b      	adds	r3, r7, r4
 800392a:	0018      	movs	r0, r3
 800392c:	f004 f84a 	bl	80079c4 <siprintf>
	     port_debug_print((uint8_t *)MSG1);
 8003930:	193b      	adds	r3, r7, r4
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff ffa4 	bl	8003880 <port_debug_print>
	     port_debug_print((uint8_t *)"\n\r");
 8003938:	4b4f      	ldr	r3, [pc, #316]	@ (8003a78 <main+0x1c0>)
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ffa0 	bl	8003880 <port_debug_print>

//	     sprintf(MSG1,"Resistance = %.8f",RREF*ratio);
//	     port_debug_print((uint8_t *)MSG1);
//	     port_debug_print((uint8_t *)"\n\r");

	     sprintf(MSG1,"Temperature = %.2f",temperature(RNOMINAL, RREF));
 8003940:	4a4e      	ldr	r2, [pc, #312]	@ (8003a7c <main+0x1c4>)
 8003942:	4b4f      	ldr	r3, [pc, #316]	@ (8003a80 <main+0x1c8>)
 8003944:	1c11      	adds	r1, r2, #0
 8003946:	1c18      	adds	r0, r3, #0
 8003948:	f7ff fdd2 	bl	80034f0 <temperature>
 800394c:	1c03      	adds	r3, r0, #0
 800394e:	1c18      	adds	r0, r3, #0
 8003950:	f7ff fb18 	bl	8002f84 <__aeabi_f2d>
 8003954:	0002      	movs	r2, r0
 8003956:	000b      	movs	r3, r1
 8003958:	494a      	ldr	r1, [pc, #296]	@ (8003a84 <main+0x1cc>)
 800395a:	1938      	adds	r0, r7, r4
 800395c:	f004 f832 	bl	80079c4 <siprintf>
	     port_debug_print((uint8_t *)MSG1);
 8003960:	193b      	adds	r3, r7, r4
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff ff8c 	bl	8003880 <port_debug_print>
	     port_debug_print((uint8_t *)"\n\r");
 8003968:	4b43      	ldr	r3, [pc, #268]	@ (8003a78 <main+0x1c0>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff ff88 	bl	8003880 <port_debug_print>

	     fault = readFault(fault_cycle);
 8003970:	254f      	movs	r5, #79	@ 0x4f
 8003972:	197c      	adds	r4, r7, r5
 8003974:	2355      	movs	r3, #85	@ 0x55
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f7ff ff0e 	bl	800379c <readFault>
 8003980:	0003      	movs	r3, r0
 8003982:	7023      	strb	r3, [r4, #0]
	     if (fault) {
 8003984:	197b      	adds	r3, r7, r5
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d06b      	beq.n	8003a64 <main+0x1ac>
	         sprintf(buffer, "Fault 0x%X\n", fault);
 800398c:	197b      	adds	r3, r7, r5
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	493d      	ldr	r1, [pc, #244]	@ (8003a88 <main+0x1d0>)
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	0018      	movs	r0, r3
 8003996:	f004 f815 	bl	80079c4 <siprintf>
	         port_debug_print((uint8_t*)buffer);  // Use port_debug_print to transmit
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff ff6f 	bl	8003880 <port_debug_print>

	         if (fault & MAX31865_FAULT_HIGHTHRESH) {
 80039a2:	197b      	adds	r3, r7, r5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da09      	bge.n	80039c0 <main+0x108>
	             sprintf(buffer, "RTD High Threshold\n");
 80039ac:	4a37      	ldr	r2, [pc, #220]	@ (8003a8c <main+0x1d4>)
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f004 f806 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff ff60 	bl	8003880 <port_debug_print>
	         }
	         if (fault & MAX31865_FAULT_LOWTHRESH) {
 80039c0:	234f      	movs	r3, #79	@ 0x4f
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2240      	movs	r2, #64	@ 0x40
 80039c8:	4013      	ands	r3, r2
 80039ca:	d009      	beq.n	80039e0 <main+0x128>
	             sprintf(buffer, "RTD Low Threshold\n");
 80039cc:	4a30      	ldr	r2, [pc, #192]	@ (8003a90 <main+0x1d8>)
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f003 fff6 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff ff50 	bl	8003880 <port_debug_print>
	         }
	         if (fault & MAX31865_FAULT_REFINLOW) {
 80039e0:	234f      	movs	r3, #79	@ 0x4f
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2220      	movs	r2, #32
 80039e8:	4013      	ands	r3, r2
 80039ea:	d009      	beq.n	8003a00 <main+0x148>
	             sprintf(buffer, "REFIN- > 0.85 x Bias\n");
 80039ec:	4a29      	ldr	r2, [pc, #164]	@ (8003a94 <main+0x1dc>)
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f003 ffe6 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ff40 	bl	8003880 <port_debug_print>
	         }
	         if (fault & MAX31865_FAULT_REFINHIGH) {
 8003a00:	234f      	movs	r3, #79	@ 0x4f
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <main+0x168>
	             sprintf(buffer, "REFIN- < 0.85 x Bias - FORCE- open\n");
 8003a0c:	4a22      	ldr	r2, [pc, #136]	@ (8003a98 <main+0x1e0>)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f003 ffd6 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff ff30 	bl	8003880 <port_debug_print>
	         }
	         if (fault & MAX31865_FAULT_RTDINLOW) {
 8003a20:	234f      	movs	r3, #79	@ 0x4f
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <main+0x188>
	             sprintf(buffer, "RTDIN- < 0.85 x Bias - FORCE- open\n");
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a9c <main+0x1e4>)
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f003 ffc6 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff ff20 	bl	8003880 <port_debug_print>
	         }
	         if (fault & MAX31865_FAULT_OVUV) {
 8003a40:	234f      	movs	r3, #79	@ 0x4f
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2204      	movs	r2, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <main+0x1a8>
	             sprintf(buffer, "Under/Over voltage\n");
 8003a4c:	4a14      	ldr	r2, [pc, #80]	@ (8003aa0 <main+0x1e8>)
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f003 ffb6 	bl	80079c4 <siprintf>
	             port_debug_print((uint8_t*)buffer);  // Use port_debug_print
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ff10 	bl	8003880 <port_debug_print>
	         }

	         clearFault();
 8003a60:	f7ff feef 	bl	8003842 <clearFault>
	     }

	      HAL_Delay(1000);
 8003a64:	23fa      	movs	r3, #250	@ 0xfa
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 fb77 	bl	800415c <HAL_Delay>
	  rtd = readRTD();
 8003a6e:	e742      	b.n	80038f6 <main+0x3e>
 8003a70:	50000400 	.word	0x50000400
 8003a74:	0800b630 	.word	0x0800b630
 8003a78:	0800b640 	.word	0x0800b640
 8003a7c:	43c80000 	.word	0x43c80000
 8003a80:	42c80000 	.word	0x42c80000
 8003a84:	0800b644 	.word	0x0800b644
 8003a88:	0800b658 	.word	0x0800b658
 8003a8c:	0800b664 	.word	0x0800b664
 8003a90:	0800b678 	.word	0x0800b678
 8003a94:	0800b68c 	.word	0x0800b68c
 8003a98:	0800b6a4 	.word	0x0800b6a4
 8003a9c:	0800b6c8 	.word	0x0800b6c8
 8003aa0:	0800b6ec 	.word	0x0800b6ec

08003aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b09b      	sub	sp, #108	@ 0x6c
 8003aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aaa:	2434      	movs	r4, #52	@ 0x34
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	0018      	movs	r0, r3
 8003ab0:	2334      	movs	r3, #52	@ 0x34
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f003 fff1 	bl	8007a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aba:	2320      	movs	r3, #32
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	0018      	movs	r0, r3
 8003ac0:	2314      	movs	r3, #20
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f003 ffe9 	bl	8007a9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	0018      	movs	r0, r3
 8003ace:	231c      	movs	r3, #28
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f003 ffe2 	bl	8007a9c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad8:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <SystemClock_Config+0xd0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a26      	ldr	r2, [pc, #152]	@ (8003b78 <SystemClock_Config+0xd4>)
 8003ade:	401a      	ands	r2, r3
 8003ae0:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <SystemClock_Config+0xd0>)
 8003ae2:	2180      	movs	r1, #128	@ 0x80
 8003ae4:	0109      	lsls	r1, r1, #4
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003aea:	0021      	movs	r1, r4
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2210      	movs	r2, #16
 8003af0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2201      	movs	r2, #1
 8003af6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	22a0      	movs	r2, #160	@ 0xa0
 8003b02:	0212      	lsls	r2, r2, #8
 8003b04:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2200      	movs	r2, #0
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 fd90 	bl	8004634 <HAL_RCC_OscConfig>
 8003b14:	1e03      	subs	r3, r0, #0
 8003b16:	d001      	beq.n	8003b1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003b18:	f000 f906 	bl	8003d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	220f      	movs	r2, #15
 8003b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	2100      	movs	r1, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f001 f8e1 	bl	8004d08 <HAL_RCC_ClockConfig>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d001      	beq.n	8003b4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003b4a:	f000 f8ed 	bl	8003d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	2202      	movs	r2, #2
 8003b52:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f001 faf7 	bl	8005150 <HAL_RCCEx_PeriphCLKConfig>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d001      	beq.n	8003b6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003b66:	f000 f8df 	bl	8003d28 <Error_Handler>
  }
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b01b      	add	sp, #108	@ 0x6c
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	40007000 	.word	0x40007000
 8003b78:	ffffe7ff 	.word	0xffffe7ff

08003b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003b82:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <MX_SPI1_Init+0x6c>)
 8003b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b86:	4b17      	ldr	r3, [pc, #92]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003b88:	2282      	movs	r2, #130	@ 0x82
 8003b8a:	0052      	lsls	r2, r2, #1
 8003b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b9a:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc0:	4b08      	ldr	r3, [pc, #32]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003bc6:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <MX_SPI1_Init+0x68>)
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f001 fbf8 	bl	80053c4 <HAL_SPI_Init>
 8003bd4:	1e03      	subs	r3, r0, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bd8:	f000 f8a6 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	20000208 	.word	0x20000208
 8003be8:	40013000 	.word	0x40013000

08003bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bf0:	4b14      	ldr	r3, [pc, #80]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003bf2:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <MX_USART2_UART_Init+0x5c>)
 8003bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003bf8:	2296      	movs	r2, #150	@ 0x96
 8003bfa:	0192      	lsls	r2, r2, #6
 8003bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfe:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c12:	220c      	movs	r2, #12
 8003c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c30:	0018      	movs	r0, r3
 8003c32:	f002 f9f1 	bl	8006018 <HAL_UART_Init>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c3a:	f000 f875 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000260 	.word	0x20000260
 8003c48:	40004400 	.word	0x40004400

08003c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c52:	240c      	movs	r4, #12
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	0018      	movs	r0, r3
 8003c58:	2314      	movs	r3, #20
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f003 ff1d 	bl	8007a9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c68:	2180      	movs	r1, #128	@ 0x80
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	2280      	movs	r2, #128	@ 0x80
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7e:	4b28      	ldr	r3, [pc, #160]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c86:	4b26      	ldr	r3, [pc, #152]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003c98:	2102      	movs	r1, #2
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <MX_GPIO_Init+0xd4>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003caa:	23e8      	movs	r3, #232	@ 0xe8
 8003cac:	0159      	lsls	r1, r3, #5
 8003cae:	23a0      	movs	r3, #160	@ 0xa0
 8003cb0:	05db      	lsls	r3, r3, #23
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f000 fc9f 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTD_PWR_CKT_GPIO_Port, RTD_PWR_CKT_Pin, GPIO_PIN_RESET);
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4819      	ldr	r0, [pc, #100]	@ (8003d24 <MX_GPIO_Init+0xd8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	f000 fc98 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	22e8      	movs	r2, #232	@ 0xe8
 8003ccc:	0152      	lsls	r2, r2, #5
 8003cce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce2:	193a      	adds	r2, r7, r4
 8003ce4:	23a0      	movs	r3, #160	@ 0xa0
 8003ce6:	05db      	lsls	r3, r3, #23
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fb0e 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTD_PWR_CKT_Pin */
  GPIO_InitStruct.Pin = RTD_PWR_CKT_Pin;
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	0052      	lsls	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RTD_PWR_CKT_GPIO_Port, &GPIO_InitStruct);
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	4a05      	ldr	r2, [pc, #20]	@ (8003d24 <MX_GPIO_Init+0xd8>)
 8003d10:	0019      	movs	r1, r3
 8003d12:	0010      	movs	r0, r2
 8003d14:	f000 fafa 	bl	800430c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b009      	add	sp, #36	@ 0x24
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	50000400 	.word	0x50000400

08003d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d2c:	b672      	cpsid	i
}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	e7fd      	b.n	8003d30 <Error_Handler+0x8>

08003d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <HAL_MspInit+0x24>)
 8003d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_MspInit+0x24>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	430a      	orrs	r2, r1
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <HAL_MspInit+0x24>)
 8003d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_MspInit+0x24>)
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	0549      	lsls	r1, r1, #21
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	240c      	movs	r4, #12
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	0018      	movs	r0, r3
 8003d6a:	2314      	movs	r3, #20
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f003 fe94 	bl	8007a9c <memset>
  if(hspi->Instance==SPI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <HAL_SPI_MspInit+0x80>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d129      	bne.n	8003dd2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d7e:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d82:	4b17      	ldr	r3, [pc, #92]	@ (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	0149      	lsls	r1, r1, #5
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	430a      	orrs	r2, r1
 8003d96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003da4:	0021      	movs	r1, r4
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	22e0      	movs	r2, #224	@ 0xe0
 8003daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2202      	movs	r2, #2
 8003db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	187a      	adds	r2, r7, r1
 8003dc6:	23a0      	movs	r3, #160	@ 0xa0
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	0011      	movs	r1, r2
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 fa9d 	bl	800430c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b009      	add	sp, #36	@ 0x24
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	40013000 	.word	0x40013000
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	240c      	movs	r4, #12
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	0018      	movs	r0, r3
 8003df2:	2314      	movs	r3, #20
 8003df4:	001a      	movs	r2, r3
 8003df6:	2100      	movs	r1, #0
 8003df8:	f003 fe50 	bl	8007a9c <memset>
  if(huart->Instance==USART2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_UART_MspInit+0x80>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d129      	bne.n	8003e5a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e06:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <HAL_UART_MspInit+0x84>)
 8003e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e0a:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <HAL_UART_MspInit+0x84>)
 8003e0c:	2180      	movs	r1, #128	@ 0x80
 8003e0e:	0289      	lsls	r1, r1, #10
 8003e10:	430a      	orrs	r2, r1
 8003e12:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_UART_MspInit+0x84>)
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <HAL_UART_MspInit+0x84>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e20:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <HAL_UART_MspInit+0x84>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e2c:	0021      	movs	r1, r4
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	220c      	movs	r2, #12
 8003e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2202      	movs	r2, #2
 8003e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2203      	movs	r2, #3
 8003e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2204      	movs	r2, #4
 8003e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	187a      	adds	r2, r7, r1
 8003e4e:	23a0      	movs	r3, #160	@ 0xa0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fa59 	bl	800430c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b009      	add	sp, #36	@ 0x24
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40021000 	.word	0x40021000

08003e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	e7fd      	b.n	8003e70 <NMI_Handler+0x4>

08003e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e78:	46c0      	nop			@ (mov r8, r8)
 8003e7a:	e7fd      	b.n	8003e78 <HardFault_Handler+0x4>

08003e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e94:	f000 f946 	bl	8004124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	af00      	add	r7, sp, #0
  return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_kill>:

int _kill(int pid, int sig)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eb4:	f003 fe4c 	bl	8007b50 <__errno>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	2216      	movs	r2, #22
 8003ebc:	601a      	str	r2, [r3, #0]
  return -1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	425b      	negs	r3, r3
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_exit>:

void _exit (int status)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff ffe5 	bl	8003eaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	e7fd      	b.n	8003ee0 <_exit+0x16>

08003ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ef6:	e000      	b.n	8003efa <_read+0x16>
 8003ef8:	bf00      	nop
 8003efa:	0001      	movs	r1, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	60ba      	str	r2, [r7, #8]
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dbf0      	blt.n	8003ef6 <_read+0x12>
  }

  return len;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e009      	b.n	8003f44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	e000      	b.n	8003f3e <_write+0x20>
 8003f3c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	dbf1      	blt.n	8003f30 <_write+0x12>
  }
  return len;
 8003f4c:	687b      	ldr	r3, [r7, #4]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_close>:

int _close(int file)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	425b      	negs	r3, r3
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2280      	movs	r2, #128	@ 0x80
 8003f78:	0192      	lsls	r2, r2, #6
 8003f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b002      	add	sp, #8
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_isatty>:

int _isatty(int file)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <_sbrk+0x5c>)
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <_sbrk+0x60>)
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <_sbrk+0x64>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <_sbrk+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe0:	f003 fdb6 	bl	8007b50 <__errno>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fea:	2301      	movs	r3, #1
 8003fec:	425b      	negs	r3, r3
 8003fee:	e009      	b.n	8004004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <_sbrk+0x64>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	18d2      	adds	r2, r2, r3
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <_sbrk+0x64>)
 8004000:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b006      	add	sp, #24
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20002000 	.word	0x20002000
 8004010:	00000400 	.word	0x00000400
 8004014:	200002e8 	.word	0x200002e8
 8004018:	20000440 	.word	0x20000440

0800401c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004028:	480d      	ldr	r0, [pc, #52]	@ (8004060 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800402a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800402c:	f7ff fff6 	bl	800401c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004030:	480c      	ldr	r0, [pc, #48]	@ (8004064 <LoopForever+0x6>)
  ldr r1, =_edata
 8004032:	490d      	ldr	r1, [pc, #52]	@ (8004068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004034:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <LoopForever+0xe>)
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004038:	e002      	b.n	8004040 <LoopCopyDataInit>

0800403a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800403a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800403c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403e:	3304      	adds	r3, #4

08004040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004044:	d3f9      	bcc.n	800403a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004046:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004048:	4c0a      	ldr	r4, [pc, #40]	@ (8004074 <LoopForever+0x16>)
  movs r3, #0
 800404a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800404c:	e001      	b.n	8004052 <LoopFillZerobss>

0800404e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004050:	3204      	adds	r2, #4

08004052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004054:	d3fb      	bcc.n	800404e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004056:	f003 fd81 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800405a:	f7ff fc2d 	bl	80038b8 <main>

0800405e <LoopForever>:

LoopForever:
    b LoopForever
 800405e:	e7fe      	b.n	800405e <LoopForever>
   ldr   r0, =_estack
 8004060:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800406c:	0800bc68 	.word	0x0800bc68
  ldr r2, =_sbss
 8004070:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004074:	2000043c 	.word	0x2000043c

08004078 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC1_COMP_IRQHandler>
	...

0800407c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_Init+0x3c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <HAL_Init+0x3c>)
 800408e:	2140      	movs	r1, #64	@ 0x40
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004094:	2003      	movs	r0, #3
 8004096:	f000 f811 	bl	80040bc <HAL_InitTick>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d003      	beq.n	80040a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e001      	b.n	80040aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040a6:	f7ff fe45 	bl	8003d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b002      	add	sp, #8
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	40022000 	.word	0x40022000

080040bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c4:	4b14      	ldr	r3, [pc, #80]	@ (8004118 <HAL_InitTick+0x5c>)
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	4b14      	ldr	r3, [pc, #80]	@ (800411c <HAL_InitTick+0x60>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	0019      	movs	r1, r3
 80040ce:	23fa      	movs	r3, #250	@ 0xfa
 80040d0:	0098      	lsls	r0, r3, #2
 80040d2:	f7fc f835 	bl	8000140 <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	0019      	movs	r1, r3
 80040da:	0020      	movs	r0, r4
 80040dc:	f7fc f830 	bl	8000140 <__udivsi3>
 80040e0:	0003      	movs	r3, r0
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 f905 	bl	80042f2 <HAL_SYSTICK_Config>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00f      	b.n	8004110 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d80b      	bhi.n	800410e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	2301      	movs	r3, #1
 80040fa:	425b      	negs	r3, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f8e2 	bl	80042c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_InitTick+0x64>)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b003      	add	sp, #12
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	20000000 	.word	0x20000000
 800411c:	20000008 	.word	0x20000008
 8004120:	20000004 	.word	0x20000004

08004124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_IncTick+0x1c>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_IncTick+0x20>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	18d2      	adds	r2, r2, r3
 8004134:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <HAL_IncTick+0x20>)
 8004136:	601a      	str	r2, [r3, #0]
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	20000008 	.word	0x20000008
 8004144:	200002ec 	.word	0x200002ec

08004148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  return uwTick;
 800414c:	4b02      	ldr	r3, [pc, #8]	@ (8004158 <HAL_GetTick+0x10>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	200002ec 	.word	0x200002ec

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff fff0 	bl	8004148 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	d005      	beq.n	8004182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004176:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_Delay+0x44>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	001a      	movs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	189b      	adds	r3, r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	f7ff ffe0 	bl	8004148 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d8f7      	bhi.n	8004184 <HAL_Delay+0x28>
  {
  }
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000008 	.word	0x20000008

080041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	0002      	movs	r2, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	1dfb      	adds	r3, r7, #7
 80041b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	1dfb      	adds	r3, r7, #7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80041b8:	d828      	bhi.n	800420c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004278 <__NVIC_SetPriority+0xd4>)
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	33c0      	adds	r3, #192	@ 0xc0
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	589b      	ldr	r3, [r3, r2]
 80041ca:	1dfa      	adds	r2, r7, #7
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	0011      	movs	r1, r2
 80041d0:	2203      	movs	r2, #3
 80041d2:	400a      	ands	r2, r1
 80041d4:	00d2      	lsls	r2, r2, #3
 80041d6:	21ff      	movs	r1, #255	@ 0xff
 80041d8:	4091      	lsls	r1, r2
 80041da:	000a      	movs	r2, r1
 80041dc:	43d2      	mvns	r2, r2
 80041de:	401a      	ands	r2, r3
 80041e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	019b      	lsls	r3, r3, #6
 80041e6:	22ff      	movs	r2, #255	@ 0xff
 80041e8:	401a      	ands	r2, r3
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	0018      	movs	r0, r3
 80041f0:	2303      	movs	r3, #3
 80041f2:	4003      	ands	r3, r0
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041f8:	481f      	ldr	r0, [pc, #124]	@ (8004278 <__NVIC_SetPriority+0xd4>)
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	430a      	orrs	r2, r1
 8004204:	33c0      	adds	r3, #192	@ 0xc0
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800420a:	e031      	b.n	8004270 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800420c:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <__NVIC_SetPriority+0xd8>)
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0019      	movs	r1, r3
 8004214:	230f      	movs	r3, #15
 8004216:	400b      	ands	r3, r1
 8004218:	3b08      	subs	r3, #8
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3306      	adds	r3, #6
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	3304      	adds	r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1dfa      	adds	r2, r7, #7
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	0011      	movs	r1, r2
 800422c:	2203      	movs	r2, #3
 800422e:	400a      	ands	r2, r1
 8004230:	00d2      	lsls	r2, r2, #3
 8004232:	21ff      	movs	r1, #255	@ 0xff
 8004234:	4091      	lsls	r1, r2
 8004236:	000a      	movs	r2, r1
 8004238:	43d2      	mvns	r2, r2
 800423a:	401a      	ands	r2, r3
 800423c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	22ff      	movs	r2, #255	@ 0xff
 8004244:	401a      	ands	r2, r3
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	0018      	movs	r0, r3
 800424c:	2303      	movs	r3, #3
 800424e:	4003      	ands	r3, r0
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004254:	4809      	ldr	r0, [pc, #36]	@ (800427c <__NVIC_SetPriority+0xd8>)
 8004256:	1dfb      	adds	r3, r7, #7
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	001c      	movs	r4, r3
 800425c:	230f      	movs	r3, #15
 800425e:	4023      	ands	r3, r4
 8004260:	3b08      	subs	r3, #8
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	430a      	orrs	r2, r1
 8004266:	3306      	adds	r3, #6
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	18c3      	adds	r3, r0, r3
 800426c:	3304      	adds	r3, #4
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	46c0      	nop			@ (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b003      	add	sp, #12
 8004276:	bd90      	pop	{r4, r7, pc}
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	045b      	lsls	r3, r3, #17
 8004290:	429a      	cmp	r2, r3
 8004292:	d301      	bcc.n	8004298 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004294:	2301      	movs	r3, #1
 8004296:	e010      	b.n	80042ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <SysTick_Config+0x44>)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	3a01      	subs	r2, #1
 800429e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a0:	2301      	movs	r3, #1
 80042a2:	425b      	negs	r3, r3
 80042a4:	2103      	movs	r1, #3
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff ff7c 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <SysTick_Config+0x44>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <SysTick_Config+0x44>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	210f      	movs	r1, #15
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	1c02      	adds	r2, r0, #0
 80042d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff ff5d 	bl	80041a4 <__NVIC_SetPriority>
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff ffbf 	bl	8004280 <SysTick_Config>
 8004302:	0003      	movs	r3, r0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004322:	e14f      	b.n	80045c4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4091      	lsls	r1, r2
 800432e:	000a      	movs	r2, r1
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d100      	bne.n	800433c <HAL_GPIO_Init+0x30>
 800433a:	e140      	b.n	80045be <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	4013      	ands	r3, r2
 8004344:	2b01      	cmp	r3, #1
 8004346:	d005      	beq.n	8004354 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2203      	movs	r2, #3
 800434e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004350:	2b02      	cmp	r3, #2
 8004352:	d130      	bne.n	80043b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	409a      	lsls	r2, r3
 8004362:	0013      	movs	r3, r2
 8004364:	43da      	mvns	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	0013      	movs	r3, r2
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438a:	2201      	movs	r2, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
 8004390:	0013      	movs	r3, r2
 8004392:	43da      	mvns	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	2201      	movs	r2, #1
 80043a2:	401a      	ands	r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	409a      	lsls	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2203      	movs	r2, #3
 80043bc:	4013      	ands	r3, r2
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d017      	beq.n	80043f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	409a      	lsls	r2, r3
 80043d0:	0013      	movs	r3, r2
 80043d2:	43da      	mvns	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	0013      	movs	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2203      	movs	r2, #3
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d123      	bne.n	8004446 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	08da      	lsrs	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3208      	adds	r2, #8
 8004406:	0092      	lsls	r2, r2, #2
 8004408:	58d3      	ldr	r3, [r2, r3]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2207      	movs	r2, #7
 8004410:	4013      	ands	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	409a      	lsls	r2, r3
 8004418:	0013      	movs	r3, r2
 800441a:	43da      	mvns	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2107      	movs	r1, #7
 800442a:	400b      	ands	r3, r1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	409a      	lsls	r2, r3
 8004430:	0013      	movs	r3, r2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	6939      	ldr	r1, [r7, #16]
 8004444:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	43da      	mvns	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2203      	movs	r2, #3
 8004464:	401a      	ands	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	23c0      	movs	r3, #192	@ 0xc0
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	4013      	ands	r3, r2
 8004484:	d100      	bne.n	8004488 <HAL_GPIO_Init+0x17c>
 8004486:	e09a      	b.n	80045be <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004488:	4b54      	ldr	r3, [pc, #336]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800448a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448c:	4b53      	ldr	r3, [pc, #332]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800448e:	2101      	movs	r1, #1
 8004490:	430a      	orrs	r2, r1
 8004492:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004494:	4a52      	ldr	r2, [pc, #328]	@ (80045e0 <HAL_GPIO_Init+0x2d4>)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	589b      	ldr	r3, [r3, r2]
 80044a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2203      	movs	r2, #3
 80044a6:	4013      	ands	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	220f      	movs	r2, #15
 80044ac:	409a      	lsls	r2, r3
 80044ae:	0013      	movs	r3, r2
 80044b0:	43da      	mvns	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	23a0      	movs	r3, #160	@ 0xa0
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	429a      	cmp	r2, r3
 80044c0:	d019      	beq.n	80044f6 <HAL_GPIO_Init+0x1ea>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a47      	ldr	r2, [pc, #284]	@ (80045e4 <HAL_GPIO_Init+0x2d8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0x1e6>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a46      	ldr	r2, [pc, #280]	@ (80045e8 <HAL_GPIO_Init+0x2dc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00d      	beq.n	80044ee <HAL_GPIO_Init+0x1e2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <HAL_GPIO_Init+0x2e0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <HAL_GPIO_Init+0x1de>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a44      	ldr	r2, [pc, #272]	@ (80045f0 <HAL_GPIO_Init+0x2e4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_GPIO_Init+0x1da>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e008      	b.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044e6:	2306      	movs	r3, #6
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044f6:	2300      	movs	r3, #0
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	2103      	movs	r1, #3
 80044fc:	400a      	ands	r2, r1
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4093      	lsls	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004508:	4935      	ldr	r1, [pc, #212]	@ (80045e0 <HAL_GPIO_Init+0x2d4>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004516:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	43da      	mvns	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	4013      	ands	r3, r2
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800453a:	4b2e      	ldr	r3, [pc, #184]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004540:	4b2c      	ldr	r3, [pc, #176]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43da      	mvns	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	039b      	lsls	r3, r3, #14
 8004558:	4013      	ands	r3, r2
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004564:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800456a:	4b22      	ldr	r3, [pc, #136]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	43da      	mvns	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	4013      	ands	r3, r2
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800458e:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004594:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43da      	mvns	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	025b      	lsls	r3, r3, #9
 80045ac:	4013      	ands	r3, r2
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045b8:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <HAL_GPIO_Init+0x2e8>)
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	40da      	lsrs	r2, r3
 80045cc:	1e13      	subs	r3, r2, #0
 80045ce:	d000      	beq.n	80045d2 <HAL_GPIO_Init+0x2c6>
 80045d0:	e6a8      	b.n	8004324 <HAL_GPIO_Init+0x18>
  }
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40010000 	.word	0x40010000
 80045e4:	50000400 	.word	0x50000400
 80045e8:	50000800 	.word	0x50000800
 80045ec:	50000c00 	.word	0x50000c00
 80045f0:	50001c00 	.word	0x50001c00
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	0008      	movs	r0, r1
 8004602:	0011      	movs	r1, r2
 8004604:	1cbb      	adds	r3, r7, #2
 8004606:	1c02      	adds	r2, r0, #0
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	1c7b      	adds	r3, r7, #1
 800460c:	1c0a      	adds	r2, r1, #0
 800460e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004610:	1c7b      	adds	r3, r7, #1
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004618:	1cbb      	adds	r3, r7, #2
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004620:	e003      	b.n	800462a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004622:	1cbb      	adds	r3, r7, #2
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f000 fb5a 	bl	8004cfc <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004648:	4bce      	ldr	r3, [pc, #824]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	220c      	movs	r2, #12
 800464e:	4013      	ands	r3, r2
 8004650:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004652:	4bcc      	ldr	r3, [pc, #816]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	2380      	movs	r3, #128	@ 0x80
 8004658:	025b      	lsls	r3, r3, #9
 800465a:	4013      	ands	r3, r2
 800465c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	4013      	ands	r3, r2
 8004666:	d100      	bne.n	800466a <HAL_RCC_OscConfig+0x36>
 8004668:	e07c      	b.n	8004764 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d007      	beq.n	8004680 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d111      	bne.n	800469a <HAL_RCC_OscConfig+0x66>
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	025b      	lsls	r3, r3, #9
 800467c:	429a      	cmp	r2, r3
 800467e:	d10c      	bne.n	800469a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	4bc0      	ldr	r3, [pc, #768]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	029b      	lsls	r3, r3, #10
 8004688:	4013      	ands	r3, r2
 800468a:	d100      	bne.n	800468e <HAL_RCC_OscConfig+0x5a>
 800468c:	e069      	b.n	8004762 <HAL_RCC_OscConfig+0x12e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d165      	bne.n	8004762 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e330      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_OscConfig+0x82>
 80046a6:	4bb7      	ldr	r3, [pc, #732]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4bb6      	ldr	r3, [pc, #728]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046ac:	2180      	movs	r1, #128	@ 0x80
 80046ae:	0249      	lsls	r1, r1, #9
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e027      	b.n	8004706 <HAL_RCC_OscConfig+0xd2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	23a0      	movs	r3, #160	@ 0xa0
 80046bc:	02db      	lsls	r3, r3, #11
 80046be:	429a      	cmp	r2, r3
 80046c0:	d10e      	bne.n	80046e0 <HAL_RCC_OscConfig+0xac>
 80046c2:	4bb0      	ldr	r3, [pc, #704]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4baf      	ldr	r3, [pc, #700]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	02c9      	lsls	r1, r1, #11
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4bac      	ldr	r3, [pc, #688]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4bab      	ldr	r3, [pc, #684]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046d6:	2180      	movs	r1, #128	@ 0x80
 80046d8:	0249      	lsls	r1, r1, #9
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e012      	b.n	8004706 <HAL_RCC_OscConfig+0xd2>
 80046e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046e6:	49a8      	ldr	r1, [pc, #672]	@ (8004988 <HAL_RCC_OscConfig+0x354>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	@ 0x80
 80046f2:	025b      	lsls	r3, r3, #9
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4ba2      	ldr	r3, [pc, #648]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4ba1      	ldr	r3, [pc, #644]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004700:	49a2      	ldr	r1, [pc, #648]	@ (800498c <HAL_RCC_OscConfig+0x358>)
 8004702:	400a      	ands	r2, r1
 8004704:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d014      	beq.n	8004738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7ff fd1b 	bl	8004148 <HAL_GetTick>
 8004712:	0003      	movs	r3, r0
 8004714:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7ff fd16 	bl	8004148 <HAL_GetTick>
 800471c:	0002      	movs	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e2e8      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800472a:	4b96      	ldr	r3, [pc, #600]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	029b      	lsls	r3, r3, #10
 8004732:	4013      	ands	r3, r2
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xe4>
 8004736:	e015      	b.n	8004764 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7ff fd06 	bl	8004148 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004742:	f7ff fd01 	bl	8004148 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b64      	cmp	r3, #100	@ 0x64
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e2d3      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004754:	4b8b      	ldr	r3, [pc, #556]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	029b      	lsls	r3, r3, #10
 800475c:	4013      	ands	r3, r2
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x10e>
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004762:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d100      	bne.n	8004770 <HAL_RCC_OscConfig+0x13c>
 800476e:	e08b      	b.n	8004888 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d13e      	bne.n	8004800 <HAL_RCC_OscConfig+0x1cc>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d13b      	bne.n	8004800 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004788:	4b7e      	ldr	r3, [pc, #504]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2204      	movs	r2, #4
 800478e:	4013      	ands	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_RCC_OscConfig+0x168>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e2af      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b79      	ldr	r3, [pc, #484]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a7b      	ldr	r2, [pc, #492]	@ (8004990 <HAL_RCC_OscConfig+0x35c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	4b75      	ldr	r3, [pc, #468]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80047b2:	4b74      	ldr	r3, [pc, #464]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2209      	movs	r2, #9
 80047b8:	4393      	bics	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	4b71      	ldr	r3, [pc, #452]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047c4:	f000 fbe8 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80047c8:	0001      	movs	r1, r0
 80047ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	220f      	movs	r2, #15
 80047d2:	4013      	ands	r3, r2
 80047d4:	4a6f      	ldr	r2, [pc, #444]	@ (8004994 <HAL_RCC_OscConfig+0x360>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	000a      	movs	r2, r1
 80047da:	40da      	lsrs	r2, r3
 80047dc:	4b6e      	ldr	r3, [pc, #440]	@ (8004998 <HAL_RCC_OscConfig+0x364>)
 80047de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80047e0:	4b6e      	ldr	r3, [pc, #440]	@ (800499c <HAL_RCC_OscConfig+0x368>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2513      	movs	r5, #19
 80047e6:	197c      	adds	r4, r7, r5
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7ff fc67 	bl	80040bc <HAL_InitTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80047f2:	197b      	adds	r3, r7, r5
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d046      	beq.n	8004888 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80047fa:	197b      	adds	r3, r7, r5
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	e27d      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d027      	beq.n	8004856 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004806:	4b5f      	ldr	r3, [pc, #380]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2209      	movs	r2, #9
 800480c:	4393      	bics	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	4b5c      	ldr	r3, [pc, #368]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7ff fc96 	bl	8004148 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004822:	f7ff fc91 	bl	8004148 <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e263      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004834:	4b53      	ldr	r3, [pc, #332]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2204      	movs	r2, #4
 800483a:	4013      	ands	r3, r2
 800483c:	d0f1      	beq.n	8004822 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b51      	ldr	r3, [pc, #324]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a53      	ldr	r2, [pc, #332]	@ (8004990 <HAL_RCC_OscConfig+0x35c>)
 8004844:	4013      	ands	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	e018      	b.n	8004888 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b4a      	ldr	r3, [pc, #296]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800485c:	2101      	movs	r1, #1
 800485e:	438a      	bics	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7ff fc71 	bl	8004148 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486c:	f7ff fc6c 	bl	8004148 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e23e      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800487e:	4b41      	ldr	r3, [pc, #260]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2204      	movs	r2, #4
 8004884:	4013      	ands	r3, r2
 8004886:	d1f1      	bne.n	800486c <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	4013      	ands	r3, r2
 8004890:	d100      	bne.n	8004894 <HAL_RCC_OscConfig+0x260>
 8004892:	e0a1      	b.n	80049d8 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d140      	bne.n	800491c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800489a:	4b3a      	ldr	r3, [pc, #232]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x27e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e224      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b2:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	@ (80049a0 <HAL_RCC_OscConfig+0x36c>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	4b30      	ldr	r3, [pc, #192]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	0a19      	lsrs	r1, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	061a      	lsls	r2, r3, #24
 80048d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	0b5b      	lsrs	r3, r3, #13
 80048e0:	3301      	adds	r3, #1
 80048e2:	2280      	movs	r2, #128	@ 0x80
 80048e4:	0212      	lsls	r2, r2, #8
 80048e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80048e8:	4b26      	ldr	r3, [pc, #152]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	210f      	movs	r1, #15
 80048f0:	400b      	ands	r3, r1
 80048f2:	4928      	ldr	r1, [pc, #160]	@ (8004994 <HAL_RCC_OscConfig+0x360>)
 80048f4:	5ccb      	ldrb	r3, [r1, r3]
 80048f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048f8:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <HAL_RCC_OscConfig+0x364>)
 80048fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80048fc:	4b27      	ldr	r3, [pc, #156]	@ (800499c <HAL_RCC_OscConfig+0x368>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2513      	movs	r5, #19
 8004902:	197c      	adds	r4, r7, r5
 8004904:	0018      	movs	r0, r3
 8004906:	f7ff fbd9 	bl	80040bc <HAL_InitTick>
 800490a:	0003      	movs	r3, r0
 800490c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800490e:	197b      	adds	r3, r7, r5
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d060      	beq.n	80049d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8004916:	197b      	adds	r3, r7, r5
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	e1ef      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d03f      	beq.n	80049a4 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004924:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800492a:	2180      	movs	r1, #128	@ 0x80
 800492c:	0049      	lsls	r1, r1, #1
 800492e:	430a      	orrs	r2, r1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7ff fc09 	bl	8004148 <HAL_GetTick>
 8004936:	0003      	movs	r3, r0
 8004938:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493c:	f7ff fc04 	bl	8004148 <HAL_GetTick>
 8004940:	0002      	movs	r2, r0
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1d6      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495a:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a10      	ldr	r2, [pc, #64]	@ (80049a0 <HAL_RCC_OscConfig+0x36c>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	0a19      	lsrs	r1, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	061a      	lsls	r2, r3, #24
 800497c:	4b01      	ldr	r3, [pc, #4]	@ (8004984 <HAL_RCC_OscConfig+0x350>)
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e029      	b.n	80049d8 <HAL_RCC_OscConfig+0x3a4>
 8004984:	40021000 	.word	0x40021000
 8004988:	fffeffff 	.word	0xfffeffff
 800498c:	fffbffff 	.word	0xfffbffff
 8004990:	ffffe0ff 	.word	0xffffe0ff
 8004994:	0800b7bc 	.word	0x0800b7bc
 8004998:	20000000 	.word	0x20000000
 800499c:	20000004 	.word	0x20000004
 80049a0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049a4:	4bbe      	ldr	r3, [pc, #760]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4bbd      	ldr	r3, [pc, #756]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 80049aa:	49be      	ldr	r1, [pc, #760]	@ (8004ca4 <HAL_RCC_OscConfig+0x670>)
 80049ac:	400a      	ands	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7ff fbca 	bl	8004148 <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ba:	f7ff fbc5 	bl	8004148 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e197      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80049cc:	4bb4      	ldr	r3, [pc, #720]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4013      	ands	r3, r2
 80049d6:	d1f0      	bne.n	80049ba <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2208      	movs	r2, #8
 80049de:	4013      	ands	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	4bad      	ldr	r3, [pc, #692]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 80049ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ee:	4bac      	ldr	r3, [pc, #688]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7ff fba7 	bl	8004148 <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a00:	f7ff fba2 	bl	8004148 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e174      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a12:	4ba3      	ldr	r3, [pc, #652]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	2202      	movs	r2, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d0f1      	beq.n	8004a00 <HAL_RCC_OscConfig+0x3cc>
 8004a1c:	e018      	b.n	8004a50 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a22:	4b9f      	ldr	r3, [pc, #636]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a24:	2101      	movs	r1, #1
 8004a26:	438a      	bics	r2, r1
 8004a28:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7ff fb8d 	bl	8004148 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a34:	f7ff fb88 	bl	8004148 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e15a      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a46:	4b96      	ldr	r3, [pc, #600]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d1f1      	bne.n	8004a34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2204      	movs	r2, #4
 8004a56:	4013      	ands	r3, r2
 8004a58:	d100      	bne.n	8004a5c <HAL_RCC_OscConfig+0x428>
 8004a5a:	e0ae      	b.n	8004bba <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5c:	2027      	movs	r0, #39	@ 0x27
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a64:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	055b      	lsls	r3, r3, #21
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a70:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a74:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004a76:	2180      	movs	r1, #128	@ 0x80
 8004a78:	0549      	lsls	r1, r1, #21
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a84:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x674>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	@ 0x80
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d11a      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a90:	4b85      	ldr	r3, [pc, #532]	@ (8004ca8 <HAL_RCC_OscConfig+0x674>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b84      	ldr	r3, [pc, #528]	@ (8004ca8 <HAL_RCC_OscConfig+0x674>)
 8004a96:	2180      	movs	r1, #128	@ 0x80
 8004a98:	0049      	lsls	r1, r1, #1
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7ff fb53 	bl	8004148 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa8:	f7ff fb4e 	bl	8004148 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e120      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca8 <HAL_RCC_OscConfig+0x674>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x4ae>
 8004ad2:	4b73      	ldr	r3, [pc, #460]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ad6:	4b72      	ldr	r3, [pc, #456]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	0049      	lsls	r1, r1, #1
 8004adc:	430a      	orrs	r2, r1
 8004ade:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ae0:	e031      	b.n	8004b46 <HAL_RCC_OscConfig+0x512>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4d0>
 8004aea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004af0:	496c      	ldr	r1, [pc, #432]	@ (8004ca4 <HAL_RCC_OscConfig+0x670>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004af6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004af8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004afa:	4b69      	ldr	r3, [pc, #420]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004afc:	496b      	ldr	r1, [pc, #428]	@ (8004cac <HAL_RCC_OscConfig+0x678>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b02:	e020      	b.n	8004b46 <HAL_RCC_OscConfig+0x512>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	23a0      	movs	r3, #160	@ 0xa0
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d10e      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4fa>
 8004b10:	4b63      	ldr	r3, [pc, #396]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b14:	4b62      	ldr	r3, [pc, #392]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	00c9      	lsls	r1, r1, #3
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b1e:	4b60      	ldr	r3, [pc, #384]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b22:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	0049      	lsls	r1, r1, #1
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b2c:	e00b      	b.n	8004b46 <HAL_RCC_OscConfig+0x512>
 8004b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b32:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b34:	495b      	ldr	r1, [pc, #364]	@ (8004ca4 <HAL_RCC_OscConfig+0x670>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b3a:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b3e:	4b58      	ldr	r3, [pc, #352]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b40:	495a      	ldr	r1, [pc, #360]	@ (8004cac <HAL_RCC_OscConfig+0x678>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d015      	beq.n	8004b7a <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7ff fafb 	bl	8004148 <HAL_GetTick>
 8004b52:	0003      	movs	r3, r0
 8004b54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b58:	f7ff faf6 	bl	8004148 <HAL_GetTick>
 8004b5c:	0002      	movs	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a53      	ldr	r2, [pc, #332]	@ (8004cb0 <HAL_RCC_OscConfig+0x67c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0c7      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCC_OscConfig+0x524>
 8004b78:	e014      	b.n	8004ba4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7a:	f7ff fae5 	bl	8004148 <HAL_GetTick>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b82:	e009      	b.n	8004b98 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7ff fae0 	bl	8004148 <HAL_GetTick>
 8004b88:	0002      	movs	r2, r0
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	4a48      	ldr	r2, [pc, #288]	@ (8004cb0 <HAL_RCC_OscConfig+0x67c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0b1      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d1ef      	bne.n	8004b84 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ba4:	2327      	movs	r3, #39	@ 0x27
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bae:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004bb4:	493f      	ldr	r1, [pc, #252]	@ (8004cb4 <HAL_RCC_OscConfig+0x680>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d100      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x590>
 8004bc2:	e09a      	b.n	8004cfa <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d064      	beq.n	8004c94 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d145      	bne.n	8004c5e <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b33      	ldr	r3, [pc, #204]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b32      	ldr	r3, [pc, #200]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004bd8:	4937      	ldr	r1, [pc, #220]	@ (8004cb8 <HAL_RCC_OscConfig+0x684>)
 8004bda:	400a      	ands	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7ff fab3 	bl	8004148 <HAL_GetTick>
 8004be2:	0003      	movs	r3, r0
 8004be4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be8:	f7ff faae 	bl	8004148 <HAL_GetTick>
 8004bec:	0002      	movs	r2, r0
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e080      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bfa:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	049b      	lsls	r3, r3, #18
 8004c02:	4013      	ands	r3, r2
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c06:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cbc <HAL_RCC_OscConfig+0x688>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c2c:	2180      	movs	r1, #128	@ 0x80
 8004c2e:	0449      	lsls	r1, r1, #17
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7ff fa88 	bl	8004148 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7ff fa83 	bl	8004148 <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e055      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004c50:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	049b      	lsls	r3, r3, #18
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x60a>
 8004c5c:	e04d      	b.n	8004cfa <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c64:	4914      	ldr	r1, [pc, #80]	@ (8004cb8 <HAL_RCC_OscConfig+0x684>)
 8004c66:	400a      	ands	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7ff fa6d 	bl	8004148 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7ff fa68 	bl	8004148 <HAL_GetTick>
 8004c78:	0002      	movs	r2, r0
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e03a      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c86:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <HAL_RCC_OscConfig+0x66c>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	049b      	lsls	r3, r3, #18
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x640>
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d111      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e02d      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	fffffeff 	.word	0xfffffeff
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	fffffbff 	.word	0xfffffbff
 8004cb0:	00001388 	.word	0x00001388
 8004cb4:	efffffff 	.word	0xefffffff
 8004cb8:	feffffff 	.word	0xfeffffff
 8004cbc:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_RCC_OscConfig+0x6d0>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	025b      	lsls	r3, r3, #9
 8004ccc:	401a      	ands	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	23f0      	movs	r3, #240	@ 0xf0
 8004cda:	039b      	lsls	r3, r3, #14
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	23c0      	movs	r3, #192	@ 0xc0
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	401a      	ands	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b00a      	add	sp, #40	@ 0x28
 8004d02:	bdb0      	pop	{r4, r5, r7, pc}
 8004d04:	40021000 	.word	0x40021000

08004d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e128      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b96      	ldr	r3, [pc, #600]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d91e      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b93      	ldr	r3, [pc, #588]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4393      	bics	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	4b90      	ldr	r3, [pc, #576]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d3c:	f7ff fa04 	bl	8004148 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d44:	e009      	b.n	8004d5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d46:	f7ff f9ff 	bl	8004148 <HAL_GetTick>
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	4a8a      	ldr	r2, [pc, #552]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e109      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b87      	ldr	r3, [pc, #540]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4013      	ands	r3, r2
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1ee      	bne.n	8004d46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d72:	4b83      	ldr	r3, [pc, #524]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	22f0      	movs	r2, #240	@ 0xf0
 8004d78:	4393      	bics	r3, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	4b7f      	ldr	r3, [pc, #508]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004d82:	430a      	orrs	r2, r1
 8004d84:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x8a>
 8004d90:	e089      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d9a:	4b79      	ldr	r3, [pc, #484]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	2380      	movs	r3, #128	@ 0x80
 8004da0:	029b      	lsls	r3, r3, #10
 8004da2:	4013      	ands	r3, r2
 8004da4:	d120      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0e1      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004db2:	4b73      	ldr	r3, [pc, #460]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	2380      	movs	r3, #128	@ 0x80
 8004db8:	049b      	lsls	r3, r3, #18
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d114      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0d5      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dca:	4b6d      	ldr	r3, [pc, #436]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0ca      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004dd8:	4b69      	ldr	r3, [pc, #420]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4013      	ands	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0c2      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de8:	4b65      	ldr	r3, [pc, #404]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2203      	movs	r2, #3
 8004dee:	4393      	bics	r3, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4b62      	ldr	r3, [pc, #392]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7ff f9a4 	bl	8004148 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d111      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e0c:	e009      	b.n	8004e22 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0e:	f7ff f99b 	bl	8004148 <HAL_GetTick>
 8004e12:	0002      	movs	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	4a58      	ldr	r2, [pc, #352]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0a5      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e22:	4b57      	ldr	r3, [pc, #348]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	220c      	movs	r2, #12
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d1ef      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x106>
 8004e2e:	e03a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d111      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e38:	e009      	b.n	8004e4e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3a:	f7ff f985 	bl	8004148 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	4a4d      	ldr	r2, [pc, #308]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e08f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	220c      	movs	r2, #12
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d1ef      	bne.n	8004e3a <HAL_RCC_ClockConfig+0x132>
 8004e5a:	e024      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d11b      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e64:	e009      	b.n	8004e7a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7ff f96f 	bl	8004148 <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	4a42      	ldr	r2, [pc, #264]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e079      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e7a:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	220c      	movs	r2, #12
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d1ef      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x15e>
 8004e86:	e00e      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7ff f95e 	bl	8004148 <HAL_GetTick>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	4a3a      	ldr	r2, [pc, #232]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e068      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e9c:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea6:	4b34      	ldr	r3, [pc, #208]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d21e      	bcs.n	8004ef2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb4:	4b30      	ldr	r3, [pc, #192]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4393      	bics	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ec6:	f7ff f93f 	bl	8004148 <HAL_GetTick>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	e009      	b.n	8004ee4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7ff f93a 	bl	8004148 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	4a28      	ldr	r2, [pc, #160]	@ (8004f7c <HAL_RCC_ClockConfig+0x274>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e044      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee4:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <HAL_RCC_ClockConfig+0x270>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4013      	ands	r3, r2
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d1ee      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004efc:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <HAL_RCC_ClockConfig+0x27c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4013      	ands	r3, r2
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f1a:	4b19      	ldr	r3, [pc, #100]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <HAL_RCC_ClockConfig+0x280>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	00da      	lsls	r2, r3, #3
 8004f2a:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f30:	f000 f832 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f34:	0001      	movs	r1, r0
 8004f36:	4b12      	ldr	r3, [pc, #72]	@ (8004f80 <HAL_RCC_ClockConfig+0x278>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	4013      	ands	r3, r2
 8004f40:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <HAL_RCC_ClockConfig+0x284>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	000a      	movs	r2, r1
 8004f46:	40da      	lsrs	r2, r3
 8004f48:	4b11      	ldr	r3, [pc, #68]	@ (8004f90 <HAL_RCC_ClockConfig+0x288>)
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f4c:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <HAL_RCC_ClockConfig+0x28c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	250b      	movs	r5, #11
 8004f52:	197c      	adds	r4, r7, r5
 8004f54:	0018      	movs	r0, r3
 8004f56:	f7ff f8b1 	bl	80040bc <HAL_InitTick>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004f5e:	197b      	adds	r3, r7, r5
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004f66:	197b      	adds	r3, r7, r5
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	00001388 	.word	0x00001388
 8004f80:	40021000 	.word	0x40021000
 8004f84:	fffff8ff 	.word	0xfffff8ff
 8004f88:	ffffc7ff 	.word	0xffffc7ff
 8004f8c:	0800b7bc 	.word	0x0800b7bc
 8004f90:	20000000 	.word	0x20000000
 8004f94:	20000004 	.word	0x20000004

08004f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	b5b0      	push	{r4, r5, r7, lr}
 8004f9a:	b08e      	sub	sp, #56	@ 0x38
 8004f9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d014      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fae:	d900      	bls.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1a>
 8004fb0:	e07b      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x112>
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x24>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fba:	e076      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004fbc:	4b44      	ldr	r3, [pc, #272]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d002      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004fc6:	4b43      	ldr	r3, [pc, #268]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004fc8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004fca:	e07c      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004fcc:	4b42      	ldr	r3, [pc, #264]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004fce:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004fd0:	e079      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd2:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x144>)
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004fd6:	e076      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fda:	0c9a      	lsrs	r2, r3, #18
 8004fdc:	230f      	movs	r3, #15
 8004fde:	401a      	ands	r2, r3
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x148>)
 8004fe2:	5c9b      	ldrb	r3, [r3, r2]
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	0d9a      	lsrs	r2, r3, #22
 8004fea:	2303      	movs	r3, #3
 8004fec:	4013      	ands	r3, r2
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ff2:	4b37      	ldr	r3, [pc, #220]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	025b      	lsls	r3, r3, #9
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d01a      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	4a35      	ldr	r2, [pc, #212]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x144>)
 8005008:	2300      	movs	r3, #0
 800500a:	69b8      	ldr	r0, [r7, #24]
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	f7fb faa5 	bl	800055c <__aeabi_lmul>
 8005012:	0002      	movs	r2, r0
 8005014:	000b      	movs	r3, r1
 8005016:	0010      	movs	r0, r2
 8005018:	0019      	movs	r1, r3
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f7fb fa79 	bl	800051c <__aeabi_uldivmod>
 800502a:	0002      	movs	r2, r0
 800502c:	000b      	movs	r3, r1
 800502e:	0013      	movs	r3, r2
 8005030:	637b      	str	r3, [r7, #52]	@ 0x34
 8005032:	e037      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005034:	4b26      	ldr	r3, [pc, #152]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	4013      	ands	r3, r2
 800503c:	d01a      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005048:	2300      	movs	r3, #0
 800504a:	68b8      	ldr	r0, [r7, #8]
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	f7fb fa85 	bl	800055c <__aeabi_lmul>
 8005052:	0002      	movs	r2, r0
 8005054:	000b      	movs	r3, r1
 8005056:	0010      	movs	r0, r2
 8005058:	0019      	movs	r1, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f7fb fa59 	bl	800051c <__aeabi_uldivmod>
 800506a:	0002      	movs	r2, r0
 800506c:	000b      	movs	r3, r1
 800506e:	0013      	movs	r3, r2
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
 8005072:	e017      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	0018      	movs	r0, r3
 8005078:	2300      	movs	r3, #0
 800507a:	0019      	movs	r1, r3
 800507c:	4a16      	ldr	r2, [pc, #88]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800507e:	2300      	movs	r3, #0
 8005080:	f7fb fa6c 	bl	800055c <__aeabi_lmul>
 8005084:	0002      	movs	r2, r0
 8005086:	000b      	movs	r3, r1
 8005088:	0010      	movs	r0, r2
 800508a:	0019      	movs	r1, r3
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	001c      	movs	r4, r3
 8005090:	2300      	movs	r3, #0
 8005092:	001d      	movs	r5, r3
 8005094:	0022      	movs	r2, r4
 8005096:	002b      	movs	r3, r5
 8005098:	f7fb fa40 	bl	800051c <__aeabi_uldivmod>
 800509c:	0002      	movs	r2, r0
 800509e:	000b      	movs	r3, r1
 80050a0:	0013      	movs	r3, r2
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80050a8:	e00d      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	0b5b      	lsrs	r3, r3, #13
 80050b0:	2207      	movs	r2, #7
 80050b2:	4013      	ands	r3, r2
 80050b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	3301      	adds	r3, #1
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	0212      	lsls	r2, r2, #8
 80050be:	409a      	lsls	r2, r3
 80050c0:	0013      	movs	r3, r2
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80050c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b00e      	add	sp, #56	@ 0x38
 80050ce:	bdb0      	pop	{r4, r5, r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	003d0900 	.word	0x003d0900
 80050d8:	00f42400 	.word	0x00f42400
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	0800b7d4 	.word	0x0800b7d4

080050e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b02      	ldr	r3, [pc, #8]	@ (80050f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	20000000 	.word	0x20000000

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050fc:	f7ff fff2 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005100:	0001      	movs	r1, r0
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	2207      	movs	r2, #7
 800510a:	4013      	ands	r3, r2
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800510e:	5cd3      	ldrb	r3, [r2, r3]
 8005110:	40d9      	lsrs	r1, r3
 8005112:	000b      	movs	r3, r1
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	40021000 	.word	0x40021000
 8005120:	0800b7cc 	.word	0x0800b7cc

08005124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005128:	f7ff ffdc 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 800512c:	0001      	movs	r1, r0
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	0adb      	lsrs	r3, r3, #11
 8005134:	2207      	movs	r2, #7
 8005136:	4013      	ands	r3, r2
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_RCC_GetPCLK2Freq+0x28>)
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	40d9      	lsrs	r1, r3
 800513e:	000b      	movs	r3, r1
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	40021000 	.word	0x40021000
 800514c:	0800b7cc 	.word	0x0800b7cc

08005150 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005158:	2017      	movs	r0, #23
 800515a:	183b      	adds	r3, r7, r0
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2220      	movs	r2, #32
 8005166:	4013      	ands	r3, r2
 8005168:	d100      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800516a:	e0c7      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516c:	4b8b      	ldr	r3, [pc, #556]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800516e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	055b      	lsls	r3, r3, #21
 8005174:	4013      	ands	r3, r2
 8005176:	d109      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005178:	4b88      	ldr	r3, [pc, #544]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800517a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800517c:	4b87      	ldr	r3, [pc, #540]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800517e:	2180      	movs	r1, #128	@ 0x80
 8005180:	0549      	lsls	r1, r1, #21
 8005182:	430a      	orrs	r2, r1
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005186:	183b      	adds	r3, r7, r0
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	4b84      	ldr	r3, [pc, #528]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	2380      	movs	r3, #128	@ 0x80
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d11a      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005198:	4b81      	ldr	r3, [pc, #516]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b80      	ldr	r3, [pc, #512]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800519e:	2180      	movs	r1, #128	@ 0x80
 80051a0:	0049      	lsls	r1, r1, #1
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a6:	f7fe ffcf 	bl	8004148 <HAL_GetTick>
 80051aa:	0003      	movs	r3, r0
 80051ac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b0:	f7fe ffca 	bl	8004148 <HAL_GetTick>
 80051b4:	0002      	movs	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	@ 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e0e8      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	4b77      	ldr	r3, [pc, #476]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4013      	ands	r3, r2
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80051ce:	4b73      	ldr	r3, [pc, #460]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	23c0      	movs	r3, #192	@ 0xc0
 80051d4:	039b      	lsls	r3, r3, #14
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	039b      	lsls	r3, r3, #14
 80051e2:	4013      	ands	r3, r2
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d013      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	23c0      	movs	r3, #192	@ 0xc0
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	401a      	ands	r2, r3
 80051f4:	23c0      	movs	r3, #192	@ 0xc0
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d10a      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051fc:	4b67      	ldr	r3, [pc, #412]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	401a      	ands	r2, r3
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	429a      	cmp	r2, r3
 800520c:	d101      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0c0      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005212:	4b62      	ldr	r3, [pc, #392]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005216:	23c0      	movs	r3, #192	@ 0xc0
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	4013      	ands	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	23c0      	movs	r3, #192	@ 0xc0
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	4013      	ands	r3, r2
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	429a      	cmp	r2, r3
 8005232:	d033      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2220      	movs	r2, #32
 800523a:	4013      	ands	r3, r2
 800523c:	d02e      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800523e:	4b57      	ldr	r3, [pc, #348]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005242:	4a58      	ldr	r2, [pc, #352]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005248:	4b54      	ldr	r3, [pc, #336]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800524a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800524c:	4b53      	ldr	r3, [pc, #332]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800524e:	2180      	movs	r1, #128	@ 0x80
 8005250:	0309      	lsls	r1, r1, #12
 8005252:	430a      	orrs	r2, r1
 8005254:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	4b51      	ldr	r3, [pc, #324]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800525a:	4b50      	ldr	r3, [pc, #320]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800525c:	4952      	ldr	r1, [pc, #328]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525e:	400a      	ands	r2, r1
 8005260:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005262:	4b4e      	ldr	r3, [pc, #312]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4013      	ands	r3, r2
 8005270:	d014      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fe ff69 	bl	8004148 <HAL_GetTick>
 8005276:	0003      	movs	r3, r0
 8005278:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527a:	e009      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fe ff64 	bl	8004148 <HAL_GetTick>
 8005280:	0002      	movs	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	4a49      	ldr	r2, [pc, #292]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e081      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005290:	4b42      	ldr	r3, [pc, #264]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d0ef      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	4013      	ands	r3, r2
 80052a4:	d01f      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	23c0      	movs	r3, #192	@ 0xc0
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	401a      	ands	r2, r3
 80052b0:	23c0      	movs	r3, #192	@ 0xc0
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80052b8:	4b38      	ldr	r3, [pc, #224]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3c      	ldr	r2, [pc, #240]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052be:	4013      	ands	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	23c0      	movs	r3, #192	@ 0xc0
 80052c8:	039b      	lsls	r3, r3, #14
 80052ca:	401a      	ands	r2, r3
 80052cc:	4b33      	ldr	r3, [pc, #204]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052ce:	430a      	orrs	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	4b32      	ldr	r3, [pc, #200]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	23c0      	movs	r3, #192	@ 0xc0
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	401a      	ands	r2, r3
 80052e0:	4b2e      	ldr	r3, [pc, #184]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052e2:	430a      	orrs	r2, r1
 80052e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052e6:	2317      	movs	r3, #23
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f0:	4b2a      	ldr	r3, [pc, #168]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f4:	4b29      	ldr	r3, [pc, #164]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052f6:	492f      	ldr	r1, [pc, #188]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052f8:	400a      	ands	r2, r1
 80052fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	4013      	ands	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005306:	4b25      	ldr	r3, [pc, #148]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	2203      	movs	r2, #3
 800530c:	4393      	bics	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b21      	ldr	r3, [pc, #132]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005316:	430a      	orrs	r2, r1
 8005318:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005324:	4b1d      	ldr	r3, [pc, #116]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005328:	220c      	movs	r2, #12
 800532a:	4393      	bics	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005334:	430a      	orrs	r2, r1
 8005336:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2204      	movs	r2, #4
 800533e:	4013      	ands	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005342:	4b16      	ldr	r3, [pc, #88]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005346:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005348:	4013      	ands	r3, r2
 800534a:	0019      	movs	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	4b12      	ldr	r3, [pc, #72]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005352:	430a      	orrs	r2, r1
 8005354:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	4013      	ands	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005360:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005364:	4a15      	ldr	r2, [pc, #84]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005370:	430a      	orrs	r2, r1
 8005372:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2280      	movs	r2, #128	@ 0x80
 800537a:	4013      	ands	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	4a0f      	ldr	r2, [pc, #60]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005384:	4013      	ands	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	4b03      	ldr	r3, [pc, #12]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800538e:	430a      	orrs	r2, r1
 8005390:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b006      	add	sp, #24
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
 80053a4:	fffcffff 	.word	0xfffcffff
 80053a8:	fff7ffff 	.word	0xfff7ffff
 80053ac:	00001388 	.word	0x00001388
 80053b0:	ffcfffff 	.word	0xffcfffff
 80053b4:	efffffff 	.word	0xefffffff
 80053b8:	fffff3ff 	.word	0xfffff3ff
 80053bc:	ffffcfff 	.word	0xffffcfff
 80053c0:	fff3ffff 	.word	0xfff3ffff

080053c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e083      	b.n	80054de <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	2382      	movs	r3, #130	@ 0x82
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d009      	beq.n	80053fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	61da      	str	r2, [r3, #28]
 80053f0:	e005      	b.n	80053fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2251      	movs	r2, #81	@ 0x51
 8005408:	5c9b      	ldrb	r3, [r3, r2]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2250      	movs	r2, #80	@ 0x50
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	0018      	movs	r0, r3
 800541c:	f7fe fc9e 	bl	8003d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2251      	movs	r2, #81	@ 0x51
 8005424:	2102      	movs	r1, #2
 8005426:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	438a      	bics	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	2382      	movs	r3, #130	@ 0x82
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	401a      	ands	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6899      	ldr	r1, [r3, #8]
 8005446:	2384      	movs	r3, #132	@ 0x84
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	400b      	ands	r3, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	400b      	ands	r3, r1
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2102      	movs	r1, #2
 8005460:	400b      	ands	r3, r1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	2101      	movs	r1, #1
 800546a:	400b      	ands	r3, r1
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	400b      	ands	r3, r1
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2138      	movs	r1, #56	@ 0x38
 8005480:	400b      	ands	r3, r1
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	2180      	movs	r1, #128	@ 0x80
 800548a:	400b      	ands	r3, r1
 800548c:	431a      	orrs	r2, r3
 800548e:	0011      	movs	r1, r2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	019b      	lsls	r3, r3, #6
 8005498:	401a      	ands	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	2204      	movs	r2, #4
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	2210      	movs	r2, #16
 80054b4:	401a      	ands	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4907      	ldr	r1, [pc, #28]	@ (80054e8 <HAL_SPI_Init+0x124>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2251      	movs	r2, #81	@ 0x51
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b002      	add	sp, #8
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	fffff7ff 	.word	0xfffff7ff

080054ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	1dbb      	adds	r3, r7, #6
 80054fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fc:	231f      	movs	r3, #31
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2250      	movs	r2, #80	@ 0x50
 8005508:	5c9b      	ldrb	r3, [r3, r2]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Transmit+0x26>
 800550e:	2302      	movs	r3, #2
 8005510:	e145      	b.n	800579e <HAL_SPI_Transmit+0x2b2>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2250      	movs	r2, #80	@ 0x50
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551a:	f7fe fe15 	bl	8004148 <HAL_GetTick>
 800551e:	0003      	movs	r3, r0
 8005520:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005522:	2316      	movs	r3, #22
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	1dba      	adds	r2, r7, #6
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2251      	movs	r2, #81	@ 0x51
 8005530:	5c9b      	ldrb	r3, [r3, r2]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d004      	beq.n	8005542 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005538:	231f      	movs	r3, #31
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2202      	movs	r2, #2
 800553e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005540:	e126      	b.n	8005790 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_SPI_Transmit+0x64>
 8005548:	1dbb      	adds	r3, r7, #6
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005550:	231f      	movs	r3, #31
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
    goto error;
 8005558:	e11a      	b.n	8005790 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2251      	movs	r2, #81	@ 0x51
 800555e:	2103      	movs	r1, #3
 8005560:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1dba      	adds	r2, r7, #6
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1dba      	adds	r2, r7, #6
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d110      	bne.n	80055ca <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2140      	movs	r1, #64	@ 0x40
 80055b4:	438a      	bics	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2180      	movs	r1, #128	@ 0x80
 80055c4:	01c9      	lsls	r1, r1, #7
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2240      	movs	r2, #64	@ 0x40
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d007      	beq.n	80055e8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2140      	movs	r1, #64	@ 0x40
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	2380      	movs	r3, #128	@ 0x80
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d152      	bne.n	800569a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <HAL_SPI_Transmit+0x11a>
 80055fc:	2316      	movs	r3, #22
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d143      	bne.n	800568e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	881a      	ldrh	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	1c9a      	adds	r2, r3, #2
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800562a:	e030      	b.n	800568e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	2b02      	cmp	r3, #2
 8005638:	d112      	bne.n	8005660 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	881a      	ldrh	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	1c9a      	adds	r2, r3, #2
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800565e:	e016      	b.n	800568e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005660:	f7fe fd72 	bl	8004148 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d802      	bhi.n	8005676 <HAL_SPI_Transmit+0x18a>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	d102      	bne.n	800567c <HAL_SPI_Transmit+0x190>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800567c:	231f      	movs	r3, #31
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	2203      	movs	r2, #3
 8005682:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2251      	movs	r2, #81	@ 0x51
 8005688:	2101      	movs	r1, #1
 800568a:	5499      	strb	r1, [r3, r2]
          goto error;
 800568c:	e080      	b.n	8005790 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1c9      	bne.n	800562c <HAL_SPI_Transmit+0x140>
 8005698:	e053      	b.n	8005742 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <HAL_SPI_Transmit+0x1c0>
 80056a2:	2316      	movs	r3, #22
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d145      	bne.n	8005738 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056d2:	e031      	b.n	8005738 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2202      	movs	r2, #2
 80056dc:	4013      	ands	r3, r2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d113      	bne.n	800570a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005708:	e016      	b.n	8005738 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570a:	f7fe fd1d 	bl	8004148 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d802      	bhi.n	8005720 <HAL_SPI_Transmit+0x234>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	d102      	bne.n	8005726 <HAL_SPI_Transmit+0x23a>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005726:	231f      	movs	r3, #31
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2203      	movs	r2, #3
 800572c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2251      	movs	r2, #81	@ 0x51
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]
          goto error;
 8005736:	e02b      	b.n	8005790 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1c8      	bne.n	80056d4 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fc1f 	bl	8005f8c <SPI_EndRxTxTransaction>
 800574e:	1e03      	subs	r3, r0, #0
 8005750:	d002      	beq.n	8005758 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800577e:	231f      	movs	r3, #31
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e003      	b.n	8005790 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2251      	movs	r2, #81	@ 0x51
 800578c:	2101      	movs	r1, #1
 800578e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2250      	movs	r2, #80	@ 0x50
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005798:	231f      	movs	r3, #31
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	781b      	ldrb	r3, [r3, #0]
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b008      	add	sp, #32
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b089      	sub	sp, #36	@ 0x24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	1dbb      	adds	r3, r7, #6
 80057b6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057b8:	2117      	movs	r1, #23
 80057ba:	187b      	adds	r3, r7, r1
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2251      	movs	r2, #81	@ 0x51
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d003      	beq.n	80057d4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	2202      	movs	r2, #2
 80057d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80057d2:	e109      	b.n	80059e8 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	2382      	movs	r3, #130	@ 0x82
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	429a      	cmp	r2, r3
 80057de:	d113      	bne.n	8005808 <HAL_SPI_Receive+0x60>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2251      	movs	r2, #81	@ 0x51
 80057ec:	2104      	movs	r1, #4
 80057ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057f0:	1dbb      	adds	r3, r7, #6
 80057f2:	881c      	ldrh	r4, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	0023      	movs	r3, r4
 8005800:	f000 f900 	bl	8005a04 <HAL_SPI_TransmitReceive>
 8005804:	0003      	movs	r3, r0
 8005806:	e0f6      	b.n	80059f6 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2250      	movs	r2, #80	@ 0x50
 800580c:	5c9b      	ldrb	r3, [r3, r2]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Receive+0x6e>
 8005812:	2302      	movs	r3, #2
 8005814:	e0ef      	b.n	80059f6 <HAL_SPI_Receive+0x24e>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2250      	movs	r2, #80	@ 0x50
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800581e:	f7fe fc93 	bl	8004148 <HAL_GetTick>
 8005822:	0003      	movs	r3, r0
 8005824:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_SPI_Receive+0x8c>
 800582c:	1dbb      	adds	r3, r7, #6
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005834:	2317      	movs	r3, #23
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
    goto error;
 800583c:	e0d4      	b.n	80059e8 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2251      	movs	r2, #81	@ 0x51
 8005842:	2104      	movs	r1, #4
 8005844:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1dba      	adds	r2, r7, #6
 8005856:	8812      	ldrh	r2, [r2, #0]
 8005858:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1dba      	adds	r2, r7, #6
 800585e:	8812      	ldrh	r2, [r2, #0]
 8005860:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	429a      	cmp	r2, r3
 800588a:	d10f      	bne.n	80058ac <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2140      	movs	r1, #64	@ 0x40
 8005898:	438a      	bics	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4956      	ldr	r1, [pc, #344]	@ (8005a00 <HAL_SPI_Receive+0x258>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2240      	movs	r2, #64	@ 0x40
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b40      	cmp	r3, #64	@ 0x40
 80058b8:	d007      	beq.n	80058ca <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2140      	movs	r1, #64	@ 0x40
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d000      	beq.n	80058d4 <HAL_SPI_Receive+0x12c>
 80058d2:	e06c      	b.n	80059ae <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058d4:	e033      	b.n	800593e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d115      	bne.n	8005910 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	001a      	movs	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800590e:	e016      	b.n	800593e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005910:	f7fe fc1a 	bl	8004148 <HAL_GetTick>
 8005914:	0002      	movs	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d802      	bhi.n	8005926 <HAL_SPI_Receive+0x17e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_SPI_Receive+0x184>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 800592c:	2317      	movs	r3, #23
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2203      	movs	r2, #3
 8005932:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2251      	movs	r2, #81	@ 0x51
 8005938:	2101      	movs	r1, #1
 800593a:	5499      	strb	r1, [r3, r2]
          goto error;
 800593c:	e054      	b.n	80059e8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1c6      	bne.n	80058d6 <HAL_SPI_Receive+0x12e>
 8005948:	e036      	b.n	80059b8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2201      	movs	r2, #1
 8005952:	4013      	ands	r3, r2
 8005954:	2b01      	cmp	r3, #1
 8005956:	d113      	bne.n	8005980 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	b292      	uxth	r2, r2
 8005964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800597e:	e016      	b.n	80059ae <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005980:	f7fe fbe2 	bl	8004148 <HAL_GetTick>
 8005984:	0002      	movs	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d802      	bhi.n	8005996 <HAL_SPI_Receive+0x1ee>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	d102      	bne.n	800599c <HAL_SPI_Receive+0x1f4>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d108      	bne.n	80059ae <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 800599c:	2317      	movs	r3, #23
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	2203      	movs	r2, #3
 80059a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2251      	movs	r2, #81	@ 0x51
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80059ac:	e01c      	b.n	80059e8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1c8      	bne.n	800594a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 fa7a 	bl	8005eb8 <SPI_EndRxTransaction>
 80059c4:	1e03      	subs	r3, r0, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80059d6:	2317      	movs	r3, #23
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e003      	b.n	80059e8 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2251      	movs	r2, #81	@ 0x51
 80059e4:	2101      	movs	r1, #1
 80059e6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2250      	movs	r2, #80	@ 0x50
 80059ec:	2100      	movs	r1, #0
 80059ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80059f0:	2317      	movs	r3, #23
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b007      	add	sp, #28
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	ffffbfff 	.word	0xffffbfff

08005a04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	@ 0x30
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	001a      	movs	r2, r3
 8005a12:	1cbb      	adds	r3, r7, #2
 8005a14:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a16:	2301      	movs	r3, #1
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a1a:	232b      	movs	r3, #43	@ 0x2b
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2250      	movs	r2, #80	@ 0x50
 8005a26:	5c9b      	ldrb	r3, [r3, r2]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x2c>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e1b0      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x38e>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2250      	movs	r2, #80	@ 0x50
 8005a34:	2101      	movs	r1, #1
 8005a36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a38:	f7fe fb86 	bl	8004148 <HAL_GetTick>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a40:	2023      	movs	r0, #35	@ 0x23
 8005a42:	183b      	adds	r3, r7, r0
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	2151      	movs	r1, #81	@ 0x51
 8005a48:	5c52      	ldrb	r2, [r2, r1]
 8005a4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a52:	231a      	movs	r3, #26
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	1cba      	adds	r2, r7, #2
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d011      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x84>
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	2382      	movs	r3, #130	@ 0x82
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d107      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x7a>
 8005a76:	183b      	adds	r3, r7, r0
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d004      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005a7e:	232b      	movs	r3, #43	@ 0x2b
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2202      	movs	r2, #2
 8005a84:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a86:	e17d      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x98>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x98>
 8005a94:	1cbb      	adds	r3, r7, #2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005a9c:	232b      	movs	r3, #43	@ 0x2b
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005aa4:	e16e      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2251      	movs	r2, #81	@ 0x51
 8005aaa:	5c9b      	ldrb	r3, [r3, r2]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d003      	beq.n	8005aba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2251      	movs	r2, #81	@ 0x51
 8005ab6:	2105      	movs	r1, #5
 8005ab8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1cba      	adds	r2, r7, #2
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1cba      	adds	r2, r7, #2
 8005ad2:	8812      	ldrh	r2, [r2, #0]
 8005ad4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1cba      	adds	r2, r7, #2
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1cba      	adds	r2, r7, #2
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2240      	movs	r2, #64	@ 0x40
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b40      	cmp	r3, #64	@ 0x40
 8005b04:	d007      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2140      	movs	r1, #64	@ 0x40
 8005b12:	430a      	orrs	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d000      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x120>
 8005b22:	e07f      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x134>
 8005b2c:	231a      	movs	r3, #26
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d000      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x134>
 8005b36:	e06a      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	1c9a      	adds	r2, r3, #2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5c:	e057      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2202      	movs	r2, #2
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x1a0>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x1a0>
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d113      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2201      	movs	r2, #1
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d119      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x1e2>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d014      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be2:	2301      	movs	r3, #1
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005be6:	f7fe faaf 	bl	8004148 <HAL_GetTick>
 8005bea:	0002      	movs	r2, r0
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d80b      	bhi.n	8005c0e <HAL_SPI_TransmitReceive+0x20a>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	d008      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8005bfc:	232b      	movs	r3, #43	@ 0x2b
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2203      	movs	r2, #3
 8005c02:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2251      	movs	r2, #81	@ 0x51
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5499      	strb	r1, [r3, r2]
        goto error;
 8005c0c:	e0ba      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1a2      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x15a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d19d      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x15a>
 8005c22:	e083      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x234>
 8005c2c:	231a      	movs	r3, #26
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d000      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x234>
 8005c36:	e06f      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5e:	e05b      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d11c      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x2a4>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d017      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x2a4>
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d114      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d119      	bne.n	8005cea <HAL_SPI_TransmitReceive+0x2e6>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d014      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cea:	f7fe fa2d 	bl	8004148 <HAL_GetTick>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d802      	bhi.n	8005d00 <HAL_SPI_TransmitReceive+0x2fc>
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x302>
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8005d06:	232b      	movs	r3, #43	@ 0x2b
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2251      	movs	r2, #81	@ 0x51
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]
        goto error;
 8005d16:	e035      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d19e      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x25c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d199      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 f92a 	bl	8005f8c <SPI_EndRxTxTransaction>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005d3c:	232b      	movs	r3, #43	@ 0x2b
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005d4a:	e01b      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005d72:	232b      	movs	r3, #43	@ 0x2b
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e003      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2251      	movs	r2, #81	@ 0x51
 8005d80:	2101      	movs	r1, #1
 8005d82:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2250      	movs	r2, #80	@ 0x50
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d8c:	232b      	movs	r3, #43	@ 0x2b
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	781b      	ldrb	r3, [r3, #0]
}
 8005d92:	0018      	movs	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b00c      	add	sp, #48	@ 0x30
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	1dfb      	adds	r3, r7, #7
 8005daa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dac:	f7fe f9cc 	bl	8004148 <HAL_GetTick>
 8005db0:	0002      	movs	r2, r0
 8005db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	18d3      	adds	r3, r2, r3
 8005dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dbc:	f7fe f9c4 	bl	8004148 <HAL_GetTick>
 8005dc0:	0003      	movs	r3, r0
 8005dc2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	015b      	lsls	r3, r3, #5
 8005dca:	0d1b      	lsrs	r3, r3, #20
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	4353      	muls	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dd2:	e058      	b.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	d055      	beq.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dda:	f7fe f9b5 	bl	8004148 <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d902      	bls.n	8005df0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d142      	bne.n	8005e76 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	21e0      	movs	r1, #224	@ 0xe0
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	2382      	movs	r3, #130	@ 0x82
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d113      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d005      	beq.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	2380      	movs	r3, #128	@ 0x80
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d107      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2140      	movs	r1, #64	@ 0x40
 8005e30:	438a      	bics	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	019b      	lsls	r3, r3, #6
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d110      	bne.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	491a      	ldr	r1, [pc, #104]	@ (8005eb4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2180      	movs	r1, #128	@ 0x80
 8005e5c:	0189      	lsls	r1, r1, #6
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2251      	movs	r2, #81	@ 0x51
 8005e66:	2101      	movs	r1, #1
 8005e68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2250      	movs	r2, #80	@ 0x50
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e017      	b.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	425a      	negs	r2, r3
 8005e96:	4153      	adcs	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d197      	bne.n	8005dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b008      	add	sp, #32
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	20000000 	.word	0x20000000
 8005eb4:	ffffdfff 	.word	0xffffdfff

08005eb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	2382      	movs	r3, #130	@ 0x82
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d113      	bne.n	8005ef8 <SPI_EndRxTransaction+0x40>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	2380      	movs	r3, #128	@ 0x80
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d005      	beq.n	8005ee8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d107      	bne.n	8005ef8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2140      	movs	r1, #64	@ 0x40
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	2382      	movs	r3, #130	@ 0x82
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d12b      	bne.n	8005f5c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d012      	beq.n	8005f36 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	0013      	movs	r3, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2180      	movs	r1, #128	@ 0x80
 8005f1e:	f7ff ff3d 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005f22:	1e03      	subs	r3, r0, #0
 8005f24:	d02d      	beq.n	8005f82 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e026      	b.n	8005f84 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	0013      	movs	r3, r2
 8005f40:	2200      	movs	r2, #0
 8005f42:	2101      	movs	r1, #1
 8005f44:	f7ff ff2a 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005f48:	1e03      	subs	r3, r0, #0
 8005f4a:	d01a      	beq.n	8005f82 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	2220      	movs	r2, #32
 8005f52:	431a      	orrs	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e013      	b.n	8005f84 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	0013      	movs	r3, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	2101      	movs	r1, #1
 8005f6a:	f7ff ff17 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005f6e:	1e03      	subs	r3, r0, #0
 8005f70:	d007      	beq.n	8005f82 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f76:	2220      	movs	r2, #32
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e000      	b.n	8005f84 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b004      	add	sp, #16
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f98:	4b1d      	ldr	r3, [pc, #116]	@ (8006010 <SPI_EndRxTxTransaction+0x84>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	491d      	ldr	r1, [pc, #116]	@ (8006014 <SPI_EndRxTxTransaction+0x88>)
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7fa f8ce 	bl	8000140 <__udivsi3>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	0013      	movs	r3, r2
 8005faa:	015b      	lsls	r3, r3, #5
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	2382      	movs	r3, #130	@ 0x82
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d112      	bne.n	8005fe8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	0013      	movs	r3, r2
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	f7ff fee4 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d016      	beq.n	8006006 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	2220      	movs	r2, #32
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e00f      	b.n	8006008 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2280      	movs	r2, #128	@ 0x80
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b80      	cmp	r3, #128	@ 0x80
 8006000:	d0f2      	beq.n	8005fe8 <SPI_EndRxTxTransaction+0x5c>
 8006002:	e000      	b.n	8006006 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006004:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000000 	.word	0x20000000
 8006014:	016e3600 	.word	0x016e3600

08006018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e044      	b.n	80060b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2278      	movs	r2, #120	@ 0x78
 8006036:	2100      	movs	r1, #0
 8006038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f7fd fed1 	bl	8003de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2224      	movs	r2, #36	@ 0x24
 8006046:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	438a      	bics	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f8d0 	bl	8006200 <UART_SetConfig>
 8006060:	0003      	movs	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e024      	b.n	80060b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fb47 	bl	8006708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	490d      	ldr	r1, [pc, #52]	@ (80060bc <HAL_UART_Init+0xa4>)
 8006086:	400a      	ands	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	212a      	movs	r1, #42	@ 0x2a
 8006096:	438a      	bics	r2, r1
 8006098:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f000 fbdf 	bl	8006870 <UART_CheckIdleState>
 80060b2:	0003      	movs	r3, r0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	ffffb7ff 	.word	0xffffb7ff

080060c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	@ 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d000      	beq.n	80060da <HAL_UART_Transmit+0x1a>
 80060d8:	e08c      	b.n	80061f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_UART_Transmit+0x28>
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e084      	b.n	80061f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	015b      	lsls	r3, r3, #5
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d109      	bne.n	800610c <HAL_UART_Transmit+0x4c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2201      	movs	r2, #1
 8006104:	4013      	ands	r3, r2
 8006106:	d001      	beq.n	800610c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e074      	b.n	80061f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2284      	movs	r2, #132	@ 0x84
 8006110:	2100      	movs	r1, #0
 8006112:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2221      	movs	r2, #33	@ 0x21
 8006118:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800611a:	f7fe f815 	bl	8004148 <HAL_GetTick>
 800611e:	0003      	movs	r3, r0
 8006120:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1dba      	adds	r2, r7, #6
 8006126:	2150      	movs	r1, #80	@ 0x50
 8006128:	8812      	ldrh	r2, [r2, #0]
 800612a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1dba      	adds	r2, r7, #6
 8006130:	2152      	movs	r1, #82	@ 0x52
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	2380      	movs	r3, #128	@ 0x80
 800613c:	015b      	lsls	r3, r3, #5
 800613e:	429a      	cmp	r2, r3
 8006140:	d108      	bne.n	8006154 <HAL_UART_Transmit+0x94>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e003      	b.n	800615c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800615c:	e02f      	b.n	80061be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	0013      	movs	r3, r2
 8006168:	2200      	movs	r2, #0
 800616a:	2180      	movs	r1, #128	@ 0x80
 800616c:	f000 fc28 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 8006170:	1e03      	subs	r3, r0, #0
 8006172:	d004      	beq.n	800617e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03b      	b.n	80061f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	001a      	movs	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	05d2      	lsls	r2, r2, #23
 8006190:	0dd2      	lsrs	r2, r2, #23
 8006192:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	3302      	adds	r3, #2
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e007      	b.n	80061ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3301      	adds	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2252      	movs	r2, #82	@ 0x52
 80061b0:	5a9b      	ldrh	r3, [r3, r2]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b299      	uxth	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2252      	movs	r2, #82	@ 0x52
 80061bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2252      	movs	r2, #82	@ 0x52
 80061c2:	5a9b      	ldrh	r3, [r3, r2]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1c9      	bne.n	800615e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	0013      	movs	r3, r2
 80061d4:	2200      	movs	r2, #0
 80061d6:	2140      	movs	r1, #64	@ 0x40
 80061d8:	f000 fbf2 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 80061dc:	1e03      	subs	r3, r0, #0
 80061de:	d004      	beq.n	80061ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e005      	b.n	80061f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80061f4:	2302      	movs	r3, #2
  }
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b008      	add	sp, #32
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	b5b0      	push	{r4, r5, r7, lr}
 8006202:	b08e      	sub	sp, #56	@ 0x38
 8006204:	af00      	add	r7, sp, #0
 8006206:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006208:	231a      	movs	r3, #26
 800620a:	2218      	movs	r2, #24
 800620c:	189b      	adds	r3, r3, r2
 800620e:	19db      	adds	r3, r3, r7
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	431a      	orrs	r2, r3
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4ac6      	ldr	r2, [pc, #792]	@ (800654c <UART_SetConfig+0x34c>)
 8006234:	4013      	ands	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623e:	430a      	orrs	r2, r1
 8006240:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4ac1      	ldr	r2, [pc, #772]	@ (8006550 <UART_SetConfig+0x350>)
 800624a:	4013      	ands	r3, r2
 800624c:	0019      	movs	r1, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4abb      	ldr	r2, [pc, #748]	@ (8006554 <UART_SetConfig+0x354>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006270:	4313      	orrs	r3, r2
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	4ab7      	ldr	r2, [pc, #732]	@ (8006558 <UART_SetConfig+0x358>)
 800627c:	4013      	ands	r3, r2
 800627e:	0019      	movs	r1, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4ab3      	ldr	r2, [pc, #716]	@ (800655c <UART_SetConfig+0x35c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d131      	bne.n	80062f8 <UART_SetConfig+0xf8>
 8006294:	4bb2      	ldr	r3, [pc, #712]	@ (8006560 <UART_SetConfig+0x360>)
 8006296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006298:	2203      	movs	r2, #3
 800629a:	4013      	ands	r3, r2
 800629c:	2b03      	cmp	r3, #3
 800629e:	d01d      	beq.n	80062dc <UART_SetConfig+0xdc>
 80062a0:	d823      	bhi.n	80062ea <UART_SetConfig+0xea>
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d00c      	beq.n	80062c0 <UART_SetConfig+0xc0>
 80062a6:	d820      	bhi.n	80062ea <UART_SetConfig+0xea>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <UART_SetConfig+0xb2>
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d00e      	beq.n	80062ce <UART_SetConfig+0xce>
 80062b0:	e01b      	b.n	80062ea <UART_SetConfig+0xea>
 80062b2:	231b      	movs	r3, #27
 80062b4:	2218      	movs	r2, #24
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e09c      	b.n	80063fa <UART_SetConfig+0x1fa>
 80062c0:	231b      	movs	r3, #27
 80062c2:	2218      	movs	r2, #24
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	19db      	adds	r3, r3, r7
 80062c8:	2202      	movs	r2, #2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e095      	b.n	80063fa <UART_SetConfig+0x1fa>
 80062ce:	231b      	movs	r3, #27
 80062d0:	2218      	movs	r2, #24
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	2204      	movs	r2, #4
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e08e      	b.n	80063fa <UART_SetConfig+0x1fa>
 80062dc:	231b      	movs	r3, #27
 80062de:	2218      	movs	r2, #24
 80062e0:	189b      	adds	r3, r3, r2
 80062e2:	19db      	adds	r3, r3, r7
 80062e4:	2208      	movs	r2, #8
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e087      	b.n	80063fa <UART_SetConfig+0x1fa>
 80062ea:	231b      	movs	r3, #27
 80062ec:	2218      	movs	r2, #24
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	2210      	movs	r2, #16
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e080      	b.n	80063fa <UART_SetConfig+0x1fa>
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a99      	ldr	r2, [pc, #612]	@ (8006564 <UART_SetConfig+0x364>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d131      	bne.n	8006366 <UART_SetConfig+0x166>
 8006302:	4b97      	ldr	r3, [pc, #604]	@ (8006560 <UART_SetConfig+0x360>)
 8006304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006306:	220c      	movs	r2, #12
 8006308:	4013      	ands	r3, r2
 800630a:	2b0c      	cmp	r3, #12
 800630c:	d01d      	beq.n	800634a <UART_SetConfig+0x14a>
 800630e:	d823      	bhi.n	8006358 <UART_SetConfig+0x158>
 8006310:	2b08      	cmp	r3, #8
 8006312:	d00c      	beq.n	800632e <UART_SetConfig+0x12e>
 8006314:	d820      	bhi.n	8006358 <UART_SetConfig+0x158>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <UART_SetConfig+0x120>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00e      	beq.n	800633c <UART_SetConfig+0x13c>
 800631e:	e01b      	b.n	8006358 <UART_SetConfig+0x158>
 8006320:	231b      	movs	r3, #27
 8006322:	2218      	movs	r2, #24
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e065      	b.n	80063fa <UART_SetConfig+0x1fa>
 800632e:	231b      	movs	r3, #27
 8006330:	2218      	movs	r2, #24
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	2202      	movs	r2, #2
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e05e      	b.n	80063fa <UART_SetConfig+0x1fa>
 800633c:	231b      	movs	r3, #27
 800633e:	2218      	movs	r2, #24
 8006340:	189b      	adds	r3, r3, r2
 8006342:	19db      	adds	r3, r3, r7
 8006344:	2204      	movs	r2, #4
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e057      	b.n	80063fa <UART_SetConfig+0x1fa>
 800634a:	231b      	movs	r3, #27
 800634c:	2218      	movs	r2, #24
 800634e:	189b      	adds	r3, r3, r2
 8006350:	19db      	adds	r3, r3, r7
 8006352:	2208      	movs	r2, #8
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e050      	b.n	80063fa <UART_SetConfig+0x1fa>
 8006358:	231b      	movs	r3, #27
 800635a:	2218      	movs	r2, #24
 800635c:	189b      	adds	r3, r3, r2
 800635e:	19db      	adds	r3, r3, r7
 8006360:	2210      	movs	r2, #16
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e049      	b.n	80063fa <UART_SetConfig+0x1fa>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a7a      	ldr	r2, [pc, #488]	@ (8006554 <UART_SetConfig+0x354>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d13e      	bne.n	80063ee <UART_SetConfig+0x1ee>
 8006370:	4b7b      	ldr	r3, [pc, #492]	@ (8006560 <UART_SetConfig+0x360>)
 8006372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006374:	23c0      	movs	r3, #192	@ 0xc0
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	4013      	ands	r3, r2
 800637a:	22c0      	movs	r2, #192	@ 0xc0
 800637c:	0112      	lsls	r2, r2, #4
 800637e:	4293      	cmp	r3, r2
 8006380:	d027      	beq.n	80063d2 <UART_SetConfig+0x1d2>
 8006382:	22c0      	movs	r2, #192	@ 0xc0
 8006384:	0112      	lsls	r2, r2, #4
 8006386:	4293      	cmp	r3, r2
 8006388:	d82a      	bhi.n	80063e0 <UART_SetConfig+0x1e0>
 800638a:	2280      	movs	r2, #128	@ 0x80
 800638c:	0112      	lsls	r2, r2, #4
 800638e:	4293      	cmp	r3, r2
 8006390:	d011      	beq.n	80063b6 <UART_SetConfig+0x1b6>
 8006392:	2280      	movs	r2, #128	@ 0x80
 8006394:	0112      	lsls	r2, r2, #4
 8006396:	4293      	cmp	r3, r2
 8006398:	d822      	bhi.n	80063e0 <UART_SetConfig+0x1e0>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <UART_SetConfig+0x1a8>
 800639e:	2280      	movs	r2, #128	@ 0x80
 80063a0:	00d2      	lsls	r2, r2, #3
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <UART_SetConfig+0x1c4>
 80063a6:	e01b      	b.n	80063e0 <UART_SetConfig+0x1e0>
 80063a8:	231b      	movs	r3, #27
 80063aa:	2218      	movs	r2, #24
 80063ac:	189b      	adds	r3, r3, r2
 80063ae:	19db      	adds	r3, r3, r7
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e021      	b.n	80063fa <UART_SetConfig+0x1fa>
 80063b6:	231b      	movs	r3, #27
 80063b8:	2218      	movs	r2, #24
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	19db      	adds	r3, r3, r7
 80063be:	2202      	movs	r2, #2
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	e01a      	b.n	80063fa <UART_SetConfig+0x1fa>
 80063c4:	231b      	movs	r3, #27
 80063c6:	2218      	movs	r2, #24
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	19db      	adds	r3, r3, r7
 80063cc:	2204      	movs	r2, #4
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	e013      	b.n	80063fa <UART_SetConfig+0x1fa>
 80063d2:	231b      	movs	r3, #27
 80063d4:	2218      	movs	r2, #24
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	19db      	adds	r3, r3, r7
 80063da:	2208      	movs	r2, #8
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e00c      	b.n	80063fa <UART_SetConfig+0x1fa>
 80063e0:	231b      	movs	r3, #27
 80063e2:	2218      	movs	r2, #24
 80063e4:	189b      	adds	r3, r3, r2
 80063e6:	19db      	adds	r3, r3, r7
 80063e8:	2210      	movs	r2, #16
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e005      	b.n	80063fa <UART_SetConfig+0x1fa>
 80063ee:	231b      	movs	r3, #27
 80063f0:	2218      	movs	r2, #24
 80063f2:	189b      	adds	r3, r3, r2
 80063f4:	19db      	adds	r3, r3, r7
 80063f6:	2210      	movs	r2, #16
 80063f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a55      	ldr	r2, [pc, #340]	@ (8006554 <UART_SetConfig+0x354>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d000      	beq.n	8006406 <UART_SetConfig+0x206>
 8006404:	e084      	b.n	8006510 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006406:	231b      	movs	r3, #27
 8006408:	2218      	movs	r2, #24
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d01d      	beq.n	8006450 <UART_SetConfig+0x250>
 8006414:	dc20      	bgt.n	8006458 <UART_SetConfig+0x258>
 8006416:	2b04      	cmp	r3, #4
 8006418:	d015      	beq.n	8006446 <UART_SetConfig+0x246>
 800641a:	dc1d      	bgt.n	8006458 <UART_SetConfig+0x258>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <UART_SetConfig+0x226>
 8006420:	2b02      	cmp	r3, #2
 8006422:	d005      	beq.n	8006430 <UART_SetConfig+0x230>
 8006424:	e018      	b.n	8006458 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006426:	f7fe fe67 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 800642a:	0003      	movs	r3, r0
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800642e:	e01c      	b.n	800646a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006430:	4b4b      	ldr	r3, [pc, #300]	@ (8006560 <UART_SetConfig+0x360>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2210      	movs	r2, #16
 8006436:	4013      	ands	r3, r2
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800643a:	4b4b      	ldr	r3, [pc, #300]	@ (8006568 <UART_SetConfig+0x368>)
 800643c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800643e:	e014      	b.n	800646a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006440:	4b4a      	ldr	r3, [pc, #296]	@ (800656c <UART_SetConfig+0x36c>)
 8006442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006444:	e011      	b.n	800646a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fe fda7 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800644a:	0003      	movs	r3, r0
 800644c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800644e:	e00c      	b.n	800646a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006450:	2380      	movs	r3, #128	@ 0x80
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006456:	e008      	b.n	800646a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800645c:	231a      	movs	r3, #26
 800645e:	2218      	movs	r2, #24
 8006460:	189b      	adds	r3, r3, r2
 8006462:	19db      	adds	r3, r3, r7
 8006464:	2201      	movs	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
        break;
 8006468:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d100      	bne.n	8006472 <UART_SetConfig+0x272>
 8006470:	e132      	b.n	80066d8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	0013      	movs	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	189b      	adds	r3, r3, r2
 800647c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647e:	429a      	cmp	r2, r3
 8006480:	d305      	bcc.n	800648e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800648a:	429a      	cmp	r2, r3
 800648c:	d906      	bls.n	800649c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800648e:	231a      	movs	r3, #26
 8006490:	2218      	movs	r2, #24
 8006492:	189b      	adds	r3, r3, r2
 8006494:	19db      	adds	r3, r3, r7
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e11d      	b.n	80066d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	6939      	ldr	r1, [r7, #16]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	000b      	movs	r3, r1
 80064aa:	0e1b      	lsrs	r3, r3, #24
 80064ac:	0010      	movs	r0, r2
 80064ae:	0205      	lsls	r5, r0, #8
 80064b0:	431d      	orrs	r5, r3
 80064b2:	000b      	movs	r3, r1
 80064b4:	021c      	lsls	r4, r3, #8
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68b8      	ldr	r0, [r7, #8]
 80064c4:	68f9      	ldr	r1, [r7, #12]
 80064c6:	1900      	adds	r0, r0, r4
 80064c8:	4169      	adcs	r1, r5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f7fa f820 	bl	800051c <__aeabi_uldivmod>
 80064dc:	0002      	movs	r2, r0
 80064de:	000b      	movs	r3, r1
 80064e0:	0013      	movs	r3, r2
 80064e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e6:	23c0      	movs	r3, #192	@ 0xc0
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d309      	bcc.n	8006502 <UART_SetConfig+0x302>
 80064ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064f0:	2380      	movs	r3, #128	@ 0x80
 80064f2:	035b      	lsls	r3, r3, #13
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d204      	bcs.n	8006502 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064fe:	60da      	str	r2, [r3, #12]
 8006500:	e0ea      	b.n	80066d8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006502:	231a      	movs	r3, #26
 8006504:	2218      	movs	r2, #24
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e0e3      	b.n	80066d8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	429a      	cmp	r2, r3
 800651a:	d000      	beq.n	800651e <UART_SetConfig+0x31e>
 800651c:	e085      	b.n	800662a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800651e:	231b      	movs	r3, #27
 8006520:	2218      	movs	r2, #24
 8006522:	189b      	adds	r3, r3, r2
 8006524:	19db      	adds	r3, r3, r7
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d837      	bhi.n	800659c <UART_SetConfig+0x39c>
 800652c:	009a      	lsls	r2, r3, #2
 800652e:	4b10      	ldr	r3, [pc, #64]	@ (8006570 <UART_SetConfig+0x370>)
 8006530:	18d3      	adds	r3, r2, r3
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006536:	f7fe fddf 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 800653a:	0003      	movs	r3, r0
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800653e:	e036      	b.n	80065ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006540:	f7fe fdf0 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 8006544:	0003      	movs	r3, r0
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006548:	e031      	b.n	80065ae <UART_SetConfig+0x3ae>
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	efff69f3 	.word	0xefff69f3
 8006550:	ffffcfff 	.word	0xffffcfff
 8006554:	40004800 	.word	0x40004800
 8006558:	fffff4ff 	.word	0xfffff4ff
 800655c:	40013800 	.word	0x40013800
 8006560:	40021000 	.word	0x40021000
 8006564:	40004400 	.word	0x40004400
 8006568:	003d0900 	.word	0x003d0900
 800656c:	00f42400 	.word	0x00f42400
 8006570:	0800b7e0 	.word	0x0800b7e0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006574:	4b60      	ldr	r3, [pc, #384]	@ (80066f8 <UART_SetConfig+0x4f8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2210      	movs	r2, #16
 800657a:	4013      	ands	r3, r2
 800657c:	d002      	beq.n	8006584 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800657e:	4b5f      	ldr	r3, [pc, #380]	@ (80066fc <UART_SetConfig+0x4fc>)
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006582:	e014      	b.n	80065ae <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006584:	4b5e      	ldr	r3, [pc, #376]	@ (8006700 <UART_SetConfig+0x500>)
 8006586:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006588:	e011      	b.n	80065ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658a:	f7fe fd05 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800658e:	0003      	movs	r3, r0
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006592:	e00c      	b.n	80065ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800659a:	e008      	b.n	80065ae <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80065a0:	231a      	movs	r3, #26
 80065a2:	2218      	movs	r2, #24
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	19db      	adds	r3, r3, r7
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
        break;
 80065ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d100      	bne.n	80065b6 <UART_SetConfig+0x3b6>
 80065b4:	e090      	b.n	80066d8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	005a      	lsls	r2, r3, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	18d2      	adds	r2, r2, r3
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	0019      	movs	r1, r3
 80065c8:	0010      	movs	r0, r2
 80065ca:	f7f9 fdb9 	bl	8000140 <__udivsi3>
 80065ce:	0003      	movs	r3, r0
 80065d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	2b0f      	cmp	r3, #15
 80065d6:	d921      	bls.n	800661c <UART_SetConfig+0x41c>
 80065d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065da:	2380      	movs	r3, #128	@ 0x80
 80065dc:	025b      	lsls	r3, r3, #9
 80065de:	429a      	cmp	r2, r3
 80065e0:	d21c      	bcs.n	800661c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	200e      	movs	r0, #14
 80065e8:	2418      	movs	r4, #24
 80065ea:	1903      	adds	r3, r0, r4
 80065ec:	19db      	adds	r3, r3, r7
 80065ee:	210f      	movs	r1, #15
 80065f0:	438a      	bics	r2, r1
 80065f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2207      	movs	r2, #7
 80065fc:	4013      	ands	r3, r2
 80065fe:	b299      	uxth	r1, r3
 8006600:	1903      	adds	r3, r0, r4
 8006602:	19db      	adds	r3, r3, r7
 8006604:	1902      	adds	r2, r0, r4
 8006606:	19d2      	adds	r2, r2, r7
 8006608:	8812      	ldrh	r2, [r2, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1902      	adds	r2, r0, r4
 8006614:	19d2      	adds	r2, r2, r7
 8006616:	8812      	ldrh	r2, [r2, #0]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e05d      	b.n	80066d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800661c:	231a      	movs	r3, #26
 800661e:	2218      	movs	r2, #24
 8006620:	189b      	adds	r3, r3, r2
 8006622:	19db      	adds	r3, r3, r7
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e056      	b.n	80066d8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800662a:	231b      	movs	r3, #27
 800662c:	2218      	movs	r2, #24
 800662e:	189b      	adds	r3, r3, r2
 8006630:	19db      	adds	r3, r3, r7
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d822      	bhi.n	800667e <UART_SetConfig+0x47e>
 8006638:	009a      	lsls	r2, r3, #2
 800663a:	4b32      	ldr	r3, [pc, #200]	@ (8006704 <UART_SetConfig+0x504>)
 800663c:	18d3      	adds	r3, r2, r3
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006642:	f7fe fd59 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8006646:	0003      	movs	r3, r0
 8006648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800664a:	e021      	b.n	8006690 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7fe fd6a 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 8006650:	0003      	movs	r3, r0
 8006652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006654:	e01c      	b.n	8006690 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006656:	4b28      	ldr	r3, [pc, #160]	@ (80066f8 <UART_SetConfig+0x4f8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2210      	movs	r2, #16
 800665c:	4013      	ands	r3, r2
 800665e:	d002      	beq.n	8006666 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006660:	4b26      	ldr	r3, [pc, #152]	@ (80066fc <UART_SetConfig+0x4fc>)
 8006662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006664:	e014      	b.n	8006690 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006666:	4b26      	ldr	r3, [pc, #152]	@ (8006700 <UART_SetConfig+0x500>)
 8006668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800666a:	e011      	b.n	8006690 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666c:	f7fe fc94 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8006670:	0003      	movs	r3, r0
 8006672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006674:	e00c      	b.n	8006690 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800667c:	e008      	b.n	8006690 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006682:	231a      	movs	r3, #26
 8006684:	2218      	movs	r2, #24
 8006686:	189b      	adds	r3, r3, r2
 8006688:	19db      	adds	r3, r3, r7
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
        break;
 800668e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	085a      	lsrs	r2, r3, #1
 800669c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669e:	18d2      	adds	r2, r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	0019      	movs	r1, r3
 80066a6:	0010      	movs	r0, r2
 80066a8:	f7f9 fd4a 	bl	8000140 <__udivsi3>
 80066ac:	0003      	movs	r3, r0
 80066ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d90a      	bls.n	80066cc <UART_SetConfig+0x4cc>
 80066b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	025b      	lsls	r3, r3, #9
 80066bc:	429a      	cmp	r2, r3
 80066be:	d205      	bcs.n	80066cc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	e005      	b.n	80066d8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80066cc:	231a      	movs	r3, #26
 80066ce:	2218      	movs	r2, #24
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	19db      	adds	r3, r3, r7
 80066d4:	2201      	movs	r2, #1
 80066d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2200      	movs	r2, #0
 80066dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2200      	movs	r2, #0
 80066e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066e4:	231a      	movs	r3, #26
 80066e6:	2218      	movs	r2, #24
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	781b      	ldrb	r3, [r3, #0]
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b00e      	add	sp, #56	@ 0x38
 80066f4:	bdb0      	pop	{r4, r5, r7, pc}
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	40021000 	.word	0x40021000
 80066fc:	003d0900 	.word	0x003d0900
 8006700:	00f42400 	.word	0x00f42400
 8006704:	0800b804 	.word	0x0800b804

08006708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	2201      	movs	r2, #1
 8006716:	4013      	ands	r3, r2
 8006718:	d00b      	beq.n	8006732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a4a      	ldr	r2, [pc, #296]	@ (800684c <UART_AdvFeatureConfig+0x144>)
 8006722:	4013      	ands	r3, r2
 8006724:	0019      	movs	r1, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	2202      	movs	r2, #2
 8006738:	4013      	ands	r3, r2
 800673a:	d00b      	beq.n	8006754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	4a43      	ldr	r2, [pc, #268]	@ (8006850 <UART_AdvFeatureConfig+0x148>)
 8006744:	4013      	ands	r3, r2
 8006746:	0019      	movs	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	2204      	movs	r2, #4
 800675a:	4013      	ands	r3, r2
 800675c:	d00b      	beq.n	8006776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a3b      	ldr	r2, [pc, #236]	@ (8006854 <UART_AdvFeatureConfig+0x14c>)
 8006766:	4013      	ands	r3, r2
 8006768:	0019      	movs	r1, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	2208      	movs	r2, #8
 800677c:	4013      	ands	r3, r2
 800677e:	d00b      	beq.n	8006798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4a34      	ldr	r2, [pc, #208]	@ (8006858 <UART_AdvFeatureConfig+0x150>)
 8006788:	4013      	ands	r3, r2
 800678a:	0019      	movs	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	2210      	movs	r2, #16
 800679e:	4013      	ands	r3, r2
 80067a0:	d00b      	beq.n	80067ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4a2c      	ldr	r2, [pc, #176]	@ (800685c <UART_AdvFeatureConfig+0x154>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	0019      	movs	r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	2220      	movs	r2, #32
 80067c0:	4013      	ands	r3, r2
 80067c2:	d00b      	beq.n	80067dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4a25      	ldr	r2, [pc, #148]	@ (8006860 <UART_AdvFeatureConfig+0x158>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	0019      	movs	r1, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	2240      	movs	r2, #64	@ 0x40
 80067e2:	4013      	ands	r3, r2
 80067e4:	d01d      	beq.n	8006822 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <UART_AdvFeatureConfig+0x15c>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	035b      	lsls	r3, r3, #13
 8006806:	429a      	cmp	r2, r3
 8006808:	d10b      	bne.n	8006822 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <UART_AdvFeatureConfig+0x160>)
 8006812:	4013      	ands	r3, r2
 8006814:	0019      	movs	r1, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	2280      	movs	r2, #128	@ 0x80
 8006828:	4013      	ands	r3, r2
 800682a:	d00b      	beq.n	8006844 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4a0e      	ldr	r2, [pc, #56]	@ (800686c <UART_AdvFeatureConfig+0x164>)
 8006834:	4013      	ands	r3, r2
 8006836:	0019      	movs	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}
 800684c:	fffdffff 	.word	0xfffdffff
 8006850:	fffeffff 	.word	0xfffeffff
 8006854:	fffbffff 	.word	0xfffbffff
 8006858:	ffff7fff 	.word	0xffff7fff
 800685c:	ffffefff 	.word	0xffffefff
 8006860:	ffffdfff 	.word	0xffffdfff
 8006864:	ffefffff 	.word	0xffefffff
 8006868:	ff9fffff 	.word	0xff9fffff
 800686c:	fff7ffff 	.word	0xfff7ffff

08006870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b092      	sub	sp, #72	@ 0x48
 8006874:	af02      	add	r7, sp, #8
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2284      	movs	r2, #132	@ 0x84
 800687c:	2100      	movs	r1, #0
 800687e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006880:	f7fd fc62 	bl	8004148 <HAL_GetTick>
 8006884:	0003      	movs	r3, r0
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2208      	movs	r2, #8
 8006890:	4013      	ands	r3, r2
 8006892:	2b08      	cmp	r3, #8
 8006894:	d12c      	bne.n	80068f0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	2280      	movs	r2, #128	@ 0x80
 800689a:	0391      	lsls	r1, r2, #14
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4a46      	ldr	r2, [pc, #280]	@ (80069b8 <UART_CheckIdleState+0x148>)
 80068a0:	9200      	str	r2, [sp, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f000 f88c 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d021      	beq.n	80068f0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ac:	f3ef 8310 	mrs	r3, PRIMASK
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068b6:	2301      	movs	r3, #1
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	f383 8810 	msr	PRIMASK, r3
}
 80068c0:	46c0      	nop			@ (mov r8, r8)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2180      	movs	r1, #128	@ 0x80
 80068ce:	438a      	bics	r2, r1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d8:	f383 8810 	msr	PRIMASK, r3
}
 80068dc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2278      	movs	r2, #120	@ 0x78
 80068e8:	2100      	movs	r1, #0
 80068ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e05f      	b.n	80069b0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2204      	movs	r2, #4
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d146      	bne.n	800698c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006900:	2280      	movs	r2, #128	@ 0x80
 8006902:	03d1      	lsls	r1, r2, #15
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4a2c      	ldr	r2, [pc, #176]	@ (80069b8 <UART_CheckIdleState+0x148>)
 8006908:	9200      	str	r2, [sp, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	f000 f858 	bl	80069c0 <UART_WaitOnFlagUntilTimeout>
 8006910:	1e03      	subs	r3, r0, #0
 8006912:	d03b      	beq.n	800698c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006914:	f3ef 8310 	mrs	r3, PRIMASK
 8006918:	60fb      	str	r3, [r7, #12]
  return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
 800691e:	2301      	movs	r3, #1
 8006920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f383 8810 	msr	PRIMASK, r3
}
 8006928:	46c0      	nop			@ (mov r8, r8)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4921      	ldr	r1, [pc, #132]	@ (80069bc <UART_CheckIdleState+0x14c>)
 8006936:	400a      	ands	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f383 8810 	msr	PRIMASK, r3
}
 8006944:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006946:	f3ef 8310 	mrs	r3, PRIMASK
 800694a:	61bb      	str	r3, [r7, #24]
  return(result);
 800694c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006950:	2301      	movs	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f383 8810 	msr	PRIMASK, r3
}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2101      	movs	r1, #1
 8006968:	438a      	bics	r2, r1
 800696a:	609a      	str	r2, [r3, #8]
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	f383 8810 	msr	PRIMASK, r3
}
 8006976:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2280      	movs	r2, #128	@ 0x80
 800697c:	2120      	movs	r1, #32
 800697e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2278      	movs	r2, #120	@ 0x78
 8006984:	2100      	movs	r1, #0
 8006986:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e011      	b.n	80069b0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2280      	movs	r2, #128	@ 0x80
 8006996:	2120      	movs	r1, #32
 8006998:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2278      	movs	r2, #120	@ 0x78
 80069aa:	2100      	movs	r1, #0
 80069ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b010      	add	sp, #64	@ 0x40
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	01ffffff 	.word	0x01ffffff
 80069bc:	fffffedf 	.word	0xfffffedf

080069c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	1dfb      	adds	r3, r7, #7
 80069ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d0:	e04b      	b.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3301      	adds	r3, #1
 80069d6:	d048      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d8:	f7fd fbb6 	bl	8004148 <HAL_GetTick>
 80069dc:	0002      	movs	r2, r0
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e04b      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2204      	movs	r2, #4
 80069fa:	4013      	ands	r3, r2
 80069fc:	d035      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	2208      	movs	r2, #8
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d111      	bne.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2208      	movs	r2, #8
 8006a12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0018      	movs	r0, r3
 8006a18:	f000 f83c 	bl	8006a94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2284      	movs	r2, #132	@ 0x84
 8006a20:	2108      	movs	r1, #8
 8006a22:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2278      	movs	r2, #120	@ 0x78
 8006a28:	2100      	movs	r1, #0
 8006a2a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e02c      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	2380      	movs	r3, #128	@ 0x80
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	401a      	ands	r2, r3
 8006a3c:	2380      	movs	r3, #128	@ 0x80
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d112      	bne.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2280      	movs	r2, #128	@ 0x80
 8006a4a:	0112      	lsls	r2, r2, #4
 8006a4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 f81f 	bl	8006a94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2284      	movs	r2, #132	@ 0x84
 8006a5a:	2120      	movs	r1, #32
 8006a5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2278      	movs	r2, #120	@ 0x78
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e00f      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4013      	ands	r3, r2
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	425a      	negs	r2, r3
 8006a7a:	4153      	adcs	r3, r2
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	001a      	movs	r2, r3
 8006a80:	1dfb      	adds	r3, r7, #7
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d0a4      	beq.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b004      	add	sp, #16
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	@ 0x38
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f383 8810 	msr	PRIMASK, r3
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4926      	ldr	r1, [pc, #152]	@ (8006b58 <UART_EndRxTransfer+0xc4>)
 8006abe:	400a      	ands	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ace:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad8:	2301      	movs	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	f383 8810 	msr	PRIMASK, r3
}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2101      	movs	r1, #1
 8006af0:	438a      	bics	r2, r1
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afa:	f383 8810 	msr	PRIMASK, r3
}
 8006afe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d118      	bne.n	8006b3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b08:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b12:	2301      	movs	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f383 8810 	msr	PRIMASK, r3
}
 8006b1c:	46c0      	nop			@ (mov r8, r8)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2110      	movs	r1, #16
 8006b2a:	438a      	bics	r2, r1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f383 8810 	msr	PRIMASK, r3
}
 8006b38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2280      	movs	r2, #128	@ 0x80
 8006b3e:	2120      	movs	r1, #32
 8006b40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b00e      	add	sp, #56	@ 0x38
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	fffffedf 	.word	0xfffffedf

08006b5c <__cvt>:
 8006b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5e:	001f      	movs	r7, r3
 8006b60:	2300      	movs	r3, #0
 8006b62:	0016      	movs	r6, r2
 8006b64:	b08b      	sub	sp, #44	@ 0x2c
 8006b66:	429f      	cmp	r7, r3
 8006b68:	da04      	bge.n	8006b74 <__cvt+0x18>
 8006b6a:	2180      	movs	r1, #128	@ 0x80
 8006b6c:	0609      	lsls	r1, r1, #24
 8006b6e:	187b      	adds	r3, r7, r1
 8006b70:	001f      	movs	r7, r3
 8006b72:	232d      	movs	r3, #45	@ 0x2d
 8006b74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b76:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006b78:	7013      	strb	r3, [r2, #0]
 8006b7a:	2320      	movs	r3, #32
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	439d      	bics	r5, r3
 8006b80:	2d46      	cmp	r5, #70	@ 0x46
 8006b82:	d007      	beq.n	8006b94 <__cvt+0x38>
 8006b84:	002b      	movs	r3, r5
 8006b86:	3b45      	subs	r3, #69	@ 0x45
 8006b88:	4259      	negs	r1, r3
 8006b8a:	414b      	adcs	r3, r1
 8006b8c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	18cb      	adds	r3, r1, r3
 8006b92:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b94:	ab09      	add	r3, sp, #36	@ 0x24
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	ab08      	add	r3, sp, #32
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b9e:	9200      	str	r2, [sp, #0]
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ba4:	0032      	movs	r2, r6
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	003b      	movs	r3, r7
 8006baa:	f001 f89b 	bl	8007ce4 <_dtoa_r>
 8006bae:	0004      	movs	r4, r0
 8006bb0:	2d47      	cmp	r5, #71	@ 0x47
 8006bb2:	d11b      	bne.n	8006bec <__cvt+0x90>
 8006bb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bb6:	07db      	lsls	r3, r3, #31
 8006bb8:	d511      	bpl.n	8006bde <__cvt+0x82>
 8006bba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bbc:	18c3      	adds	r3, r0, r3
 8006bbe:	9307      	str	r3, [sp, #28]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	0030      	movs	r0, r6
 8006bc6:	0039      	movs	r1, r7
 8006bc8:	f7f9 fc40 	bl	800044c <__aeabi_dcmpeq>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d001      	beq.n	8006bd4 <__cvt+0x78>
 8006bd0:	9b07      	ldr	r3, [sp, #28]
 8006bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd4:	2230      	movs	r2, #48	@ 0x30
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	9907      	ldr	r1, [sp, #28]
 8006bda:	428b      	cmp	r3, r1
 8006bdc:	d320      	bcc.n	8006c20 <__cvt+0xc4>
 8006bde:	0020      	movs	r0, r4
 8006be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006be4:	1b1b      	subs	r3, r3, r4
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	b00b      	add	sp, #44	@ 0x2c
 8006bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bee:	18c3      	adds	r3, r0, r3
 8006bf0:	9307      	str	r3, [sp, #28]
 8006bf2:	2d46      	cmp	r5, #70	@ 0x46
 8006bf4:	d1e4      	bne.n	8006bc0 <__cvt+0x64>
 8006bf6:	7803      	ldrb	r3, [r0, #0]
 8006bf8:	2b30      	cmp	r3, #48	@ 0x30
 8006bfa:	d10c      	bne.n	8006c16 <__cvt+0xba>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	0030      	movs	r0, r6
 8006c02:	0039      	movs	r1, r7
 8006c04:	f7f9 fc22 	bl	800044c <__aeabi_dcmpeq>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d104      	bne.n	8006c16 <__cvt+0xba>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c18:	9a07      	ldr	r2, [sp, #28]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	18d3      	adds	r3, r2, r3
 8006c1e:	e7ce      	b.n	8006bbe <__cvt+0x62>
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e7d6      	b.n	8006bd6 <__cvt+0x7a>

08006c28 <__exponent>:
 8006c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c2a:	232b      	movs	r3, #43	@ 0x2b
 8006c2c:	0005      	movs	r5, r0
 8006c2e:	000c      	movs	r4, r1
 8006c30:	b085      	sub	sp, #20
 8006c32:	7002      	strb	r2, [r0, #0]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	da01      	bge.n	8006c3c <__exponent+0x14>
 8006c38:	424c      	negs	r4, r1
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	706b      	strb	r3, [r5, #1]
 8006c3e:	2c09      	cmp	r4, #9
 8006c40:	dd2c      	ble.n	8006c9c <__exponent+0x74>
 8006c42:	ab02      	add	r3, sp, #8
 8006c44:	1dde      	adds	r6, r3, #7
 8006c46:	0020      	movs	r0, r4
 8006c48:	210a      	movs	r1, #10
 8006c4a:	f7f9 fbe9 	bl	8000420 <__aeabi_idivmod>
 8006c4e:	0037      	movs	r7, r6
 8006c50:	3130      	adds	r1, #48	@ 0x30
 8006c52:	3e01      	subs	r6, #1
 8006c54:	0020      	movs	r0, r4
 8006c56:	7031      	strb	r1, [r6, #0]
 8006c58:	210a      	movs	r1, #10
 8006c5a:	9401      	str	r4, [sp, #4]
 8006c5c:	f7f9 fafa 	bl	8000254 <__divsi3>
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	0004      	movs	r4, r0
 8006c64:	2b63      	cmp	r3, #99	@ 0x63
 8006c66:	dcee      	bgt.n	8006c46 <__exponent+0x1e>
 8006c68:	1eba      	subs	r2, r7, #2
 8006c6a:	1ca8      	adds	r0, r5, #2
 8006c6c:	0001      	movs	r1, r0
 8006c6e:	0013      	movs	r3, r2
 8006c70:	3430      	adds	r4, #48	@ 0x30
 8006c72:	7014      	strb	r4, [r2, #0]
 8006c74:	ac02      	add	r4, sp, #8
 8006c76:	3407      	adds	r4, #7
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	d80a      	bhi.n	8006c92 <__exponent+0x6a>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	42a2      	cmp	r2, r4
 8006c80:	d803      	bhi.n	8006c8a <__exponent+0x62>
 8006c82:	3309      	adds	r3, #9
 8006c84:	aa02      	add	r2, sp, #8
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	1bdb      	subs	r3, r3, r7
 8006c8a:	18c0      	adds	r0, r0, r3
 8006c8c:	1b40      	subs	r0, r0, r5
 8006c8e:	b005      	add	sp, #20
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	781c      	ldrb	r4, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	700c      	strb	r4, [r1, #0]
 8006c98:	3101      	adds	r1, #1
 8006c9a:	e7eb      	b.n	8006c74 <__exponent+0x4c>
 8006c9c:	2330      	movs	r3, #48	@ 0x30
 8006c9e:	18e4      	adds	r4, r4, r3
 8006ca0:	70ab      	strb	r3, [r5, #2]
 8006ca2:	1d28      	adds	r0, r5, #4
 8006ca4:	70ec      	strb	r4, [r5, #3]
 8006ca6:	e7f1      	b.n	8006c8c <__exponent+0x64>

08006ca8 <_printf_float>:
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	b097      	sub	sp, #92	@ 0x5c
 8006cac:	000d      	movs	r5, r1
 8006cae:	920a      	str	r2, [sp, #40]	@ 0x28
 8006cb0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006cb6:	f000 fef9 	bl	8007aac <_localeconv_r>
 8006cba:	6803      	ldr	r3, [r0, #0]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8006cc0:	f7f9 fa22 	bl	8000108 <strlen>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006cc8:	9314      	str	r3, [sp, #80]	@ 0x50
 8006cca:	7e2b      	ldrb	r3, [r5, #24]
 8006ccc:	2207      	movs	r2, #7
 8006cce:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cd4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	05c9      	lsls	r1, r1, #23
 8006cda:	d545      	bpl.n	8006d68 <_printf_float+0xc0>
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	4393      	bics	r3, r2
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	3208      	adds	r2, #8
 8006ce4:	6022      	str	r2, [r4, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	681e      	ldr	r6, [r3, #0]
 8006cea:	685f      	ldr	r7, [r3, #4]
 8006cec:	007b      	lsls	r3, r7, #1
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006cf2:	9610      	str	r6, [sp, #64]	@ 0x40
 8006cf4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006cf6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006cf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006cfa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006cfc:	4ba7      	ldr	r3, [pc, #668]	@ (8006f9c <_printf_float+0x2f4>)
 8006cfe:	4252      	negs	r2, r2
 8006d00:	f7fc f890 	bl	8002e24 <__aeabi_dcmpun>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d131      	bne.n	8006d6c <_printf_float+0xc4>
 8006d08:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006d0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	4ba3      	ldr	r3, [pc, #652]	@ (8006f9c <_printf_float+0x2f4>)
 8006d10:	4252      	negs	r2, r2
 8006d12:	f7f9 fbab 	bl	800046c <__aeabi_dcmple>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d128      	bne.n	8006d6c <_printf_float+0xc4>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	0030      	movs	r0, r6
 8006d20:	0039      	movs	r1, r7
 8006d22:	f7f9 fb99 	bl	8000458 <__aeabi_dcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d003      	beq.n	8006d32 <_printf_float+0x8a>
 8006d2a:	002b      	movs	r3, r5
 8006d2c:	222d      	movs	r2, #45	@ 0x2d
 8006d2e:	3343      	adds	r3, #67	@ 0x43
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d34:	4f9a      	ldr	r7, [pc, #616]	@ (8006fa0 <_printf_float+0x2f8>)
 8006d36:	2b47      	cmp	r3, #71	@ 0x47
 8006d38:	d900      	bls.n	8006d3c <_printf_float+0x94>
 8006d3a:	4f9a      	ldr	r7, [pc, #616]	@ (8006fa4 <_printf_float+0x2fc>)
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	2400      	movs	r4, #0
 8006d40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d42:	612b      	str	r3, [r5, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	439a      	bics	r2, r3
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d4c:	0029      	movs	r1, r5
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d54:	aa15      	add	r2, sp, #84	@ 0x54
 8006d56:	f000 f9e5 	bl	8007124 <_printf_common>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d000      	beq.n	8006d60 <_printf_float+0xb8>
 8006d5e:	e09f      	b.n	8006ea0 <_printf_float+0x1f8>
 8006d60:	2001      	movs	r0, #1
 8006d62:	4240      	negs	r0, r0
 8006d64:	b017      	add	sp, #92	@ 0x5c
 8006d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d68:	3307      	adds	r3, #7
 8006d6a:	e7b8      	b.n	8006cde <_printf_float+0x36>
 8006d6c:	0032      	movs	r2, r6
 8006d6e:	003b      	movs	r3, r7
 8006d70:	0030      	movs	r0, r6
 8006d72:	0039      	movs	r1, r7
 8006d74:	f7fc f856 	bl	8002e24 <__aeabi_dcmpun>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d00b      	beq.n	8006d94 <_printf_float+0xec>
 8006d7c:	2f00      	cmp	r7, #0
 8006d7e:	da03      	bge.n	8006d88 <_printf_float+0xe0>
 8006d80:	002b      	movs	r3, r5
 8006d82:	222d      	movs	r2, #45	@ 0x2d
 8006d84:	3343      	adds	r3, #67	@ 0x43
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d8a:	4f87      	ldr	r7, [pc, #540]	@ (8006fa8 <_printf_float+0x300>)
 8006d8c:	2b47      	cmp	r3, #71	@ 0x47
 8006d8e:	d9d5      	bls.n	8006d3c <_printf_float+0x94>
 8006d90:	4f86      	ldr	r7, [pc, #536]	@ (8006fac <_printf_float+0x304>)
 8006d92:	e7d3      	b.n	8006d3c <_printf_float+0x94>
 8006d94:	2220      	movs	r2, #32
 8006d96:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006d98:	686b      	ldr	r3, [r5, #4]
 8006d9a:	4394      	bics	r4, r2
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	d146      	bne.n	8006e2e <_printf_float+0x186>
 8006da0:	3307      	adds	r3, #7
 8006da2:	606b      	str	r3, [r5, #4]
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	2200      	movs	r2, #0
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	9206      	str	r2, [sp, #24]
 8006db2:	aa14      	add	r2, sp, #80	@ 0x50
 8006db4:	9205      	str	r2, [sp, #20]
 8006db6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006db8:	a90a      	add	r1, sp, #40	@ 0x28
 8006dba:	9204      	str	r2, [sp, #16]
 8006dbc:	aa13      	add	r2, sp, #76	@ 0x4c
 8006dbe:	9203      	str	r2, [sp, #12]
 8006dc0:	2223      	movs	r2, #35	@ 0x23
 8006dc2:	1852      	adds	r2, r2, r1
 8006dc4:	9202      	str	r2, [sp, #8]
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	686b      	ldr	r3, [r5, #4]
 8006dca:	0032      	movs	r2, r6
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dd0:	003b      	movs	r3, r7
 8006dd2:	f7ff fec3 	bl	8006b5c <__cvt>
 8006dd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006dd8:	0007      	movs	r7, r0
 8006dda:	2c47      	cmp	r4, #71	@ 0x47
 8006ddc:	d12d      	bne.n	8006e3a <_printf_float+0x192>
 8006dde:	1cd3      	adds	r3, r2, #3
 8006de0:	db02      	blt.n	8006de8 <_printf_float+0x140>
 8006de2:	686b      	ldr	r3, [r5, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	dd48      	ble.n	8006e7a <_printf_float+0x1d2>
 8006de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dec:	3b02      	subs	r3, #2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006df2:	0028      	movs	r0, r5
 8006df4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006df6:	3901      	subs	r1, #1
 8006df8:	3050      	adds	r0, #80	@ 0x50
 8006dfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006dfc:	f7ff ff14 	bl	8006c28 <__exponent>
 8006e00:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e02:	0004      	movs	r4, r0
 8006e04:	1813      	adds	r3, r2, r0
 8006e06:	612b      	str	r3, [r5, #16]
 8006e08:	2a01      	cmp	r2, #1
 8006e0a:	dc02      	bgt.n	8006e12 <_printf_float+0x16a>
 8006e0c:	682a      	ldr	r2, [r5, #0]
 8006e0e:	07d2      	lsls	r2, r2, #31
 8006e10:	d501      	bpl.n	8006e16 <_printf_float+0x16e>
 8006e12:	3301      	adds	r3, #1
 8006e14:	612b      	str	r3, [r5, #16]
 8006e16:	2323      	movs	r3, #35	@ 0x23
 8006e18:	aa0a      	add	r2, sp, #40	@ 0x28
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d100      	bne.n	8006e24 <_printf_float+0x17c>
 8006e22:	e792      	b.n	8006d4a <_printf_float+0xa2>
 8006e24:	002b      	movs	r3, r5
 8006e26:	222d      	movs	r2, #45	@ 0x2d
 8006e28:	3343      	adds	r3, #67	@ 0x43
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e78d      	b.n	8006d4a <_printf_float+0xa2>
 8006e2e:	2c47      	cmp	r4, #71	@ 0x47
 8006e30:	d1b8      	bne.n	8006da4 <_printf_float+0xfc>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1b6      	bne.n	8006da4 <_printf_float+0xfc>
 8006e36:	3301      	adds	r3, #1
 8006e38:	e7b3      	b.n	8006da2 <_printf_float+0xfa>
 8006e3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	2b65      	cmp	r3, #101	@ 0x65
 8006e40:	d9d7      	bls.n	8006df2 <_printf_float+0x14a>
 8006e42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e44:	2b66      	cmp	r3, #102	@ 0x66
 8006e46:	d11a      	bne.n	8006e7e <_printf_float+0x1d6>
 8006e48:	686b      	ldr	r3, [r5, #4]
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	dd09      	ble.n	8006e62 <_printf_float+0x1ba>
 8006e4e:	612a      	str	r2, [r5, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <_printf_float+0x1b2>
 8006e54:	6829      	ldr	r1, [r5, #0]
 8006e56:	07c9      	lsls	r1, r1, #31
 8006e58:	d50b      	bpl.n	8006e72 <_printf_float+0x1ca>
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	189b      	adds	r3, r3, r2
 8006e5e:	612b      	str	r3, [r5, #16]
 8006e60:	e007      	b.n	8006e72 <_printf_float+0x1ca>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <_printf_float+0x1c6>
 8006e66:	2201      	movs	r2, #1
 8006e68:	6829      	ldr	r1, [r5, #0]
 8006e6a:	4211      	tst	r1, r2
 8006e6c:	d000      	beq.n	8006e70 <_printf_float+0x1c8>
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	612a      	str	r2, [r5, #16]
 8006e72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e74:	2400      	movs	r4, #0
 8006e76:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006e78:	e7cd      	b.n	8006e16 <_printf_float+0x16e>
 8006e7a:	2367      	movs	r3, #103	@ 0x67
 8006e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006e80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e82:	4299      	cmp	r1, r3
 8006e84:	db06      	blt.n	8006e94 <_printf_float+0x1ec>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	6129      	str	r1, [r5, #16]
 8006e8a:	07db      	lsls	r3, r3, #31
 8006e8c:	d5f1      	bpl.n	8006e72 <_printf_float+0x1ca>
 8006e8e:	3101      	adds	r1, #1
 8006e90:	6129      	str	r1, [r5, #16]
 8006e92:	e7ee      	b.n	8006e72 <_printf_float+0x1ca>
 8006e94:	2201      	movs	r2, #1
 8006e96:	2900      	cmp	r1, #0
 8006e98:	dce0      	bgt.n	8006e5c <_printf_float+0x1b4>
 8006e9a:	1892      	adds	r2, r2, r2
 8006e9c:	1a52      	subs	r2, r2, r1
 8006e9e:	e7dd      	b.n	8006e5c <_printf_float+0x1b4>
 8006ea0:	682a      	ldr	r2, [r5, #0]
 8006ea2:	0553      	lsls	r3, r2, #21
 8006ea4:	d408      	bmi.n	8006eb8 <_printf_float+0x210>
 8006ea6:	692b      	ldr	r3, [r5, #16]
 8006ea8:	003a      	movs	r2, r7
 8006eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006eb0:	47a0      	blx	r4
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d129      	bne.n	8006f0a <_printf_float+0x262>
 8006eb6:	e753      	b.n	8006d60 <_printf_float+0xb8>
 8006eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eba:	2b65      	cmp	r3, #101	@ 0x65
 8006ebc:	d800      	bhi.n	8006ec0 <_printf_float+0x218>
 8006ebe:	e0da      	b.n	8007076 <_printf_float+0x3ce>
 8006ec0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006ec2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f7f9 fac0 	bl	800044c <__aeabi_dcmpeq>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d033      	beq.n	8006f38 <_printf_float+0x290>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4a37      	ldr	r2, [pc, #220]	@ (8006fb0 <_printf_float+0x308>)
 8006ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ed8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006eda:	47a0      	blx	r4
 8006edc:	3001      	adds	r0, #1
 8006ede:	d100      	bne.n	8006ee2 <_printf_float+0x23a>
 8006ee0:	e73e      	b.n	8006d60 <_printf_float+0xb8>
 8006ee2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ee6:	42b3      	cmp	r3, r6
 8006ee8:	db02      	blt.n	8006ef0 <_printf_float+0x248>
 8006eea:	682b      	ldr	r3, [r5, #0]
 8006eec:	07db      	lsls	r3, r3, #31
 8006eee:	d50c      	bpl.n	8006f0a <_printf_float+0x262>
 8006ef0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ef6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ef8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006efa:	47a0      	blx	r4
 8006efc:	2400      	movs	r4, #0
 8006efe:	3001      	adds	r0, #1
 8006f00:	d100      	bne.n	8006f04 <_printf_float+0x25c>
 8006f02:	e72d      	b.n	8006d60 <_printf_float+0xb8>
 8006f04:	1e73      	subs	r3, r6, #1
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	dc0a      	bgt.n	8006f20 <_printf_float+0x278>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	079b      	lsls	r3, r3, #30
 8006f0e:	d500      	bpl.n	8006f12 <_printf_float+0x26a>
 8006f10:	e105      	b.n	800711e <_printf_float+0x476>
 8006f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f14:	68e8      	ldr	r0, [r5, #12]
 8006f16:	4298      	cmp	r0, r3
 8006f18:	db00      	blt.n	8006f1c <_printf_float+0x274>
 8006f1a:	e723      	b.n	8006d64 <_printf_float+0xbc>
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	e721      	b.n	8006d64 <_printf_float+0xbc>
 8006f20:	002a      	movs	r2, r5
 8006f22:	2301      	movs	r3, #1
 8006f24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f28:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006f2a:	321a      	adds	r2, #26
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d100      	bne.n	8006f34 <_printf_float+0x28c>
 8006f32:	e715      	b.n	8006d60 <_printf_float+0xb8>
 8006f34:	3401      	adds	r4, #1
 8006f36:	e7e5      	b.n	8006f04 <_printf_float+0x25c>
 8006f38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dc3a      	bgt.n	8006fb4 <_printf_float+0x30c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <_printf_float+0x308>)
 8006f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f48:	47a0      	blx	r4
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d100      	bne.n	8006f50 <_printf_float+0x2a8>
 8006f4e:	e707      	b.n	8006d60 <_printf_float+0xb8>
 8006f50:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006f52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f54:	4333      	orrs	r3, r6
 8006f56:	d102      	bne.n	8006f5e <_printf_float+0x2b6>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d5d5      	bpl.n	8006f0a <_printf_float+0x262>
 8006f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f68:	47a0      	blx	r4
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d100      	bne.n	8006f72 <_printf_float+0x2ca>
 8006f70:	e6f6      	b.n	8006d60 <_printf_float+0xb8>
 8006f72:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f78:	425b      	negs	r3, r3
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	dc01      	bgt.n	8006f82 <_printf_float+0x2da>
 8006f7e:	0033      	movs	r3, r6
 8006f80:	e792      	b.n	8006ea8 <_printf_float+0x200>
 8006f82:	002a      	movs	r2, r5
 8006f84:	2301      	movs	r3, #1
 8006f86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f8c:	321a      	adds	r2, #26
 8006f8e:	47a0      	blx	r4
 8006f90:	3001      	adds	r0, #1
 8006f92:	d100      	bne.n	8006f96 <_printf_float+0x2ee>
 8006f94:	e6e4      	b.n	8006d60 <_printf_float+0xb8>
 8006f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f98:	3301      	adds	r3, #1
 8006f9a:	e7ea      	b.n	8006f72 <_printf_float+0x2ca>
 8006f9c:	7fefffff 	.word	0x7fefffff
 8006fa0:	0800b828 	.word	0x0800b828
 8006fa4:	0800b82c 	.word	0x0800b82c
 8006fa8:	0800b830 	.word	0x0800b830
 8006fac:	0800b834 	.word	0x0800b834
 8006fb0:	0800b838 	.word	0x0800b838
 8006fb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fb6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006fb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fba:	429e      	cmp	r6, r3
 8006fbc:	dd00      	ble.n	8006fc0 <_printf_float+0x318>
 8006fbe:	001e      	movs	r6, r3
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	dc31      	bgt.n	8007028 <_printf_float+0x380>
 8006fc4:	43f3      	mvns	r3, r6
 8006fc6:	2400      	movs	r4, #0
 8006fc8:	17db      	asrs	r3, r3, #31
 8006fca:	4033      	ands	r3, r6
 8006fcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fce:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd2:	1af3      	subs	r3, r6, r3
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	dc30      	bgt.n	800703a <_printf_float+0x392>
 8006fd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	dc38      	bgt.n	8007052 <_printf_float+0x3aa>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	07db      	lsls	r3, r3, #31
 8006fe4:	d435      	bmi.n	8007052 <_printf_float+0x3aa>
 8006fe6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fec:	1b9b      	subs	r3, r3, r6
 8006fee:	1b14      	subs	r4, r2, r4
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	dd00      	ble.n	8006ff6 <_printf_float+0x34e>
 8006ff4:	001c      	movs	r4, r3
 8006ff6:	2c00      	cmp	r4, #0
 8006ff8:	dc34      	bgt.n	8007064 <_printf_float+0x3bc>
 8006ffa:	43e3      	mvns	r3, r4
 8006ffc:	2600      	movs	r6, #0
 8006ffe:	17db      	asrs	r3, r3, #31
 8007000:	401c      	ands	r4, r3
 8007002:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007004:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	1b1b      	subs	r3, r3, r4
 800700a:	42b3      	cmp	r3, r6
 800700c:	dc00      	bgt.n	8007010 <_printf_float+0x368>
 800700e:	e77c      	b.n	8006f0a <_printf_float+0x262>
 8007010:	002a      	movs	r2, r5
 8007012:	2301      	movs	r3, #1
 8007014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007018:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800701a:	321a      	adds	r2, #26
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	d100      	bne.n	8007024 <_printf_float+0x37c>
 8007022:	e69d      	b.n	8006d60 <_printf_float+0xb8>
 8007024:	3601      	adds	r6, #1
 8007026:	e7ec      	b.n	8007002 <_printf_float+0x35a>
 8007028:	0033      	movs	r3, r6
 800702a:	003a      	movs	r2, r7
 800702c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800702e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007030:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007032:	47a0      	blx	r4
 8007034:	3001      	adds	r0, #1
 8007036:	d1c5      	bne.n	8006fc4 <_printf_float+0x31c>
 8007038:	e692      	b.n	8006d60 <_printf_float+0xb8>
 800703a:	002a      	movs	r2, r5
 800703c:	2301      	movs	r3, #1
 800703e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007040:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007042:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007044:	321a      	adds	r2, #26
 8007046:	47b0      	blx	r6
 8007048:	3001      	adds	r0, #1
 800704a:	d100      	bne.n	800704e <_printf_float+0x3a6>
 800704c:	e688      	b.n	8006d60 <_printf_float+0xb8>
 800704e:	3401      	adds	r4, #1
 8007050:	e7bd      	b.n	8006fce <_printf_float+0x326>
 8007052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007056:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007058:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800705a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800705c:	47a0      	blx	r4
 800705e:	3001      	adds	r0, #1
 8007060:	d1c1      	bne.n	8006fe6 <_printf_float+0x33e>
 8007062:	e67d      	b.n	8006d60 <_printf_float+0xb8>
 8007064:	19ba      	adds	r2, r7, r6
 8007066:	0023      	movs	r3, r4
 8007068:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800706a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800706c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800706e:	47b0      	blx	r6
 8007070:	3001      	adds	r0, #1
 8007072:	d1c2      	bne.n	8006ffa <_printf_float+0x352>
 8007074:	e674      	b.n	8006d60 <_printf_float+0xb8>
 8007076:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007078:	930c      	str	r3, [sp, #48]	@ 0x30
 800707a:	2b01      	cmp	r3, #1
 800707c:	dc02      	bgt.n	8007084 <_printf_float+0x3dc>
 800707e:	2301      	movs	r3, #1
 8007080:	421a      	tst	r2, r3
 8007082:	d039      	beq.n	80070f8 <_printf_float+0x450>
 8007084:	2301      	movs	r3, #1
 8007086:	003a      	movs	r2, r7
 8007088:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800708a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800708c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800708e:	47b0      	blx	r6
 8007090:	3001      	adds	r0, #1
 8007092:	d100      	bne.n	8007096 <_printf_float+0x3ee>
 8007094:	e664      	b.n	8006d60 <_printf_float+0xb8>
 8007096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007098:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800709a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800709c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800709e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80070a0:	47b0      	blx	r6
 80070a2:	3001      	adds	r0, #1
 80070a4:	d100      	bne.n	80070a8 <_printf_float+0x400>
 80070a6:	e65b      	b.n	8006d60 <_printf_float+0xb8>
 80070a8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80070aa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80070ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070ae:	2200      	movs	r2, #0
 80070b0:	3b01      	subs	r3, #1
 80070b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80070b4:	2300      	movs	r3, #0
 80070b6:	f7f9 f9c9 	bl	800044c <__aeabi_dcmpeq>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d11a      	bne.n	80070f4 <_printf_float+0x44c>
 80070be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c0:	1c7a      	adds	r2, r7, #1
 80070c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070c6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80070c8:	47b0      	blx	r6
 80070ca:	3001      	adds	r0, #1
 80070cc:	d10e      	bne.n	80070ec <_printf_float+0x444>
 80070ce:	e647      	b.n	8006d60 <_printf_float+0xb8>
 80070d0:	002a      	movs	r2, r5
 80070d2:	2301      	movs	r3, #1
 80070d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070da:	321a      	adds	r2, #26
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	d100      	bne.n	80070e4 <_printf_float+0x43c>
 80070e2:	e63d      	b.n	8006d60 <_printf_float+0xb8>
 80070e4:	3601      	adds	r6, #1
 80070e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070e8:	429e      	cmp	r6, r3
 80070ea:	dbf1      	blt.n	80070d0 <_printf_float+0x428>
 80070ec:	002a      	movs	r2, r5
 80070ee:	0023      	movs	r3, r4
 80070f0:	3250      	adds	r2, #80	@ 0x50
 80070f2:	e6da      	b.n	8006eaa <_printf_float+0x202>
 80070f4:	2600      	movs	r6, #0
 80070f6:	e7f6      	b.n	80070e6 <_printf_float+0x43e>
 80070f8:	003a      	movs	r2, r7
 80070fa:	e7e2      	b.n	80070c2 <_printf_float+0x41a>
 80070fc:	002a      	movs	r2, r5
 80070fe:	2301      	movs	r3, #1
 8007100:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007104:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007106:	3219      	adds	r2, #25
 8007108:	47b0      	blx	r6
 800710a:	3001      	adds	r0, #1
 800710c:	d100      	bne.n	8007110 <_printf_float+0x468>
 800710e:	e627      	b.n	8006d60 <_printf_float+0xb8>
 8007110:	3401      	adds	r4, #1
 8007112:	68eb      	ldr	r3, [r5, #12]
 8007114:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	42a3      	cmp	r3, r4
 800711a:	dcef      	bgt.n	80070fc <_printf_float+0x454>
 800711c:	e6f9      	b.n	8006f12 <_printf_float+0x26a>
 800711e:	2400      	movs	r4, #0
 8007120:	e7f7      	b.n	8007112 <_printf_float+0x46a>
 8007122:	46c0      	nop			@ (mov r8, r8)

08007124 <_printf_common>:
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	0016      	movs	r6, r2
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	688a      	ldr	r2, [r1, #8]
 800712c:	690b      	ldr	r3, [r1, #16]
 800712e:	000c      	movs	r4, r1
 8007130:	9000      	str	r0, [sp, #0]
 8007132:	4293      	cmp	r3, r2
 8007134:	da00      	bge.n	8007138 <_printf_common+0x14>
 8007136:	0013      	movs	r3, r2
 8007138:	0022      	movs	r2, r4
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	3243      	adds	r2, #67	@ 0x43
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	2a00      	cmp	r2, #0
 8007142:	d001      	beq.n	8007148 <_printf_common+0x24>
 8007144:	3301      	adds	r3, #1
 8007146:	6033      	str	r3, [r6, #0]
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	069b      	lsls	r3, r3, #26
 800714c:	d502      	bpl.n	8007154 <_printf_common+0x30>
 800714e:	6833      	ldr	r3, [r6, #0]
 8007150:	3302      	adds	r3, #2
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	2306      	movs	r3, #6
 8007158:	0015      	movs	r5, r2
 800715a:	401d      	ands	r5, r3
 800715c:	421a      	tst	r2, r3
 800715e:	d027      	beq.n	80071b0 <_printf_common+0x8c>
 8007160:	0023      	movs	r3, r4
 8007162:	3343      	adds	r3, #67	@ 0x43
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	1e5a      	subs	r2, r3, #1
 8007168:	4193      	sbcs	r3, r2
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	0692      	lsls	r2, r2, #26
 800716e:	d430      	bmi.n	80071d2 <_printf_common+0xae>
 8007170:	0022      	movs	r2, r4
 8007172:	9901      	ldr	r1, [sp, #4]
 8007174:	9800      	ldr	r0, [sp, #0]
 8007176:	9d08      	ldr	r5, [sp, #32]
 8007178:	3243      	adds	r2, #67	@ 0x43
 800717a:	47a8      	blx	r5
 800717c:	3001      	adds	r0, #1
 800717e:	d025      	beq.n	80071cc <_printf_common+0xa8>
 8007180:	2206      	movs	r2, #6
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	2500      	movs	r5, #0
 8007186:	4013      	ands	r3, r2
 8007188:	2b04      	cmp	r3, #4
 800718a:	d105      	bne.n	8007198 <_printf_common+0x74>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	68e5      	ldr	r5, [r4, #12]
 8007190:	1aed      	subs	r5, r5, r3
 8007192:	43eb      	mvns	r3, r5
 8007194:	17db      	asrs	r3, r3, #31
 8007196:	401d      	ands	r5, r3
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	6922      	ldr	r2, [r4, #16]
 800719c:	4293      	cmp	r3, r2
 800719e:	dd01      	ble.n	80071a4 <_printf_common+0x80>
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	18ed      	adds	r5, r5, r3
 80071a4:	2600      	movs	r6, #0
 80071a6:	42b5      	cmp	r5, r6
 80071a8:	d120      	bne.n	80071ec <_printf_common+0xc8>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e010      	b.n	80071d0 <_printf_common+0xac>
 80071ae:	3501      	adds	r5, #1
 80071b0:	68e3      	ldr	r3, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	42ab      	cmp	r3, r5
 80071b8:	ddd2      	ble.n	8007160 <_printf_common+0x3c>
 80071ba:	0022      	movs	r2, r4
 80071bc:	2301      	movs	r3, #1
 80071be:	9901      	ldr	r1, [sp, #4]
 80071c0:	9800      	ldr	r0, [sp, #0]
 80071c2:	9f08      	ldr	r7, [sp, #32]
 80071c4:	3219      	adds	r2, #25
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	d1f0      	bne.n	80071ae <_printf_common+0x8a>
 80071cc:	2001      	movs	r0, #1
 80071ce:	4240      	negs	r0, r0
 80071d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071d2:	2030      	movs	r0, #48	@ 0x30
 80071d4:	18e1      	adds	r1, r4, r3
 80071d6:	3143      	adds	r1, #67	@ 0x43
 80071d8:	7008      	strb	r0, [r1, #0]
 80071da:	0021      	movs	r1, r4
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	3145      	adds	r1, #69	@ 0x45
 80071e0:	7809      	ldrb	r1, [r1, #0]
 80071e2:	18a2      	adds	r2, r4, r2
 80071e4:	3243      	adds	r2, #67	@ 0x43
 80071e6:	3302      	adds	r3, #2
 80071e8:	7011      	strb	r1, [r2, #0]
 80071ea:	e7c1      	b.n	8007170 <_printf_common+0x4c>
 80071ec:	0022      	movs	r2, r4
 80071ee:	2301      	movs	r3, #1
 80071f0:	9901      	ldr	r1, [sp, #4]
 80071f2:	9800      	ldr	r0, [sp, #0]
 80071f4:	9f08      	ldr	r7, [sp, #32]
 80071f6:	321a      	adds	r2, #26
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0e6      	beq.n	80071cc <_printf_common+0xa8>
 80071fe:	3601      	adds	r6, #1
 8007200:	e7d1      	b.n	80071a6 <_printf_common+0x82>
	...

08007204 <_printf_i>:
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	b08b      	sub	sp, #44	@ 0x2c
 8007208:	9206      	str	r2, [sp, #24]
 800720a:	000a      	movs	r2, r1
 800720c:	3243      	adds	r2, #67	@ 0x43
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	9005      	str	r0, [sp, #20]
 8007212:	9203      	str	r2, [sp, #12]
 8007214:	7e0a      	ldrb	r2, [r1, #24]
 8007216:	000c      	movs	r4, r1
 8007218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800721a:	2a78      	cmp	r2, #120	@ 0x78
 800721c:	d809      	bhi.n	8007232 <_printf_i+0x2e>
 800721e:	2a62      	cmp	r2, #98	@ 0x62
 8007220:	d80b      	bhi.n	800723a <_printf_i+0x36>
 8007222:	2a00      	cmp	r2, #0
 8007224:	d100      	bne.n	8007228 <_printf_i+0x24>
 8007226:	e0bc      	b.n	80073a2 <_printf_i+0x19e>
 8007228:	497b      	ldr	r1, [pc, #492]	@ (8007418 <_printf_i+0x214>)
 800722a:	9104      	str	r1, [sp, #16]
 800722c:	2a58      	cmp	r2, #88	@ 0x58
 800722e:	d100      	bne.n	8007232 <_printf_i+0x2e>
 8007230:	e090      	b.n	8007354 <_printf_i+0x150>
 8007232:	0025      	movs	r5, r4
 8007234:	3542      	adds	r5, #66	@ 0x42
 8007236:	702a      	strb	r2, [r5, #0]
 8007238:	e022      	b.n	8007280 <_printf_i+0x7c>
 800723a:	0010      	movs	r0, r2
 800723c:	3863      	subs	r0, #99	@ 0x63
 800723e:	2815      	cmp	r0, #21
 8007240:	d8f7      	bhi.n	8007232 <_printf_i+0x2e>
 8007242:	f7f8 ff73 	bl	800012c <__gnu_thumb1_case_shi>
 8007246:	0016      	.short	0x0016
 8007248:	fff6001f 	.word	0xfff6001f
 800724c:	fff6fff6 	.word	0xfff6fff6
 8007250:	001ffff6 	.word	0x001ffff6
 8007254:	fff6fff6 	.word	0xfff6fff6
 8007258:	fff6fff6 	.word	0xfff6fff6
 800725c:	003600a1 	.word	0x003600a1
 8007260:	fff60080 	.word	0xfff60080
 8007264:	00b2fff6 	.word	0x00b2fff6
 8007268:	0036fff6 	.word	0x0036fff6
 800726c:	fff6fff6 	.word	0xfff6fff6
 8007270:	0084      	.short	0x0084
 8007272:	0025      	movs	r5, r4
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	3542      	adds	r5, #66	@ 0x42
 8007278:	1d11      	adds	r1, r2, #4
 800727a:	6019      	str	r1, [r3, #0]
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	702b      	strb	r3, [r5, #0]
 8007280:	2301      	movs	r3, #1
 8007282:	e0a0      	b.n	80073c6 <_printf_i+0x1c2>
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	6809      	ldr	r1, [r1, #0]
 8007288:	1d02      	adds	r2, r0, #4
 800728a:	060d      	lsls	r5, r1, #24
 800728c:	d50b      	bpl.n	80072a6 <_printf_i+0xa2>
 800728e:	6806      	ldr	r6, [r0, #0]
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	2e00      	cmp	r6, #0
 8007294:	da03      	bge.n	800729e <_printf_i+0x9a>
 8007296:	232d      	movs	r3, #45	@ 0x2d
 8007298:	9a03      	ldr	r2, [sp, #12]
 800729a:	4276      	negs	r6, r6
 800729c:	7013      	strb	r3, [r2, #0]
 800729e:	4b5e      	ldr	r3, [pc, #376]	@ (8007418 <_printf_i+0x214>)
 80072a0:	270a      	movs	r7, #10
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	e018      	b.n	80072d8 <_printf_i+0xd4>
 80072a6:	6806      	ldr	r6, [r0, #0]
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	0649      	lsls	r1, r1, #25
 80072ac:	d5f1      	bpl.n	8007292 <_printf_i+0x8e>
 80072ae:	b236      	sxth	r6, r6
 80072b0:	e7ef      	b.n	8007292 <_printf_i+0x8e>
 80072b2:	6808      	ldr	r0, [r1, #0]
 80072b4:	6819      	ldr	r1, [r3, #0]
 80072b6:	c940      	ldmia	r1!, {r6}
 80072b8:	0605      	lsls	r5, r0, #24
 80072ba:	d402      	bmi.n	80072c2 <_printf_i+0xbe>
 80072bc:	0640      	lsls	r0, r0, #25
 80072be:	d500      	bpl.n	80072c2 <_printf_i+0xbe>
 80072c0:	b2b6      	uxth	r6, r6
 80072c2:	6019      	str	r1, [r3, #0]
 80072c4:	4b54      	ldr	r3, [pc, #336]	@ (8007418 <_printf_i+0x214>)
 80072c6:	270a      	movs	r7, #10
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80072cc:	d100      	bne.n	80072d0 <_printf_i+0xcc>
 80072ce:	3f02      	subs	r7, #2
 80072d0:	0023      	movs	r3, r4
 80072d2:	2200      	movs	r2, #0
 80072d4:	3343      	adds	r3, #67	@ 0x43
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	db03      	blt.n	80072e8 <_printf_i+0xe4>
 80072e0:	2104      	movs	r1, #4
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	438a      	bics	r2, r1
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d102      	bne.n	80072f2 <_printf_i+0xee>
 80072ec:	9d03      	ldr	r5, [sp, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <_printf_i+0x108>
 80072f2:	9d03      	ldr	r5, [sp, #12]
 80072f4:	0030      	movs	r0, r6
 80072f6:	0039      	movs	r1, r7
 80072f8:	f7f8 ffa8 	bl	800024c <__aeabi_uidivmod>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	3d01      	subs	r5, #1
 8007300:	5c5b      	ldrb	r3, [r3, r1]
 8007302:	702b      	strb	r3, [r5, #0]
 8007304:	0033      	movs	r3, r6
 8007306:	0006      	movs	r6, r0
 8007308:	429f      	cmp	r7, r3
 800730a:	d9f3      	bls.n	80072f4 <_printf_i+0xf0>
 800730c:	2f08      	cmp	r7, #8
 800730e:	d109      	bne.n	8007324 <_printf_i+0x120>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	d506      	bpl.n	8007324 <_printf_i+0x120>
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	dc02      	bgt.n	8007324 <_printf_i+0x120>
 800731e:	2330      	movs	r3, #48	@ 0x30
 8007320:	3d01      	subs	r5, #1
 8007322:	702b      	strb	r3, [r5, #0]
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	1b5b      	subs	r3, r3, r5
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	0021      	movs	r1, r4
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	9805      	ldr	r0, [sp, #20]
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	aa09      	add	r2, sp, #36	@ 0x24
 8007336:	f7ff fef5 	bl	8007124 <_printf_common>
 800733a:	3001      	adds	r0, #1
 800733c:	d148      	bne.n	80073d0 <_printf_i+0x1cc>
 800733e:	2001      	movs	r0, #1
 8007340:	4240      	negs	r0, r0
 8007342:	b00b      	add	sp, #44	@ 0x2c
 8007344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007346:	2220      	movs	r2, #32
 8007348:	6809      	ldr	r1, [r1, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	2278      	movs	r2, #120	@ 0x78
 8007350:	4932      	ldr	r1, [pc, #200]	@ (800741c <_printf_i+0x218>)
 8007352:	9104      	str	r1, [sp, #16]
 8007354:	0021      	movs	r1, r4
 8007356:	3145      	adds	r1, #69	@ 0x45
 8007358:	700a      	strb	r2, [r1, #0]
 800735a:	6819      	ldr	r1, [r3, #0]
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	c940      	ldmia	r1!, {r6}
 8007360:	0610      	lsls	r0, r2, #24
 8007362:	d402      	bmi.n	800736a <_printf_i+0x166>
 8007364:	0650      	lsls	r0, r2, #25
 8007366:	d500      	bpl.n	800736a <_printf_i+0x166>
 8007368:	b2b6      	uxth	r6, r6
 800736a:	6019      	str	r1, [r3, #0]
 800736c:	07d3      	lsls	r3, r2, #31
 800736e:	d502      	bpl.n	8007376 <_printf_i+0x172>
 8007370:	2320      	movs	r3, #32
 8007372:	4313      	orrs	r3, r2
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	2e00      	cmp	r6, #0
 8007378:	d001      	beq.n	800737e <_printf_i+0x17a>
 800737a:	2710      	movs	r7, #16
 800737c:	e7a8      	b.n	80072d0 <_printf_i+0xcc>
 800737e:	2220      	movs	r2, #32
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	4393      	bics	r3, r2
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	e7f8      	b.n	800737a <_printf_i+0x176>
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	680d      	ldr	r5, [r1, #0]
 800738c:	1d10      	adds	r0, r2, #4
 800738e:	6949      	ldr	r1, [r1, #20]
 8007390:	6018      	str	r0, [r3, #0]
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	062e      	lsls	r6, r5, #24
 8007396:	d501      	bpl.n	800739c <_printf_i+0x198>
 8007398:	6019      	str	r1, [r3, #0]
 800739a:	e002      	b.n	80073a2 <_printf_i+0x19e>
 800739c:	066d      	lsls	r5, r5, #25
 800739e:	d5fb      	bpl.n	8007398 <_printf_i+0x194>
 80073a0:	8019      	strh	r1, [r3, #0]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9d03      	ldr	r5, [sp, #12]
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	e7bf      	b.n	800732a <_printf_i+0x126>
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	1d11      	adds	r1, r2, #4
 80073ae:	6019      	str	r1, [r3, #0]
 80073b0:	6815      	ldr	r5, [r2, #0]
 80073b2:	2100      	movs	r1, #0
 80073b4:	0028      	movs	r0, r5
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	f000 fbf7 	bl	8007baa <memchr>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d001      	beq.n	80073c4 <_printf_i+0x1c0>
 80073c0:	1b40      	subs	r0, r0, r5
 80073c2:	6060      	str	r0, [r4, #4]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9a03      	ldr	r2, [sp, #12]
 80073cc:	7013      	strb	r3, [r2, #0]
 80073ce:	e7ac      	b.n	800732a <_printf_i+0x126>
 80073d0:	002a      	movs	r2, r5
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	9906      	ldr	r1, [sp, #24]
 80073d6:	9805      	ldr	r0, [sp, #20]
 80073d8:	9d07      	ldr	r5, [sp, #28]
 80073da:	47a8      	blx	r5
 80073dc:	3001      	adds	r0, #1
 80073de:	d0ae      	beq.n	800733e <_printf_i+0x13a>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	d415      	bmi.n	8007412 <_printf_i+0x20e>
 80073e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e8:	68e0      	ldr	r0, [r4, #12]
 80073ea:	4298      	cmp	r0, r3
 80073ec:	daa9      	bge.n	8007342 <_printf_i+0x13e>
 80073ee:	0018      	movs	r0, r3
 80073f0:	e7a7      	b.n	8007342 <_printf_i+0x13e>
 80073f2:	0022      	movs	r2, r4
 80073f4:	2301      	movs	r3, #1
 80073f6:	9906      	ldr	r1, [sp, #24]
 80073f8:	9805      	ldr	r0, [sp, #20]
 80073fa:	9e07      	ldr	r6, [sp, #28]
 80073fc:	3219      	adds	r2, #25
 80073fe:	47b0      	blx	r6
 8007400:	3001      	adds	r0, #1
 8007402:	d09c      	beq.n	800733e <_printf_i+0x13a>
 8007404:	3501      	adds	r5, #1
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	42ab      	cmp	r3, r5
 800740e:	dcf0      	bgt.n	80073f2 <_printf_i+0x1ee>
 8007410:	e7e9      	b.n	80073e6 <_printf_i+0x1e2>
 8007412:	2500      	movs	r5, #0
 8007414:	e7f7      	b.n	8007406 <_printf_i+0x202>
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	0800b83a 	.word	0x0800b83a
 800741c:	0800b84b 	.word	0x0800b84b

08007420 <_scanf_float>:
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b08b      	sub	sp, #44	@ 0x2c
 8007424:	0016      	movs	r6, r2
 8007426:	9003      	str	r0, [sp, #12]
 8007428:	22ae      	movs	r2, #174	@ 0xae
 800742a:	2000      	movs	r0, #0
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	688b      	ldr	r3, [r1, #8]
 8007430:	000c      	movs	r4, r1
 8007432:	1e59      	subs	r1, r3, #1
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	9006      	str	r0, [sp, #24]
 8007438:	4291      	cmp	r1, r2
 800743a:	d905      	bls.n	8007448 <_scanf_float+0x28>
 800743c:	3b5e      	subs	r3, #94	@ 0x5e
 800743e:	3bff      	subs	r3, #255	@ 0xff
 8007440:	9306      	str	r3, [sp, #24]
 8007442:	235e      	movs	r3, #94	@ 0x5e
 8007444:	33ff      	adds	r3, #255	@ 0xff
 8007446:	60a3      	str	r3, [r4, #8]
 8007448:	23f0      	movs	r3, #240	@ 0xf0
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4313      	orrs	r3, r2
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	0023      	movs	r3, r4
 8007454:	2500      	movs	r5, #0
 8007456:	331c      	adds	r3, #28
 8007458:	001f      	movs	r7, r3
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	9502      	str	r5, [sp, #8]
 800745e:	9509      	str	r5, [sp, #36]	@ 0x24
 8007460:	9508      	str	r5, [sp, #32]
 8007462:	9501      	str	r5, [sp, #4]
 8007464:	9505      	str	r5, [sp, #20]
 8007466:	68a2      	ldr	r2, [r4, #8]
 8007468:	2a00      	cmp	r2, #0
 800746a:	d00a      	beq.n	8007482 <_scanf_float+0x62>
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b4e      	cmp	r3, #78	@ 0x4e
 8007472:	d844      	bhi.n	80074fe <_scanf_float+0xde>
 8007474:	0018      	movs	r0, r3
 8007476:	2b40      	cmp	r3, #64	@ 0x40
 8007478:	d82c      	bhi.n	80074d4 <_scanf_float+0xb4>
 800747a:	382b      	subs	r0, #43	@ 0x2b
 800747c:	b2c1      	uxtb	r1, r0
 800747e:	290e      	cmp	r1, #14
 8007480:	d92a      	bls.n	80074d8 <_scanf_float+0xb8>
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <_scanf_float+0x70>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	4aa6      	ldr	r2, [pc, #664]	@ (8007724 <_scanf_float+0x304>)
 800748c:	4013      	ands	r3, r2
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	2b01      	cmp	r3, #1
 8007496:	d900      	bls.n	800749a <_scanf_float+0x7a>
 8007498:	e0fe      	b.n	8007698 <_scanf_float+0x278>
 800749a:	25be      	movs	r5, #190	@ 0xbe
 800749c:	006d      	lsls	r5, r5, #1
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	429f      	cmp	r7, r3
 80074a2:	d900      	bls.n	80074a6 <_scanf_float+0x86>
 80074a4:	e0ee      	b.n	8007684 <_scanf_float+0x264>
 80074a6:	2001      	movs	r0, #1
 80074a8:	b00b      	add	sp, #44	@ 0x2c
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ac:	0018      	movs	r0, r3
 80074ae:	3861      	subs	r0, #97	@ 0x61
 80074b0:	280d      	cmp	r0, #13
 80074b2:	d8e6      	bhi.n	8007482 <_scanf_float+0x62>
 80074b4:	f7f8 fe3a 	bl	800012c <__gnu_thumb1_case_shi>
 80074b8:	ffe50089 	.word	0xffe50089
 80074bc:	ffe5ffe5 	.word	0xffe5ffe5
 80074c0:	00a700bb 	.word	0x00a700bb
 80074c4:	ffe5ffe5 	.word	0xffe5ffe5
 80074c8:	ffe5008f 	.word	0xffe5008f
 80074cc:	ffe5ffe5 	.word	0xffe5ffe5
 80074d0:	006bffe5 	.word	0x006bffe5
 80074d4:	3841      	subs	r0, #65	@ 0x41
 80074d6:	e7eb      	b.n	80074b0 <_scanf_float+0x90>
 80074d8:	280e      	cmp	r0, #14
 80074da:	d8d2      	bhi.n	8007482 <_scanf_float+0x62>
 80074dc:	f7f8 fe26 	bl	800012c <__gnu_thumb1_case_shi>
 80074e0:	ffd1004f 	.word	0xffd1004f
 80074e4:	009d004f 	.word	0x009d004f
 80074e8:	0021ffd1 	.word	0x0021ffd1
 80074ec:	00410041 	.word	0x00410041
 80074f0:	00410041 	.word	0x00410041
 80074f4:	00410041 	.word	0x00410041
 80074f8:	00410041 	.word	0x00410041
 80074fc:	0041      	.short	0x0041
 80074fe:	2b6e      	cmp	r3, #110	@ 0x6e
 8007500:	d80a      	bhi.n	8007518 <_scanf_float+0xf8>
 8007502:	2b60      	cmp	r3, #96	@ 0x60
 8007504:	d8d2      	bhi.n	80074ac <_scanf_float+0x8c>
 8007506:	2b54      	cmp	r3, #84	@ 0x54
 8007508:	d100      	bne.n	800750c <_scanf_float+0xec>
 800750a:	e081      	b.n	8007610 <_scanf_float+0x1f0>
 800750c:	2b59      	cmp	r3, #89	@ 0x59
 800750e:	d1b8      	bne.n	8007482 <_scanf_float+0x62>
 8007510:	2d07      	cmp	r5, #7
 8007512:	d1b6      	bne.n	8007482 <_scanf_float+0x62>
 8007514:	2508      	movs	r5, #8
 8007516:	e02f      	b.n	8007578 <_scanf_float+0x158>
 8007518:	2b74      	cmp	r3, #116	@ 0x74
 800751a:	d079      	beq.n	8007610 <_scanf_float+0x1f0>
 800751c:	2b79      	cmp	r3, #121	@ 0x79
 800751e:	d0f7      	beq.n	8007510 <_scanf_float+0xf0>
 8007520:	e7af      	b.n	8007482 <_scanf_float+0x62>
 8007522:	6821      	ldr	r1, [r4, #0]
 8007524:	05c8      	lsls	r0, r1, #23
 8007526:	d51c      	bpl.n	8007562 <_scanf_float+0x142>
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	4399      	bics	r1, r3
 800752c:	9b01      	ldr	r3, [sp, #4]
 800752e:	6021      	str	r1, [r4, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <_scanf_float+0x122>
 800753a:	3b01      	subs	r3, #1
 800753c:	3201      	adds	r2, #1
 800753e:	9306      	str	r3, [sp, #24]
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	3b01      	subs	r3, #1
 8007546:	60a3      	str	r3, [r4, #8]
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	6873      	ldr	r3, [r6, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	6073      	str	r3, [r6, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc00      	bgt.n	800755a <_scanf_float+0x13a>
 8007558:	e08a      	b.n	8007670 <_scanf_float+0x250>
 800755a:	6833      	ldr	r3, [r6, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	e781      	b.n	8007466 <_scanf_float+0x46>
 8007562:	9a02      	ldr	r2, [sp, #8]
 8007564:	1951      	adds	r1, r2, r5
 8007566:	2900      	cmp	r1, #0
 8007568:	d000      	beq.n	800756c <_scanf_float+0x14c>
 800756a:	e78a      	b.n	8007482 <_scanf_float+0x62>
 800756c:	000d      	movs	r5, r1
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	486d      	ldr	r0, [pc, #436]	@ (8007728 <_scanf_float+0x308>)
 8007572:	9102      	str	r1, [sp, #8]
 8007574:	4002      	ands	r2, r0
 8007576:	6022      	str	r2, [r4, #0]
 8007578:	703b      	strb	r3, [r7, #0]
 800757a:	3701      	adds	r7, #1
 800757c:	e7e1      	b.n	8007542 <_scanf_float+0x122>
 800757e:	2180      	movs	r1, #128	@ 0x80
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	420a      	tst	r2, r1
 8007584:	d100      	bne.n	8007588 <_scanf_float+0x168>
 8007586:	e77c      	b.n	8007482 <_scanf_float+0x62>
 8007588:	438a      	bics	r2, r1
 800758a:	6022      	str	r2, [r4, #0]
 800758c:	e7f4      	b.n	8007578 <_scanf_float+0x158>
 800758e:	9a02      	ldr	r2, [sp, #8]
 8007590:	2a00      	cmp	r2, #0
 8007592:	d10f      	bne.n	80075b4 <_scanf_float+0x194>
 8007594:	9a01      	ldr	r2, [sp, #4]
 8007596:	2a00      	cmp	r2, #0
 8007598:	d10f      	bne.n	80075ba <_scanf_float+0x19a>
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	21e0      	movs	r1, #224	@ 0xe0
 800759e:	0010      	movs	r0, r2
 80075a0:	00c9      	lsls	r1, r1, #3
 80075a2:	4008      	ands	r0, r1
 80075a4:	4288      	cmp	r0, r1
 80075a6:	d108      	bne.n	80075ba <_scanf_float+0x19a>
 80075a8:	4960      	ldr	r1, [pc, #384]	@ (800772c <_scanf_float+0x30c>)
 80075aa:	400a      	ands	r2, r1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	9202      	str	r2, [sp, #8]
 80075b2:	e7e1      	b.n	8007578 <_scanf_float+0x158>
 80075b4:	9a02      	ldr	r2, [sp, #8]
 80075b6:	2a02      	cmp	r2, #2
 80075b8:	d058      	beq.n	800766c <_scanf_float+0x24c>
 80075ba:	2d01      	cmp	r5, #1
 80075bc:	d002      	beq.n	80075c4 <_scanf_float+0x1a4>
 80075be:	2d04      	cmp	r5, #4
 80075c0:	d000      	beq.n	80075c4 <_scanf_float+0x1a4>
 80075c2:	e75e      	b.n	8007482 <_scanf_float+0x62>
 80075c4:	3501      	adds	r5, #1
 80075c6:	b2ed      	uxtb	r5, r5
 80075c8:	e7d6      	b.n	8007578 <_scanf_float+0x158>
 80075ca:	9a02      	ldr	r2, [sp, #8]
 80075cc:	2a01      	cmp	r2, #1
 80075ce:	d000      	beq.n	80075d2 <_scanf_float+0x1b2>
 80075d0:	e757      	b.n	8007482 <_scanf_float+0x62>
 80075d2:	2202      	movs	r2, #2
 80075d4:	e7ec      	b.n	80075b0 <_scanf_float+0x190>
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	d110      	bne.n	80075fc <_scanf_float+0x1dc>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d000      	beq.n	80075e2 <_scanf_float+0x1c2>
 80075e0:	e752      	b.n	8007488 <_scanf_float+0x68>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	21e0      	movs	r1, #224	@ 0xe0
 80075e6:	0010      	movs	r0, r2
 80075e8:	00c9      	lsls	r1, r1, #3
 80075ea:	4008      	ands	r0, r1
 80075ec:	4288      	cmp	r0, r1
 80075ee:	d000      	beq.n	80075f2 <_scanf_float+0x1d2>
 80075f0:	e11d      	b.n	800782e <_scanf_float+0x40e>
 80075f2:	494e      	ldr	r1, [pc, #312]	@ (800772c <_scanf_float+0x30c>)
 80075f4:	3501      	adds	r5, #1
 80075f6:	400a      	ands	r2, r1
 80075f8:	6022      	str	r2, [r4, #0]
 80075fa:	e7bd      	b.n	8007578 <_scanf_float+0x158>
 80075fc:	21fd      	movs	r1, #253	@ 0xfd
 80075fe:	1eea      	subs	r2, r5, #3
 8007600:	420a      	tst	r2, r1
 8007602:	d0df      	beq.n	80075c4 <_scanf_float+0x1a4>
 8007604:	e73d      	b.n	8007482 <_scanf_float+0x62>
 8007606:	2d02      	cmp	r5, #2
 8007608:	d000      	beq.n	800760c <_scanf_float+0x1ec>
 800760a:	e73a      	b.n	8007482 <_scanf_float+0x62>
 800760c:	2503      	movs	r5, #3
 800760e:	e7b3      	b.n	8007578 <_scanf_float+0x158>
 8007610:	2d06      	cmp	r5, #6
 8007612:	d000      	beq.n	8007616 <_scanf_float+0x1f6>
 8007614:	e735      	b.n	8007482 <_scanf_float+0x62>
 8007616:	2507      	movs	r5, #7
 8007618:	e7ae      	b.n	8007578 <_scanf_float+0x158>
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	0591      	lsls	r1, r2, #22
 800761e:	d400      	bmi.n	8007622 <_scanf_float+0x202>
 8007620:	e72f      	b.n	8007482 <_scanf_float+0x62>
 8007622:	4943      	ldr	r1, [pc, #268]	@ (8007730 <_scanf_float+0x310>)
 8007624:	400a      	ands	r2, r1
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	9a01      	ldr	r2, [sp, #4]
 800762a:	9205      	str	r2, [sp, #20]
 800762c:	e7a4      	b.n	8007578 <_scanf_float+0x158>
 800762e:	21a0      	movs	r1, #160	@ 0xa0
 8007630:	2080      	movs	r0, #128	@ 0x80
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	00c9      	lsls	r1, r1, #3
 8007636:	4011      	ands	r1, r2
 8007638:	00c0      	lsls	r0, r0, #3
 800763a:	4281      	cmp	r1, r0
 800763c:	d006      	beq.n	800764c <_scanf_float+0x22c>
 800763e:	4202      	tst	r2, r0
 8007640:	d100      	bne.n	8007644 <_scanf_float+0x224>
 8007642:	e71e      	b.n	8007482 <_scanf_float+0x62>
 8007644:	9901      	ldr	r1, [sp, #4]
 8007646:	2900      	cmp	r1, #0
 8007648:	d100      	bne.n	800764c <_scanf_float+0x22c>
 800764a:	e0f0      	b.n	800782e <_scanf_float+0x40e>
 800764c:	0591      	lsls	r1, r2, #22
 800764e:	d404      	bmi.n	800765a <_scanf_float+0x23a>
 8007650:	9901      	ldr	r1, [sp, #4]
 8007652:	9805      	ldr	r0, [sp, #20]
 8007654:	9709      	str	r7, [sp, #36]	@ 0x24
 8007656:	1a09      	subs	r1, r1, r0
 8007658:	9108      	str	r1, [sp, #32]
 800765a:	4934      	ldr	r1, [pc, #208]	@ (800772c <_scanf_float+0x30c>)
 800765c:	400a      	ands	r2, r1
 800765e:	21c0      	movs	r1, #192	@ 0xc0
 8007660:	0049      	lsls	r1, r1, #1
 8007662:	430a      	orrs	r2, r1
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	e785      	b.n	8007578 <_scanf_float+0x158>
 800766c:	2203      	movs	r2, #3
 800766e:	e79f      	b.n	80075b0 <_scanf_float+0x190>
 8007670:	23c0      	movs	r3, #192	@ 0xc0
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	0031      	movs	r1, r6
 8007676:	58e3      	ldr	r3, [r4, r3]
 8007678:	9803      	ldr	r0, [sp, #12]
 800767a:	4798      	blx	r3
 800767c:	2800      	cmp	r0, #0
 800767e:	d100      	bne.n	8007682 <_scanf_float+0x262>
 8007680:	e6f1      	b.n	8007466 <_scanf_float+0x46>
 8007682:	e6fe      	b.n	8007482 <_scanf_float+0x62>
 8007684:	3f01      	subs	r7, #1
 8007686:	5963      	ldr	r3, [r4, r5]
 8007688:	0032      	movs	r2, r6
 800768a:	7839      	ldrb	r1, [r7, #0]
 800768c:	9803      	ldr	r0, [sp, #12]
 800768e:	4798      	blx	r3
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	3b01      	subs	r3, #1
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	e702      	b.n	800749e <_scanf_float+0x7e>
 8007698:	1e6b      	subs	r3, r5, #1
 800769a:	2b06      	cmp	r3, #6
 800769c:	d80e      	bhi.n	80076bc <_scanf_float+0x29c>
 800769e:	9702      	str	r7, [sp, #8]
 80076a0:	2d02      	cmp	r5, #2
 80076a2:	d920      	bls.n	80076e6 <_scanf_float+0x2c6>
 80076a4:	1beb      	subs	r3, r5, r7
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	9306      	str	r3, [sp, #24]
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	9a06      	ldr	r2, [sp, #24]
 80076ae:	189b      	adds	r3, r3, r2
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d127      	bne.n	8007706 <_scanf_float+0x2e6>
 80076b6:	3d03      	subs	r5, #3
 80076b8:	b2ed      	uxtb	r5, r5
 80076ba:	1b7f      	subs	r7, r7, r5
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	05da      	lsls	r2, r3, #23
 80076c0:	d553      	bpl.n	800776a <_scanf_float+0x34a>
 80076c2:	055b      	lsls	r3, r3, #21
 80076c4:	d536      	bpl.n	8007734 <_scanf_float+0x314>
 80076c6:	25be      	movs	r5, #190	@ 0xbe
 80076c8:	006d      	lsls	r5, r5, #1
 80076ca:	9b04      	ldr	r3, [sp, #16]
 80076cc:	429f      	cmp	r7, r3
 80076ce:	d800      	bhi.n	80076d2 <_scanf_float+0x2b2>
 80076d0:	e6e9      	b.n	80074a6 <_scanf_float+0x86>
 80076d2:	3f01      	subs	r7, #1
 80076d4:	5963      	ldr	r3, [r4, r5]
 80076d6:	0032      	movs	r2, r6
 80076d8:	7839      	ldrb	r1, [r7, #0]
 80076da:	9803      	ldr	r0, [sp, #12]
 80076dc:	4798      	blx	r3
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	e7f1      	b.n	80076ca <_scanf_float+0x2aa>
 80076e6:	25be      	movs	r5, #190	@ 0xbe
 80076e8:	006d      	lsls	r5, r5, #1
 80076ea:	9b04      	ldr	r3, [sp, #16]
 80076ec:	429f      	cmp	r7, r3
 80076ee:	d800      	bhi.n	80076f2 <_scanf_float+0x2d2>
 80076f0:	e6d9      	b.n	80074a6 <_scanf_float+0x86>
 80076f2:	3f01      	subs	r7, #1
 80076f4:	5963      	ldr	r3, [r4, r5]
 80076f6:	0032      	movs	r2, r6
 80076f8:	7839      	ldrb	r1, [r7, #0]
 80076fa:	9803      	ldr	r0, [sp, #12]
 80076fc:	4798      	blx	r3
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	3b01      	subs	r3, #1
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	e7f1      	b.n	80076ea <_scanf_float+0x2ca>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	0032      	movs	r2, r6
 800770a:	3b01      	subs	r3, #1
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	9302      	str	r3, [sp, #8]
 8007710:	23be      	movs	r3, #190	@ 0xbe
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	58e3      	ldr	r3, [r4, r3]
 8007716:	9803      	ldr	r0, [sp, #12]
 8007718:	4798      	blx	r3
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	e7c3      	b.n	80076aa <_scanf_float+0x28a>
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	fffffeff 	.word	0xfffffeff
 8007728:	fffffe7f 	.word	0xfffffe7f
 800772c:	fffff87f 	.word	0xfffff87f
 8007730:	fffffd7f 	.word	0xfffffd7f
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	1e7d      	subs	r5, r7, #1
 8007738:	7829      	ldrb	r1, [r5, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	2965      	cmp	r1, #101	@ 0x65
 8007740:	d00c      	beq.n	800775c <_scanf_float+0x33c>
 8007742:	2945      	cmp	r1, #69	@ 0x45
 8007744:	d00a      	beq.n	800775c <_scanf_float+0x33c>
 8007746:	23be      	movs	r3, #190	@ 0xbe
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	58e3      	ldr	r3, [r4, r3]
 800774c:	0032      	movs	r2, r6
 800774e:	9803      	ldr	r0, [sp, #12]
 8007750:	4798      	blx	r3
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	1ebd      	subs	r5, r7, #2
 8007756:	3b01      	subs	r3, #1
 8007758:	7829      	ldrb	r1, [r5, #0]
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	23be      	movs	r3, #190	@ 0xbe
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	0032      	movs	r2, r6
 8007762:	58e3      	ldr	r3, [r4, r3]
 8007764:	9803      	ldr	r0, [sp, #12]
 8007766:	4798      	blx	r3
 8007768:	002f      	movs	r7, r5
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	2310      	movs	r3, #16
 800776e:	000a      	movs	r2, r1
 8007770:	401a      	ands	r2, r3
 8007772:	4219      	tst	r1, r3
 8007774:	d001      	beq.n	800777a <_scanf_float+0x35a>
 8007776:	2000      	movs	r0, #0
 8007778:	e696      	b.n	80074a8 <_scanf_float+0x88>
 800777a:	21c0      	movs	r1, #192	@ 0xc0
 800777c:	703a      	strb	r2, [r7, #0]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	00c9      	lsls	r1, r1, #3
 8007782:	400b      	ands	r3, r1
 8007784:	2180      	movs	r1, #128	@ 0x80
 8007786:	00c9      	lsls	r1, r1, #3
 8007788:	428b      	cmp	r3, r1
 800778a:	d11c      	bne.n	80077c6 <_scanf_float+0x3a6>
 800778c:	9b05      	ldr	r3, [sp, #20]
 800778e:	9a01      	ldr	r2, [sp, #4]
 8007790:	9905      	ldr	r1, [sp, #20]
 8007792:	1a9a      	subs	r2, r3, r2
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	428b      	cmp	r3, r1
 8007798:	d121      	bne.n	80077de <_scanf_float+0x3be>
 800779a:	2200      	movs	r2, #0
 800779c:	9904      	ldr	r1, [sp, #16]
 800779e:	9803      	ldr	r0, [sp, #12]
 80077a0:	f002 fc6e 	bl	800a080 <_strtod_r>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	0006      	movs	r6, r0
 80077aa:	000f      	movs	r7, r1
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	0791      	lsls	r1, r2, #30
 80077b0:	d522      	bpl.n	80077f8 <_scanf_float+0x3d8>
 80077b2:	9907      	ldr	r1, [sp, #28]
 80077b4:	1d1a      	adds	r2, r3, #4
 80077b6:	600a      	str	r2, [r1, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	601e      	str	r6, [r3, #0]
 80077bc:	605f      	str	r7, [r3, #4]
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60e3      	str	r3, [r4, #12]
 80077c4:	e7d7      	b.n	8007776 <_scanf_float+0x356>
 80077c6:	9b08      	ldr	r3, [sp, #32]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0e6      	beq.n	800779a <_scanf_float+0x37a>
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	9803      	ldr	r0, [sp, #12]
 80077d0:	1c59      	adds	r1, r3, #1
 80077d2:	230a      	movs	r3, #10
 80077d4:	f002 fce6 	bl	800a1a4 <_strtol_r>
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80077dc:	1ac2      	subs	r2, r0, r3
 80077de:	0023      	movs	r3, r4
 80077e0:	3370      	adds	r3, #112	@ 0x70
 80077e2:	33ff      	adds	r3, #255	@ 0xff
 80077e4:	429f      	cmp	r7, r3
 80077e6:	d302      	bcc.n	80077ee <_scanf_float+0x3ce>
 80077e8:	0027      	movs	r7, r4
 80077ea:	376f      	adds	r7, #111	@ 0x6f
 80077ec:	37ff      	adds	r7, #255	@ 0xff
 80077ee:	0038      	movs	r0, r7
 80077f0:	4910      	ldr	r1, [pc, #64]	@ (8007834 <_scanf_float+0x414>)
 80077f2:	f000 f8e7 	bl	80079c4 <siprintf>
 80077f6:	e7d0      	b.n	800779a <_scanf_float+0x37a>
 80077f8:	1d19      	adds	r1, r3, #4
 80077fa:	0752      	lsls	r2, r2, #29
 80077fc:	d502      	bpl.n	8007804 <_scanf_float+0x3e4>
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	e7d9      	b.n	80077b8 <_scanf_float+0x398>
 8007804:	9a07      	ldr	r2, [sp, #28]
 8007806:	0030      	movs	r0, r6
 8007808:	6011      	str	r1, [r2, #0]
 800780a:	681d      	ldr	r5, [r3, #0]
 800780c:	0032      	movs	r2, r6
 800780e:	003b      	movs	r3, r7
 8007810:	0039      	movs	r1, r7
 8007812:	f7fb fb07 	bl	8002e24 <__aeabi_dcmpun>
 8007816:	2800      	cmp	r0, #0
 8007818:	d004      	beq.n	8007824 <_scanf_float+0x404>
 800781a:	4807      	ldr	r0, [pc, #28]	@ (8007838 <_scanf_float+0x418>)
 800781c:	f000 f9d0 	bl	8007bc0 <nanf>
 8007820:	6028      	str	r0, [r5, #0]
 8007822:	e7cc      	b.n	80077be <_scanf_float+0x39e>
 8007824:	0030      	movs	r0, r6
 8007826:	0039      	movs	r1, r7
 8007828:	f7fb fbf4 	bl	8003014 <__aeabi_d2f>
 800782c:	e7f8      	b.n	8007820 <_scanf_float+0x400>
 800782e:	2300      	movs	r3, #0
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	e62d      	b.n	8007490 <_scanf_float+0x70>
 8007834:	0800b85c 	.word	0x0800b85c
 8007838:	0800bbf5 	.word	0x0800bbf5

0800783c <std>:
 800783c:	2300      	movs	r3, #0
 800783e:	b510      	push	{r4, lr}
 8007840:	0004      	movs	r4, r0
 8007842:	6003      	str	r3, [r0, #0]
 8007844:	6043      	str	r3, [r0, #4]
 8007846:	6083      	str	r3, [r0, #8]
 8007848:	8181      	strh	r1, [r0, #12]
 800784a:	6643      	str	r3, [r0, #100]	@ 0x64
 800784c:	81c2      	strh	r2, [r0, #14]
 800784e:	6103      	str	r3, [r0, #16]
 8007850:	6143      	str	r3, [r0, #20]
 8007852:	6183      	str	r3, [r0, #24]
 8007854:	0019      	movs	r1, r3
 8007856:	2208      	movs	r2, #8
 8007858:	305c      	adds	r0, #92	@ 0x5c
 800785a:	f000 f91f 	bl	8007a9c <memset>
 800785e:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <std+0x50>)
 8007860:	6224      	str	r4, [r4, #32]
 8007862:	6263      	str	r3, [r4, #36]	@ 0x24
 8007864:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <std+0x54>)
 8007866:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <std+0x58>)
 800786a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <std+0x5c>)
 800786e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007870:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <std+0x60>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d005      	beq.n	8007882 <std+0x46>
 8007876:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <std+0x64>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d002      	beq.n	8007882 <std+0x46>
 800787c:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <std+0x68>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d103      	bne.n	800788a <std+0x4e>
 8007882:	0020      	movs	r0, r4
 8007884:	3058      	adds	r0, #88	@ 0x58
 8007886:	f000 f98d 	bl	8007ba4 <__retarget_lock_init_recursive>
 800788a:	bd10      	pop	{r4, pc}
 800788c:	08007a05 	.word	0x08007a05
 8007890:	08007a2d 	.word	0x08007a2d
 8007894:	08007a65 	.word	0x08007a65
 8007898:	08007a91 	.word	0x08007a91
 800789c:	200002f0 	.word	0x200002f0
 80078a0:	20000358 	.word	0x20000358
 80078a4:	200003c0 	.word	0x200003c0

080078a8 <stdio_exit_handler>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	4a03      	ldr	r2, [pc, #12]	@ (80078b8 <stdio_exit_handler+0x10>)
 80078ac:	4903      	ldr	r1, [pc, #12]	@ (80078bc <stdio_exit_handler+0x14>)
 80078ae:	4804      	ldr	r0, [pc, #16]	@ (80078c0 <stdio_exit_handler+0x18>)
 80078b0:	f000 f86c 	bl	800798c <_fwalk_sglue>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	2000000c 	.word	0x2000000c
 80078bc:	0800a575 	.word	0x0800a575
 80078c0:	2000001c 	.word	0x2000001c

080078c4 <cleanup_stdio>:
 80078c4:	6841      	ldr	r1, [r0, #4]
 80078c6:	4b0b      	ldr	r3, [pc, #44]	@ (80078f4 <cleanup_stdio+0x30>)
 80078c8:	b510      	push	{r4, lr}
 80078ca:	0004      	movs	r4, r0
 80078cc:	4299      	cmp	r1, r3
 80078ce:	d001      	beq.n	80078d4 <cleanup_stdio+0x10>
 80078d0:	f002 fe50 	bl	800a574 <_fflush_r>
 80078d4:	68a1      	ldr	r1, [r4, #8]
 80078d6:	4b08      	ldr	r3, [pc, #32]	@ (80078f8 <cleanup_stdio+0x34>)
 80078d8:	4299      	cmp	r1, r3
 80078da:	d002      	beq.n	80078e2 <cleanup_stdio+0x1e>
 80078dc:	0020      	movs	r0, r4
 80078de:	f002 fe49 	bl	800a574 <_fflush_r>
 80078e2:	68e1      	ldr	r1, [r4, #12]
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <cleanup_stdio+0x38>)
 80078e6:	4299      	cmp	r1, r3
 80078e8:	d002      	beq.n	80078f0 <cleanup_stdio+0x2c>
 80078ea:	0020      	movs	r0, r4
 80078ec:	f002 fe42 	bl	800a574 <_fflush_r>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	200002f0 	.word	0x200002f0
 80078f8:	20000358 	.word	0x20000358
 80078fc:	200003c0 	.word	0x200003c0

08007900 <global_stdio_init.part.0>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4b09      	ldr	r3, [pc, #36]	@ (8007928 <global_stdio_init.part.0+0x28>)
 8007904:	4a09      	ldr	r2, [pc, #36]	@ (800792c <global_stdio_init.part.0+0x2c>)
 8007906:	2104      	movs	r1, #4
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	4809      	ldr	r0, [pc, #36]	@ (8007930 <global_stdio_init.part.0+0x30>)
 800790c:	2200      	movs	r2, #0
 800790e:	f7ff ff95 	bl	800783c <std>
 8007912:	2201      	movs	r2, #1
 8007914:	2109      	movs	r1, #9
 8007916:	4807      	ldr	r0, [pc, #28]	@ (8007934 <global_stdio_init.part.0+0x34>)
 8007918:	f7ff ff90 	bl	800783c <std>
 800791c:	2202      	movs	r2, #2
 800791e:	2112      	movs	r1, #18
 8007920:	4805      	ldr	r0, [pc, #20]	@ (8007938 <global_stdio_init.part.0+0x38>)
 8007922:	f7ff ff8b 	bl	800783c <std>
 8007926:	bd10      	pop	{r4, pc}
 8007928:	20000428 	.word	0x20000428
 800792c:	080078a9 	.word	0x080078a9
 8007930:	200002f0 	.word	0x200002f0
 8007934:	20000358 	.word	0x20000358
 8007938:	200003c0 	.word	0x200003c0

0800793c <__sfp_lock_acquire>:
 800793c:	b510      	push	{r4, lr}
 800793e:	4802      	ldr	r0, [pc, #8]	@ (8007948 <__sfp_lock_acquire+0xc>)
 8007940:	f000 f931 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 8007944:	bd10      	pop	{r4, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	20000431 	.word	0x20000431

0800794c <__sfp_lock_release>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4802      	ldr	r0, [pc, #8]	@ (8007958 <__sfp_lock_release+0xc>)
 8007950:	f000 f92a 	bl	8007ba8 <__retarget_lock_release_recursive>
 8007954:	bd10      	pop	{r4, pc}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	20000431 	.word	0x20000431

0800795c <__sinit>:
 800795c:	b510      	push	{r4, lr}
 800795e:	0004      	movs	r4, r0
 8007960:	f7ff ffec 	bl	800793c <__sfp_lock_acquire>
 8007964:	6a23      	ldr	r3, [r4, #32]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <__sinit+0x14>
 800796a:	f7ff ffef 	bl	800794c <__sfp_lock_release>
 800796e:	bd10      	pop	{r4, pc}
 8007970:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <__sinit+0x28>)
 8007972:	6223      	str	r3, [r4, #32]
 8007974:	4b04      	ldr	r3, [pc, #16]	@ (8007988 <__sinit+0x2c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f6      	bne.n	800796a <__sinit+0xe>
 800797c:	f7ff ffc0 	bl	8007900 <global_stdio_init.part.0>
 8007980:	e7f3      	b.n	800796a <__sinit+0xe>
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	080078c5 	.word	0x080078c5
 8007988:	20000428 	.word	0x20000428

0800798c <_fwalk_sglue>:
 800798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798e:	0014      	movs	r4, r2
 8007990:	2600      	movs	r6, #0
 8007992:	9000      	str	r0, [sp, #0]
 8007994:	9101      	str	r1, [sp, #4]
 8007996:	68a5      	ldr	r5, [r4, #8]
 8007998:	6867      	ldr	r7, [r4, #4]
 800799a:	3f01      	subs	r7, #1
 800799c:	d504      	bpl.n	80079a8 <_fwalk_sglue+0x1c>
 800799e:	6824      	ldr	r4, [r4, #0]
 80079a0:	2c00      	cmp	r4, #0
 80079a2:	d1f8      	bne.n	8007996 <_fwalk_sglue+0xa>
 80079a4:	0030      	movs	r0, r6
 80079a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079a8:	89ab      	ldrh	r3, [r5, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d908      	bls.n	80079c0 <_fwalk_sglue+0x34>
 80079ae:	220e      	movs	r2, #14
 80079b0:	5eab      	ldrsh	r3, [r5, r2]
 80079b2:	3301      	adds	r3, #1
 80079b4:	d004      	beq.n	80079c0 <_fwalk_sglue+0x34>
 80079b6:	0029      	movs	r1, r5
 80079b8:	9800      	ldr	r0, [sp, #0]
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	4798      	blx	r3
 80079be:	4306      	orrs	r6, r0
 80079c0:	3568      	adds	r5, #104	@ 0x68
 80079c2:	e7ea      	b.n	800799a <_fwalk_sglue+0xe>

080079c4 <siprintf>:
 80079c4:	b40e      	push	{r1, r2, r3}
 80079c6:	b500      	push	{lr}
 80079c8:	490b      	ldr	r1, [pc, #44]	@ (80079f8 <siprintf+0x34>)
 80079ca:	b09c      	sub	sp, #112	@ 0x70
 80079cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80079ce:	9002      	str	r0, [sp, #8]
 80079d0:	9006      	str	r0, [sp, #24]
 80079d2:	9107      	str	r1, [sp, #28]
 80079d4:	9104      	str	r1, [sp, #16]
 80079d6:	4809      	ldr	r0, [pc, #36]	@ (80079fc <siprintf+0x38>)
 80079d8:	4909      	ldr	r1, [pc, #36]	@ (8007a00 <siprintf+0x3c>)
 80079da:	cb04      	ldmia	r3!, {r2}
 80079dc:	9105      	str	r1, [sp, #20]
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	a902      	add	r1, sp, #8
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	f002 fc42 	bl	800a26c <_svfiprintf_r>
 80079e8:	2200      	movs	r2, #0
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	b01c      	add	sp, #112	@ 0x70
 80079f0:	bc08      	pop	{r3}
 80079f2:	b003      	add	sp, #12
 80079f4:	4718      	bx	r3
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	7fffffff 	.word	0x7fffffff
 80079fc:	20000018 	.word	0x20000018
 8007a00:	ffff0208 	.word	0xffff0208

08007a04 <__sread>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	000c      	movs	r4, r1
 8007a08:	250e      	movs	r5, #14
 8007a0a:	5f49      	ldrsh	r1, [r1, r5]
 8007a0c:	f000 f878 	bl	8007b00 <_read_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	db03      	blt.n	8007a1c <__sread+0x18>
 8007a14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007a16:	181b      	adds	r3, r3, r0
 8007a18:	6563      	str	r3, [r4, #84]	@ 0x54
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	4a02      	ldr	r2, [pc, #8]	@ (8007a28 <__sread+0x24>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	e7f9      	b.n	8007a1a <__sread+0x16>
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	ffffefff 	.word	0xffffefff

08007a2c <__swrite>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	001f      	movs	r7, r3
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	0005      	movs	r5, r0
 8007a34:	000c      	movs	r4, r1
 8007a36:	0016      	movs	r6, r2
 8007a38:	05db      	lsls	r3, r3, #23
 8007a3a:	d505      	bpl.n	8007a48 <__swrite+0x1c>
 8007a3c:	230e      	movs	r3, #14
 8007a3e:	5ec9      	ldrsh	r1, [r1, r3]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2302      	movs	r3, #2
 8007a44:	f000 f848 	bl	8007ad8 <_lseek_r>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	4a05      	ldr	r2, [pc, #20]	@ (8007a60 <__swrite+0x34>)
 8007a4c:	0028      	movs	r0, r5
 8007a4e:	4013      	ands	r3, r2
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	0032      	movs	r2, r6
 8007a54:	230e      	movs	r3, #14
 8007a56:	5ee1      	ldrsh	r1, [r4, r3]
 8007a58:	003b      	movs	r3, r7
 8007a5a:	f000 f865 	bl	8007b28 <_write_r>
 8007a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a60:	ffffefff 	.word	0xffffefff

08007a64 <__sseek>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	000c      	movs	r4, r1
 8007a68:	250e      	movs	r5, #14
 8007a6a:	5f49      	ldrsh	r1, [r1, r5]
 8007a6c:	f000 f834 	bl	8007ad8 <_lseek_r>
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	1c42      	adds	r2, r0, #1
 8007a74:	d103      	bne.n	8007a7e <__sseek+0x1a>
 8007a76:	4a05      	ldr	r2, [pc, #20]	@ (8007a8c <__sseek+0x28>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	2280      	movs	r2, #128	@ 0x80
 8007a80:	0152      	lsls	r2, r2, #5
 8007a82:	4313      	orrs	r3, r2
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a88:	e7f8      	b.n	8007a7c <__sseek+0x18>
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	ffffefff 	.word	0xffffefff

08007a90 <__sclose>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	230e      	movs	r3, #14
 8007a94:	5ec9      	ldrsh	r1, [r1, r3]
 8007a96:	f000 f80d 	bl	8007ab4 <_close_r>
 8007a9a:	bd10      	pop	{r4, pc}

08007a9c <memset>:
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	1882      	adds	r2, r0, r2
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	7019      	strb	r1, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <_localeconv_r>:
 8007aac:	4800      	ldr	r0, [pc, #0]	@ (8007ab0 <_localeconv_r+0x4>)
 8007aae:	4770      	bx	lr
 8007ab0:	20000158 	.word	0x20000158

08007ab4 <_close_r>:
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	4d06      	ldr	r5, [pc, #24]	@ (8007ad4 <_close_r+0x20>)
 8007aba:	0004      	movs	r4, r0
 8007abc:	0008      	movs	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fc fa49 	bl	8003f56 <_close>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d103      	bne.n	8007ad0 <_close_r+0x1c>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d000      	beq.n	8007ad0 <_close_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	46c0      	nop			@ (mov r8, r8)
 8007ad4:	2000042c 	.word	0x2000042c

08007ad8 <_lseek_r>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	0004      	movs	r4, r0
 8007adc:	0008      	movs	r0, r1
 8007ade:	0011      	movs	r1, r2
 8007ae0:	001a      	movs	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4d05      	ldr	r5, [pc, #20]	@ (8007afc <_lseek_r+0x24>)
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7fc fa56 	bl	8003f98 <_lseek>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d103      	bne.n	8007af8 <_lseek_r+0x20>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d000      	beq.n	8007af8 <_lseek_r+0x20>
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	2000042c 	.word	0x2000042c

08007b00 <_read_r>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	0004      	movs	r4, r0
 8007b04:	0008      	movs	r0, r1
 8007b06:	0011      	movs	r1, r2
 8007b08:	001a      	movs	r2, r3
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	4d05      	ldr	r5, [pc, #20]	@ (8007b24 <_read_r+0x24>)
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7fc f9e8 	bl	8003ee4 <_read>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d103      	bne.n	8007b20 <_read_r+0x20>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d000      	beq.n	8007b20 <_read_r+0x20>
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	2000042c 	.word	0x2000042c

08007b28 <_write_r>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	0004      	movs	r4, r0
 8007b2c:	0008      	movs	r0, r1
 8007b2e:	0011      	movs	r1, r2
 8007b30:	001a      	movs	r2, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	4d05      	ldr	r5, [pc, #20]	@ (8007b4c <_write_r+0x24>)
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7fc f9f1 	bl	8003f1e <_write>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d103      	bne.n	8007b48 <_write_r+0x20>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d000      	beq.n	8007b48 <_write_r+0x20>
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	46c0      	nop			@ (mov r8, r8)
 8007b4c:	2000042c 	.word	0x2000042c

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	@ (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	20000018 	.word	0x20000018

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	2600      	movs	r6, #0
 8007b60:	4c0c      	ldr	r4, [pc, #48]	@ (8007b94 <__libc_init_array+0x38>)
 8007b62:	4d0d      	ldr	r5, [pc, #52]	@ (8007b98 <__libc_init_array+0x3c>)
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	f003 fd51 	bl	800b614 <_init>
 8007b72:	4c0a      	ldr	r4, [pc, #40]	@ (8007b9c <__libc_init_array+0x40>)
 8007b74:	4d0a      	ldr	r5, [pc, #40]	@ (8007ba0 <__libc_init_array+0x44>)
 8007b76:	1b64      	subs	r4, r4, r5
 8007b78:	10a4      	asrs	r4, r4, #2
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	00b3      	lsls	r3, r6, #2
 8007b82:	58eb      	ldr	r3, [r5, r3]
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	00b3      	lsls	r3, r6, #2
 8007b8c:	58eb      	ldr	r3, [r5, r3]
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	0800bc60 	.word	0x0800bc60
 8007b98:	0800bc60 	.word	0x0800bc60
 8007b9c:	0800bc64 	.word	0x0800bc64
 8007ba0:	0800bc60 	.word	0x0800bc60

08007ba4 <__retarget_lock_init_recursive>:
 8007ba4:	4770      	bx	lr

08007ba6 <__retarget_lock_acquire_recursive>:
 8007ba6:	4770      	bx	lr

08007ba8 <__retarget_lock_release_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <memchr>:
 8007baa:	b2c9      	uxtb	r1, r1
 8007bac:	1882      	adds	r2, r0, r2
 8007bae:	4290      	cmp	r0, r2
 8007bb0:	d101      	bne.n	8007bb6 <memchr+0xc>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4770      	bx	lr
 8007bb6:	7803      	ldrb	r3, [r0, #0]
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	d0fb      	beq.n	8007bb4 <memchr+0xa>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	e7f6      	b.n	8007bae <memchr+0x4>

08007bc0 <nanf>:
 8007bc0:	4800      	ldr	r0, [pc, #0]	@ (8007bc4 <nanf+0x4>)
 8007bc2:	4770      	bx	lr
 8007bc4:	7fc00000 	.word	0x7fc00000

08007bc8 <quorem>:
 8007bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bca:	6902      	ldr	r2, [r0, #16]
 8007bcc:	690f      	ldr	r7, [r1, #16]
 8007bce:	b087      	sub	sp, #28
 8007bd0:	0006      	movs	r6, r0
 8007bd2:	000b      	movs	r3, r1
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	9102      	str	r1, [sp, #8]
 8007bd8:	42ba      	cmp	r2, r7
 8007bda:	db6d      	blt.n	8007cb8 <quorem+0xf0>
 8007bdc:	3f01      	subs	r7, #1
 8007bde:	00bc      	lsls	r4, r7, #2
 8007be0:	3314      	adds	r3, #20
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	191b      	adds	r3, r3, r4
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	0033      	movs	r3, r6
 8007bea:	3314      	adds	r3, #20
 8007bec:	191c      	adds	r4, r3, r4
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	9804      	ldr	r0, [sp, #16]
 8007bf8:	681d      	ldr	r5, [r3, #0]
 8007bfa:	3501      	adds	r5, #1
 8007bfc:	0029      	movs	r1, r5
 8007bfe:	f7f8 fa9f 	bl	8000140 <__udivsi3>
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	9000      	str	r0, [sp, #0]
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	d32b      	bcc.n	8007c62 <quorem+0x9a>
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	9d01      	ldr	r5, [sp, #4]
 8007c0e:	469c      	mov	ip, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	4662      	mov	r2, ip
 8007c18:	ca08      	ldmia	r2!, {r3}
 8007c1a:	6828      	ldr	r0, [r5, #0]
 8007c1c:	4694      	mov	ip, r2
 8007c1e:	9a00      	ldr	r2, [sp, #0]
 8007c20:	b299      	uxth	r1, r3
 8007c22:	4351      	muls	r1, r2
 8007c24:	9a05      	ldr	r2, [sp, #20]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	1889      	adds	r1, r1, r2
 8007c2a:	9a00      	ldr	r2, [sp, #0]
 8007c2c:	4353      	muls	r3, r2
 8007c2e:	0c0a      	lsrs	r2, r1, #16
 8007c30:	189b      	adds	r3, r3, r2
 8007c32:	0c1a      	lsrs	r2, r3, #16
 8007c34:	b289      	uxth	r1, r1
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	b282      	uxth	r2, r0
 8007c3a:	1a52      	subs	r2, r2, r1
 8007c3c:	9904      	ldr	r1, [sp, #16]
 8007c3e:	0c00      	lsrs	r0, r0, #16
 8007c40:	1852      	adds	r2, r2, r1
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	1411      	asrs	r1, r2, #16
 8007c46:	1ac3      	subs	r3, r0, r3
 8007c48:	185b      	adds	r3, r3, r1
 8007c4a:	1419      	asrs	r1, r3, #16
 8007c4c:	b292      	uxth	r2, r2
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	431a      	orrs	r2, r3
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	9104      	str	r1, [sp, #16]
 8007c56:	c504      	stmia	r5!, {r2}
 8007c58:	4563      	cmp	r3, ip
 8007c5a:	d2dc      	bcs.n	8007c16 <quorem+0x4e>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d030      	beq.n	8007cc4 <quorem+0xfc>
 8007c62:	0030      	movs	r0, r6
 8007c64:	9902      	ldr	r1, [sp, #8]
 8007c66:	f001 fa11 	bl	800908c <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	db23      	blt.n	8007cb6 <quorem+0xee>
 8007c6e:	0034      	movs	r4, r6
 8007c70:	2500      	movs	r5, #0
 8007c72:	9902      	ldr	r1, [sp, #8]
 8007c74:	3414      	adds	r4, #20
 8007c76:	3114      	adds	r1, #20
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	c901      	ldmia	r1!, {r0}
 8007c7c:	9302      	str	r3, [sp, #8]
 8007c7e:	466b      	mov	r3, sp
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	b282      	uxth	r2, r0
 8007c84:	1a9a      	subs	r2, r3, r2
 8007c86:	9b02      	ldr	r3, [sp, #8]
 8007c88:	1952      	adds	r2, r2, r5
 8007c8a:	0c00      	lsrs	r0, r0, #16
 8007c8c:	0c1b      	lsrs	r3, r3, #16
 8007c8e:	1a1b      	subs	r3, r3, r0
 8007c90:	1410      	asrs	r0, r2, #16
 8007c92:	181b      	adds	r3, r3, r0
 8007c94:	141d      	asrs	r5, r3, #16
 8007c96:	b292      	uxth	r2, r2
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	c404      	stmia	r4!, {r2}
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	d2e9      	bcs.n	8007c78 <quorem+0xb0>
 8007ca4:	9a01      	ldr	r2, [sp, #4]
 8007ca6:	00bb      	lsls	r3, r7, #2
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	2a00      	cmp	r2, #0
 8007cae:	d013      	beq.n	8007cd8 <quorem+0x110>
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	9800      	ldr	r0, [sp, #0]
 8007cb8:	b007      	add	sp, #28
 8007cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <quorem+0x104>
 8007cc2:	3f01      	subs	r7, #1
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	3c04      	subs	r4, #4
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d3f7      	bcc.n	8007cbc <quorem+0xf4>
 8007ccc:	6137      	str	r7, [r6, #16]
 8007cce:	e7c8      	b.n	8007c62 <quorem+0x9a>
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d104      	bne.n	8007ce0 <quorem+0x118>
 8007cd6:	3f01      	subs	r7, #1
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d3f7      	bcc.n	8007cd0 <quorem+0x108>
 8007ce0:	6137      	str	r7, [r6, #16]
 8007ce2:	e7e5      	b.n	8007cb0 <quorem+0xe8>

08007ce4 <_dtoa_r>:
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	0014      	movs	r4, r2
 8007ce8:	001d      	movs	r5, r3
 8007cea:	69c6      	ldr	r6, [r0, #28]
 8007cec:	b09d      	sub	sp, #116	@ 0x74
 8007cee:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cf0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007cf2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007cf4:	9003      	str	r0, [sp, #12]
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d10f      	bne.n	8007d1a <_dtoa_r+0x36>
 8007cfa:	2010      	movs	r0, #16
 8007cfc:	f000 fe30 	bl	8008960 <malloc>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	1e02      	subs	r2, r0, #0
 8007d04:	61d8      	str	r0, [r3, #28]
 8007d06:	d104      	bne.n	8007d12 <_dtoa_r+0x2e>
 8007d08:	21ef      	movs	r1, #239	@ 0xef
 8007d0a:	4bc7      	ldr	r3, [pc, #796]	@ (8008028 <_dtoa_r+0x344>)
 8007d0c:	48c7      	ldr	r0, [pc, #796]	@ (800802c <_dtoa_r+0x348>)
 8007d0e:	f002 fca3 	bl	800a658 <__assert_func>
 8007d12:	6046      	str	r6, [r0, #4]
 8007d14:	6086      	str	r6, [r0, #8]
 8007d16:	6006      	str	r6, [r0, #0]
 8007d18:	60c6      	str	r6, [r0, #12]
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	6819      	ldr	r1, [r3, #0]
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d00b      	beq.n	8007d3c <_dtoa_r+0x58>
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	2301      	movs	r3, #1
 8007d28:	4093      	lsls	r3, r2
 8007d2a:	604a      	str	r2, [r1, #4]
 8007d2c:	608b      	str	r3, [r1, #8]
 8007d2e:	9803      	ldr	r0, [sp, #12]
 8007d30:	f000 ff16 	bl	8008b60 <_Bfree>
 8007d34:	2200      	movs	r2, #0
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	da1e      	bge.n	8007d7e <_dtoa_r+0x9a>
 8007d40:	2301      	movs	r3, #1
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	006b      	lsls	r3, r5, #1
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d4c:	4bb8      	ldr	r3, [pc, #736]	@ (8008030 <_dtoa_r+0x34c>)
 8007d4e:	4ab8      	ldr	r2, [pc, #736]	@ (8008030 <_dtoa_r+0x34c>)
 8007d50:	403b      	ands	r3, r7
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d116      	bne.n	8007d84 <_dtoa_r+0xa0>
 8007d56:	4bb7      	ldr	r3, [pc, #732]	@ (8008034 <_dtoa_r+0x350>)
 8007d58:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	033b      	lsls	r3, r7, #12
 8007d5e:	0b1b      	lsrs	r3, r3, #12
 8007d60:	4323      	orrs	r3, r4
 8007d62:	d101      	bne.n	8007d68 <_dtoa_r+0x84>
 8007d64:	f000 fd83 	bl	800886e <_dtoa_r+0xb8a>
 8007d68:	4bb3      	ldr	r3, [pc, #716]	@ (8008038 <_dtoa_r+0x354>)
 8007d6a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	d002      	beq.n	8007d78 <_dtoa_r+0x94>
 8007d72:	4bb2      	ldr	r3, [pc, #712]	@ (800803c <_dtoa_r+0x358>)
 8007d74:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	9808      	ldr	r0, [sp, #32]
 8007d7a:	b01d      	add	sp, #116	@ 0x74
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7e:	2300      	movs	r3, #0
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	e7e2      	b.n	8007d4a <_dtoa_r+0x66>
 8007d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d88:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007d8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	f7f8 fb5a 	bl	800044c <__aeabi_dcmpeq>
 8007d98:	1e06      	subs	r6, r0, #0
 8007d9a:	d00b      	beq.n	8007db4 <_dtoa_r+0xd0>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <_dtoa_r+0xca>
 8007da8:	4ba5      	ldr	r3, [pc, #660]	@ (8008040 <_dtoa_r+0x35c>)
 8007daa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4ba5      	ldr	r3, [pc, #660]	@ (8008044 <_dtoa_r+0x360>)
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	e7e1      	b.n	8007d78 <_dtoa_r+0x94>
 8007db4:	ab1a      	add	r3, sp, #104	@ 0x68
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	9803      	ldr	r0, [sp, #12]
 8007dbe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007dc0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dc2:	f001 fa85 	bl	80092d0 <__d2b>
 8007dc6:	007a      	lsls	r2, r7, #1
 8007dc8:	9005      	str	r0, [sp, #20]
 8007dca:	0d52      	lsrs	r2, r2, #21
 8007dcc:	d100      	bne.n	8007dd0 <_dtoa_r+0xec>
 8007dce:	e07b      	b.n	8007ec8 <_dtoa_r+0x1e4>
 8007dd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dd2:	9618      	str	r6, [sp, #96]	@ 0x60
 8007dd4:	0319      	lsls	r1, r3, #12
 8007dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8008048 <_dtoa_r+0x364>)
 8007dd8:	0b09      	lsrs	r1, r1, #12
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	499b      	ldr	r1, [pc, #620]	@ (800804c <_dtoa_r+0x368>)
 8007dde:	1857      	adds	r7, r2, r1
 8007de0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007de2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007de4:	0019      	movs	r1, r3
 8007de6:	2200      	movs	r2, #0
 8007de8:	4b99      	ldr	r3, [pc, #612]	@ (8008050 <_dtoa_r+0x36c>)
 8007dea:	f7fa fc7f 	bl	80026ec <__aeabi_dsub>
 8007dee:	4a99      	ldr	r2, [pc, #612]	@ (8008054 <_dtoa_r+0x370>)
 8007df0:	4b99      	ldr	r3, [pc, #612]	@ (8008058 <_dtoa_r+0x374>)
 8007df2:	f7fa f9b3 	bl	800215c <__aeabi_dmul>
 8007df6:	4a99      	ldr	r2, [pc, #612]	@ (800805c <_dtoa_r+0x378>)
 8007df8:	4b99      	ldr	r3, [pc, #612]	@ (8008060 <_dtoa_r+0x37c>)
 8007dfa:	f7f9 fa07 	bl	800120c <__aeabi_dadd>
 8007dfe:	0004      	movs	r4, r0
 8007e00:	0038      	movs	r0, r7
 8007e02:	000d      	movs	r5, r1
 8007e04:	f7fb f86c 	bl	8002ee0 <__aeabi_i2d>
 8007e08:	4a96      	ldr	r2, [pc, #600]	@ (8008064 <_dtoa_r+0x380>)
 8007e0a:	4b97      	ldr	r3, [pc, #604]	@ (8008068 <_dtoa_r+0x384>)
 8007e0c:	f7fa f9a6 	bl	800215c <__aeabi_dmul>
 8007e10:	0002      	movs	r2, r0
 8007e12:	000b      	movs	r3, r1
 8007e14:	0020      	movs	r0, r4
 8007e16:	0029      	movs	r1, r5
 8007e18:	f7f9 f9f8 	bl	800120c <__aeabi_dadd>
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	f7fb f822 	bl	8002e68 <__aeabi_d2iz>
 8007e24:	2200      	movs	r2, #0
 8007e26:	9004      	str	r0, [sp, #16]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	0020      	movs	r0, r4
 8007e2c:	0029      	movs	r1, r5
 8007e2e:	f7f8 fb13 	bl	8000458 <__aeabi_dcmplt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d00b      	beq.n	8007e4e <_dtoa_r+0x16a>
 8007e36:	9804      	ldr	r0, [sp, #16]
 8007e38:	f7fb f852 	bl	8002ee0 <__aeabi_i2d>
 8007e3c:	002b      	movs	r3, r5
 8007e3e:	0022      	movs	r2, r4
 8007e40:	f7f8 fb04 	bl	800044c <__aeabi_dcmpeq>
 8007e44:	4243      	negs	r3, r0
 8007e46:	4158      	adcs	r0, r3
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	1a1b      	subs	r3, r3, r0
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	2b16      	cmp	r3, #22
 8007e56:	d810      	bhi.n	8007e7a <_dtoa_r+0x196>
 8007e58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	4b83      	ldr	r3, [pc, #524]	@ (800806c <_dtoa_r+0x388>)
 8007e60:	00d2      	lsls	r2, r2, #3
 8007e62:	189b      	adds	r3, r3, r2
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f7f8 faf6 	bl	8000458 <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d047      	beq.n	8007f00 <_dtoa_r+0x21c>
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007e7e:	9206      	str	r2, [sp, #24]
 8007e80:	1bdb      	subs	r3, r3, r7
 8007e82:	1e5a      	subs	r2, r3, #1
 8007e84:	d53e      	bpl.n	8007f04 <_dtoa_r+0x220>
 8007e86:	2201      	movs	r2, #1
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	9306      	str	r3, [sp, #24]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e90:	9b04      	ldr	r3, [sp, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db38      	blt.n	8007f08 <_dtoa_r+0x224>
 8007e96:	9a04      	ldr	r2, [sp, #16]
 8007e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e9a:	4694      	mov	ip, r2
 8007e9c:	4463      	add	r3, ip
 8007e9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ea4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ea8:	2401      	movs	r4, #1
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d867      	bhi.n	8007f7e <_dtoa_r+0x29a>
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	dd02      	ble.n	8007eb8 <_dtoa_r+0x1d4>
 8007eb2:	2400      	movs	r4, #0
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	9322      	str	r3, [sp, #136]	@ 0x88
 8007eb8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007eba:	1e98      	subs	r0, r3, #2
 8007ebc:	2803      	cmp	r0, #3
 8007ebe:	d867      	bhi.n	8007f90 <_dtoa_r+0x2ac>
 8007ec0:	f7f8 f92a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007ec4:	5b383a2b 	.word	0x5b383a2b
 8007ec8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007eca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007ecc:	18f6      	adds	r6, r6, r3
 8007ece:	4b68      	ldr	r3, [pc, #416]	@ (8008070 <_dtoa_r+0x38c>)
 8007ed0:	18f2      	adds	r2, r6, r3
 8007ed2:	2a20      	cmp	r2, #32
 8007ed4:	dd0f      	ble.n	8007ef6 <_dtoa_r+0x212>
 8007ed6:	2340      	movs	r3, #64	@ 0x40
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	409f      	lsls	r7, r3
 8007edc:	4b65      	ldr	r3, [pc, #404]	@ (8008074 <_dtoa_r+0x390>)
 8007ede:	0038      	movs	r0, r7
 8007ee0:	18f3      	adds	r3, r6, r3
 8007ee2:	40dc      	lsrs	r4, r3
 8007ee4:	4320      	orrs	r0, r4
 8007ee6:	f7fb f829 	bl	8002f3c <__aeabi_ui2d>
 8007eea:	2201      	movs	r2, #1
 8007eec:	4b62      	ldr	r3, [pc, #392]	@ (8008078 <_dtoa_r+0x394>)
 8007eee:	1e77      	subs	r7, r6, #1
 8007ef0:	18cb      	adds	r3, r1, r3
 8007ef2:	9218      	str	r2, [sp, #96]	@ 0x60
 8007ef4:	e776      	b.n	8007de4 <_dtoa_r+0x100>
 8007ef6:	2320      	movs	r3, #32
 8007ef8:	0020      	movs	r0, r4
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	4098      	lsls	r0, r3
 8007efe:	e7f2      	b.n	8007ee6 <_dtoa_r+0x202>
 8007f00:	9015      	str	r0, [sp, #84]	@ 0x54
 8007f02:	e7ba      	b.n	8007e7a <_dtoa_r+0x196>
 8007f04:	920d      	str	r2, [sp, #52]	@ 0x34
 8007f06:	e7c3      	b.n	8007e90 <_dtoa_r+0x1ac>
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	1a9b      	subs	r3, r3, r2
 8007f0e:	9306      	str	r3, [sp, #24]
 8007f10:	4253      	negs	r3, r2
 8007f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f14:	2300      	movs	r3, #0
 8007f16:	9314      	str	r3, [sp, #80]	@ 0x50
 8007f18:	e7c5      	b.n	8007ea6 <_dtoa_r+0x1c2>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f1e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f20:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc13      	bgt.n	8007f50 <_dtoa_r+0x26c>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	001a      	movs	r2, r3
 8007f2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f30:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007f32:	e00d      	b.n	8007f50 <_dtoa_r+0x26c>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e7f1      	b.n	8007f1c <_dtoa_r+0x238>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f3e:	4694      	mov	ip, r2
 8007f40:	9b04      	ldr	r3, [sp, #16]
 8007f42:	4463      	add	r3, ip
 8007f44:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f46:	3301      	adds	r3, #1
 8007f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dc00      	bgt.n	8007f50 <_dtoa_r+0x26c>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9a03      	ldr	r2, [sp, #12]
 8007f52:	2100      	movs	r1, #0
 8007f54:	69d0      	ldr	r0, [r2, #28]
 8007f56:	2204      	movs	r2, #4
 8007f58:	0015      	movs	r5, r2
 8007f5a:	3514      	adds	r5, #20
 8007f5c:	429d      	cmp	r5, r3
 8007f5e:	d91b      	bls.n	8007f98 <_dtoa_r+0x2b4>
 8007f60:	6041      	str	r1, [r0, #4]
 8007f62:	9803      	ldr	r0, [sp, #12]
 8007f64:	f000 fdb8 	bl	8008ad8 <_Balloc>
 8007f68:	9008      	str	r0, [sp, #32]
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d117      	bne.n	8007f9e <_dtoa_r+0x2ba>
 8007f6e:	21b0      	movs	r1, #176	@ 0xb0
 8007f70:	4b42      	ldr	r3, [pc, #264]	@ (800807c <_dtoa_r+0x398>)
 8007f72:	482e      	ldr	r0, [pc, #184]	@ (800802c <_dtoa_r+0x348>)
 8007f74:	9a08      	ldr	r2, [sp, #32]
 8007f76:	31ff      	adds	r1, #255	@ 0xff
 8007f78:	e6c9      	b.n	8007d0e <_dtoa_r+0x2a>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7dd      	b.n	8007f3a <_dtoa_r+0x256>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9410      	str	r4, [sp, #64]	@ 0x40
 8007f82:	9322      	str	r3, [sp, #136]	@ 0x88
 8007f84:	3b01      	subs	r3, #1
 8007f86:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	3313      	adds	r3, #19
 8007f8e:	e7cf      	b.n	8007f30 <_dtoa_r+0x24c>
 8007f90:	2301      	movs	r3, #1
 8007f92:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f94:	3b02      	subs	r3, #2
 8007f96:	e7f6      	b.n	8007f86 <_dtoa_r+0x2a2>
 8007f98:	3101      	adds	r1, #1
 8007f9a:	0052      	lsls	r2, r2, #1
 8007f9c:	e7dc      	b.n	8007f58 <_dtoa_r+0x274>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	9a08      	ldr	r2, [sp, #32]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa8:	2b0e      	cmp	r3, #14
 8007faa:	d900      	bls.n	8007fae <_dtoa_r+0x2ca>
 8007fac:	e0d9      	b.n	8008162 <_dtoa_r+0x47e>
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d100      	bne.n	8007fb4 <_dtoa_r+0x2d0>
 8007fb2:	e0d6      	b.n	8008162 <_dtoa_r+0x47e>
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd64      	ble.n	8008084 <_dtoa_r+0x3a0>
 8007fba:	210f      	movs	r1, #15
 8007fbc:	9a04      	ldr	r2, [sp, #16]
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <_dtoa_r+0x388>)
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	00d2      	lsls	r2, r2, #3
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	681e      	ldr	r6, [r3, #0]
 8007fc8:	685f      	ldr	r7, [r3, #4]
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	2402      	movs	r4, #2
 8007fce:	111d      	asrs	r5, r3, #4
 8007fd0:	05db      	lsls	r3, r3, #23
 8007fd2:	d50a      	bpl.n	8007fea <_dtoa_r+0x306>
 8007fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8008080 <_dtoa_r+0x39c>)
 8007fd6:	400d      	ands	r5, r1
 8007fd8:	6a1a      	ldr	r2, [r3, #32]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007fde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007fe0:	f7f9 fc78 	bl	80018d4 <__aeabi_ddiv>
 8007fe4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fe6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fe8:	3401      	adds	r4, #1
 8007fea:	4b25      	ldr	r3, [pc, #148]	@ (8008080 <_dtoa_r+0x39c>)
 8007fec:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	d108      	bne.n	8008004 <_dtoa_r+0x320>
 8007ff2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ff6:	0032      	movs	r2, r6
 8007ff8:	003b      	movs	r3, r7
 8007ffa:	f7f9 fc6b 	bl	80018d4 <__aeabi_ddiv>
 8007ffe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008000:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008002:	e05a      	b.n	80080ba <_dtoa_r+0x3d6>
 8008004:	2301      	movs	r3, #1
 8008006:	421d      	tst	r5, r3
 8008008:	d009      	beq.n	800801e <_dtoa_r+0x33a>
 800800a:	18e4      	adds	r4, r4, r3
 800800c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800800e:	0030      	movs	r0, r6
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	0039      	movs	r1, r7
 8008016:	f7fa f8a1 	bl	800215c <__aeabi_dmul>
 800801a:	0006      	movs	r6, r0
 800801c:	000f      	movs	r7, r1
 800801e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008020:	106d      	asrs	r5, r5, #1
 8008022:	3308      	adds	r3, #8
 8008024:	e7e2      	b.n	8007fec <_dtoa_r+0x308>
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	0800b86e 	.word	0x0800b86e
 800802c:	0800b885 	.word	0x0800b885
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	0000270f 	.word	0x0000270f
 8008038:	0800b86a 	.word	0x0800b86a
 800803c:	0800b86d 	.word	0x0800b86d
 8008040:	0800b839 	.word	0x0800b839
 8008044:	0800b838 	.word	0x0800b838
 8008048:	3ff00000 	.word	0x3ff00000
 800804c:	fffffc01 	.word	0xfffffc01
 8008050:	3ff80000 	.word	0x3ff80000
 8008054:	636f4361 	.word	0x636f4361
 8008058:	3fd287a7 	.word	0x3fd287a7
 800805c:	8b60c8b3 	.word	0x8b60c8b3
 8008060:	3fc68a28 	.word	0x3fc68a28
 8008064:	509f79fb 	.word	0x509f79fb
 8008068:	3fd34413 	.word	0x3fd34413
 800806c:	0800b980 	.word	0x0800b980
 8008070:	00000432 	.word	0x00000432
 8008074:	00000412 	.word	0x00000412
 8008078:	fe100000 	.word	0xfe100000
 800807c:	0800b8dd 	.word	0x0800b8dd
 8008080:	0800b958 	.word	0x0800b958
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	2402      	movs	r4, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d016      	beq.n	80080ba <_dtoa_r+0x3d6>
 800808c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800808e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008090:	220f      	movs	r2, #15
 8008092:	425d      	negs	r5, r3
 8008094:	402a      	ands	r2, r5
 8008096:	4bd7      	ldr	r3, [pc, #860]	@ (80083f4 <_dtoa_r+0x710>)
 8008098:	00d2      	lsls	r2, r2, #3
 800809a:	189b      	adds	r3, r3, r2
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f7fa f85c 	bl	800215c <__aeabi_dmul>
 80080a4:	2701      	movs	r7, #1
 80080a6:	2300      	movs	r3, #0
 80080a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80080aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080ac:	4ed2      	ldr	r6, [pc, #840]	@ (80083f8 <_dtoa_r+0x714>)
 80080ae:	112d      	asrs	r5, r5, #4
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	d000      	beq.n	80080b6 <_dtoa_r+0x3d2>
 80080b4:	e0ba      	b.n	800822c <_dtoa_r+0x548>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1a1      	bne.n	8007ffe <_dtoa_r+0x31a>
 80080ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80080be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d100      	bne.n	80080c6 <_dtoa_r+0x3e2>
 80080c4:	e0bd      	b.n	8008242 <_dtoa_r+0x55e>
 80080c6:	2200      	movs	r2, #0
 80080c8:	0030      	movs	r0, r6
 80080ca:	0039      	movs	r1, r7
 80080cc:	4bcb      	ldr	r3, [pc, #812]	@ (80083fc <_dtoa_r+0x718>)
 80080ce:	f7f8 f9c3 	bl	8000458 <__aeabi_dcmplt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d100      	bne.n	80080d8 <_dtoa_r+0x3f4>
 80080d6:	e0b4      	b.n	8008242 <_dtoa_r+0x55e>
 80080d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d100      	bne.n	80080e0 <_dtoa_r+0x3fc>
 80080de:	e0b0      	b.n	8008242 <_dtoa_r+0x55e>
 80080e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dd39      	ble.n	800815a <_dtoa_r+0x476>
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	2200      	movs	r2, #0
 80080ea:	3b01      	subs	r3, #1
 80080ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80080ee:	0030      	movs	r0, r6
 80080f0:	4bc3      	ldr	r3, [pc, #780]	@ (8008400 <_dtoa_r+0x71c>)
 80080f2:	0039      	movs	r1, r7
 80080f4:	f7fa f832 	bl	800215c <__aeabi_dmul>
 80080f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80080fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080fe:	3401      	adds	r4, #1
 8008100:	0020      	movs	r0, r4
 8008102:	9311      	str	r3, [sp, #68]	@ 0x44
 8008104:	f7fa feec 	bl	8002ee0 <__aeabi_i2d>
 8008108:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800810a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800810c:	f7fa f826 	bl	800215c <__aeabi_dmul>
 8008110:	4bbc      	ldr	r3, [pc, #752]	@ (8008404 <_dtoa_r+0x720>)
 8008112:	2200      	movs	r2, #0
 8008114:	f7f9 f87a 	bl	800120c <__aeabi_dadd>
 8008118:	4bbb      	ldr	r3, [pc, #748]	@ (8008408 <_dtoa_r+0x724>)
 800811a:	0006      	movs	r6, r0
 800811c:	18cf      	adds	r7, r1, r3
 800811e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008120:	2b00      	cmp	r3, #0
 8008122:	d000      	beq.n	8008126 <_dtoa_r+0x442>
 8008124:	e091      	b.n	800824a <_dtoa_r+0x566>
 8008126:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800812a:	2200      	movs	r2, #0
 800812c:	4bb7      	ldr	r3, [pc, #732]	@ (800840c <_dtoa_r+0x728>)
 800812e:	f7fa fadd 	bl	80026ec <__aeabi_dsub>
 8008132:	0032      	movs	r2, r6
 8008134:	003b      	movs	r3, r7
 8008136:	0004      	movs	r4, r0
 8008138:	000d      	movs	r5, r1
 800813a:	f7f8 f9a1 	bl	8000480 <__aeabi_dcmpgt>
 800813e:	2800      	cmp	r0, #0
 8008140:	d000      	beq.n	8008144 <_dtoa_r+0x460>
 8008142:	e29d      	b.n	8008680 <_dtoa_r+0x99c>
 8008144:	2180      	movs	r1, #128	@ 0x80
 8008146:	0609      	lsls	r1, r1, #24
 8008148:	187b      	adds	r3, r7, r1
 800814a:	0032      	movs	r2, r6
 800814c:	0020      	movs	r0, r4
 800814e:	0029      	movs	r1, r5
 8008150:	f7f8 f982 	bl	8000458 <__aeabi_dcmplt>
 8008154:	2800      	cmp	r0, #0
 8008156:	d000      	beq.n	800815a <_dtoa_r+0x476>
 8008158:	e130      	b.n	80083bc <_dtoa_r+0x6d8>
 800815a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800815c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800815e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008160:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008162:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008164:	2b00      	cmp	r3, #0
 8008166:	da00      	bge.n	800816a <_dtoa_r+0x486>
 8008168:	e177      	b.n	800845a <_dtoa_r+0x776>
 800816a:	9a04      	ldr	r2, [sp, #16]
 800816c:	2a0e      	cmp	r2, #14
 800816e:	dd00      	ble.n	8008172 <_dtoa_r+0x48e>
 8008170:	e173      	b.n	800845a <_dtoa_r+0x776>
 8008172:	4ba0      	ldr	r3, [pc, #640]	@ (80083f4 <_dtoa_r+0x710>)
 8008174:	00d2      	lsls	r2, r2, #3
 8008176:	189b      	adds	r3, r3, r2
 8008178:	685c      	ldr	r4, [r3, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	9306      	str	r3, [sp, #24]
 800817e:	9407      	str	r4, [sp, #28]
 8008180:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008182:	2b00      	cmp	r3, #0
 8008184:	da03      	bge.n	800818e <_dtoa_r+0x4aa>
 8008186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc00      	bgt.n	800818e <_dtoa_r+0x4aa>
 800818c:	e106      	b.n	800839c <_dtoa_r+0x6b8>
 800818e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008190:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008194:	9d08      	ldr	r5, [sp, #32]
 8008196:	3b01      	subs	r3, #1
 8008198:	195b      	adds	r3, r3, r5
 800819a:	930a      	str	r3, [sp, #40]	@ 0x28
 800819c:	9a06      	ldr	r2, [sp, #24]
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	0030      	movs	r0, r6
 80081a2:	0039      	movs	r1, r7
 80081a4:	f7f9 fb96 	bl	80018d4 <__aeabi_ddiv>
 80081a8:	f7fa fe5e 	bl	8002e68 <__aeabi_d2iz>
 80081ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80081ae:	f7fa fe97 	bl	8002ee0 <__aeabi_i2d>
 80081b2:	9a06      	ldr	r2, [sp, #24]
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	f7f9 ffd1 	bl	800215c <__aeabi_dmul>
 80081ba:	0002      	movs	r2, r0
 80081bc:	000b      	movs	r3, r1
 80081be:	0030      	movs	r0, r6
 80081c0:	0039      	movs	r1, r7
 80081c2:	f7fa fa93 	bl	80026ec <__aeabi_dsub>
 80081c6:	002b      	movs	r3, r5
 80081c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ca:	3501      	adds	r5, #1
 80081cc:	3230      	adds	r2, #48	@ 0x30
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081d2:	002c      	movs	r4, r5
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d000      	beq.n	80081da <_dtoa_r+0x4f6>
 80081d8:	e131      	b.n	800843e <_dtoa_r+0x75a>
 80081da:	0002      	movs	r2, r0
 80081dc:	000b      	movs	r3, r1
 80081de:	f7f9 f815 	bl	800120c <__aeabi_dadd>
 80081e2:	9a06      	ldr	r2, [sp, #24]
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	0006      	movs	r6, r0
 80081e8:	000f      	movs	r7, r1
 80081ea:	f7f8 f949 	bl	8000480 <__aeabi_dcmpgt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d000      	beq.n	80081f4 <_dtoa_r+0x510>
 80081f2:	e10f      	b.n	8008414 <_dtoa_r+0x730>
 80081f4:	9a06      	ldr	r2, [sp, #24]
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	0030      	movs	r0, r6
 80081fa:	0039      	movs	r1, r7
 80081fc:	f7f8 f926 	bl	800044c <__aeabi_dcmpeq>
 8008200:	2800      	cmp	r0, #0
 8008202:	d003      	beq.n	800820c <_dtoa_r+0x528>
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	07dd      	lsls	r5, r3, #31
 8008208:	d500      	bpl.n	800820c <_dtoa_r+0x528>
 800820a:	e103      	b.n	8008414 <_dtoa_r+0x730>
 800820c:	9905      	ldr	r1, [sp, #20]
 800820e:	9803      	ldr	r0, [sp, #12]
 8008210:	f000 fca6 	bl	8008b60 <_Bfree>
 8008214:	2300      	movs	r3, #0
 8008216:	7023      	strb	r3, [r4, #0]
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800821c:	3301      	adds	r3, #1
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008222:	2b00      	cmp	r3, #0
 8008224:	d100      	bne.n	8008228 <_dtoa_r+0x544>
 8008226:	e5a7      	b.n	8007d78 <_dtoa_r+0x94>
 8008228:	601c      	str	r4, [r3, #0]
 800822a:	e5a5      	b.n	8007d78 <_dtoa_r+0x94>
 800822c:	423d      	tst	r5, r7
 800822e:	d005      	beq.n	800823c <_dtoa_r+0x558>
 8008230:	6832      	ldr	r2, [r6, #0]
 8008232:	6873      	ldr	r3, [r6, #4]
 8008234:	f7f9 ff92 	bl	800215c <__aeabi_dmul>
 8008238:	003b      	movs	r3, r7
 800823a:	3401      	adds	r4, #1
 800823c:	106d      	asrs	r5, r5, #1
 800823e:	3608      	adds	r6, #8
 8008240:	e736      	b.n	80080b0 <_dtoa_r+0x3cc>
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	930c      	str	r3, [sp, #48]	@ 0x30
 8008246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008248:	e75a      	b.n	8008100 <_dtoa_r+0x41c>
 800824a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800824c:	4b69      	ldr	r3, [pc, #420]	@ (80083f4 <_dtoa_r+0x710>)
 800824e:	3a01      	subs	r2, #1
 8008250:	00d2      	lsls	r2, r2, #3
 8008252:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008254:	189b      	adds	r3, r3, r2
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2900      	cmp	r1, #0
 800825c:	d04c      	beq.n	80082f8 <_dtoa_r+0x614>
 800825e:	2000      	movs	r0, #0
 8008260:	496b      	ldr	r1, [pc, #428]	@ (8008410 <_dtoa_r+0x72c>)
 8008262:	f7f9 fb37 	bl	80018d4 <__aeabi_ddiv>
 8008266:	0032      	movs	r2, r6
 8008268:	003b      	movs	r3, r7
 800826a:	f7fa fa3f 	bl	80026ec <__aeabi_dsub>
 800826e:	9a08      	ldr	r2, [sp, #32]
 8008270:	0006      	movs	r6, r0
 8008272:	4694      	mov	ip, r2
 8008274:	000f      	movs	r7, r1
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	9316      	str	r3, [sp, #88]	@ 0x58
 800827a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800827c:	4463      	add	r3, ip
 800827e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008280:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008282:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008284:	f7fa fdf0 	bl	8002e68 <__aeabi_d2iz>
 8008288:	0005      	movs	r5, r0
 800828a:	f7fa fe29 	bl	8002ee0 <__aeabi_i2d>
 800828e:	0002      	movs	r2, r0
 8008290:	000b      	movs	r3, r1
 8008292:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008294:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008296:	f7fa fa29 	bl	80026ec <__aeabi_dsub>
 800829a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800829c:	3530      	adds	r5, #48	@ 0x30
 800829e:	1c5c      	adds	r4, r3, #1
 80082a0:	701d      	strb	r5, [r3, #0]
 80082a2:	0032      	movs	r2, r6
 80082a4:	003b      	movs	r3, r7
 80082a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80082a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082aa:	f7f8 f8d5 	bl	8000458 <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d16a      	bne.n	8008388 <_dtoa_r+0x6a4>
 80082b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082b6:	2000      	movs	r0, #0
 80082b8:	4950      	ldr	r1, [pc, #320]	@ (80083fc <_dtoa_r+0x718>)
 80082ba:	f7fa fa17 	bl	80026ec <__aeabi_dsub>
 80082be:	0032      	movs	r2, r6
 80082c0:	003b      	movs	r3, r7
 80082c2:	f7f8 f8c9 	bl	8000458 <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d000      	beq.n	80082cc <_dtoa_r+0x5e8>
 80082ca:	e0a5      	b.n	8008418 <_dtoa_r+0x734>
 80082cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	d100      	bne.n	80082d4 <_dtoa_r+0x5f0>
 80082d2:	e742      	b.n	800815a <_dtoa_r+0x476>
 80082d4:	2200      	movs	r2, #0
 80082d6:	0030      	movs	r0, r6
 80082d8:	0039      	movs	r1, r7
 80082da:	4b49      	ldr	r3, [pc, #292]	@ (8008400 <_dtoa_r+0x71c>)
 80082dc:	f7f9 ff3e 	bl	800215c <__aeabi_dmul>
 80082e0:	2200      	movs	r2, #0
 80082e2:	0006      	movs	r6, r0
 80082e4:	000f      	movs	r7, r1
 80082e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082ea:	4b45      	ldr	r3, [pc, #276]	@ (8008400 <_dtoa_r+0x71c>)
 80082ec:	f7f9 ff36 	bl	800215c <__aeabi_dmul>
 80082f0:	9416      	str	r4, [sp, #88]	@ 0x58
 80082f2:	900a      	str	r0, [sp, #40]	@ 0x28
 80082f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082f6:	e7c3      	b.n	8008280 <_dtoa_r+0x59c>
 80082f8:	0030      	movs	r0, r6
 80082fa:	0039      	movs	r1, r7
 80082fc:	f7f9 ff2e 	bl	800215c <__aeabi_dmul>
 8008300:	9d08      	ldr	r5, [sp, #32]
 8008302:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008304:	002b      	movs	r3, r5
 8008306:	4694      	mov	ip, r2
 8008308:	9016      	str	r0, [sp, #88]	@ 0x58
 800830a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800830c:	4463      	add	r3, ip
 800830e:	9319      	str	r3, [sp, #100]	@ 0x64
 8008310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008314:	f7fa fda8 	bl	8002e68 <__aeabi_d2iz>
 8008318:	0004      	movs	r4, r0
 800831a:	f7fa fde1 	bl	8002ee0 <__aeabi_i2d>
 800831e:	000b      	movs	r3, r1
 8008320:	0002      	movs	r2, r0
 8008322:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008324:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008326:	f7fa f9e1 	bl	80026ec <__aeabi_dsub>
 800832a:	3430      	adds	r4, #48	@ 0x30
 800832c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832e:	702c      	strb	r4, [r5, #0]
 8008330:	3501      	adds	r5, #1
 8008332:	0006      	movs	r6, r0
 8008334:	000f      	movs	r7, r1
 8008336:	42ab      	cmp	r3, r5
 8008338:	d129      	bne.n	800838e <_dtoa_r+0x6aa>
 800833a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800833c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800833e:	9b08      	ldr	r3, [sp, #32]
 8008340:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008342:	469c      	mov	ip, r3
 8008344:	2200      	movs	r2, #0
 8008346:	4b32      	ldr	r3, [pc, #200]	@ (8008410 <_dtoa_r+0x72c>)
 8008348:	4464      	add	r4, ip
 800834a:	f7f8 ff5f 	bl	800120c <__aeabi_dadd>
 800834e:	0002      	movs	r2, r0
 8008350:	000b      	movs	r3, r1
 8008352:	0030      	movs	r0, r6
 8008354:	0039      	movs	r1, r7
 8008356:	f7f8 f893 	bl	8000480 <__aeabi_dcmpgt>
 800835a:	2800      	cmp	r0, #0
 800835c:	d15c      	bne.n	8008418 <_dtoa_r+0x734>
 800835e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008360:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008362:	2000      	movs	r0, #0
 8008364:	492a      	ldr	r1, [pc, #168]	@ (8008410 <_dtoa_r+0x72c>)
 8008366:	f7fa f9c1 	bl	80026ec <__aeabi_dsub>
 800836a:	0002      	movs	r2, r0
 800836c:	000b      	movs	r3, r1
 800836e:	0030      	movs	r0, r6
 8008370:	0039      	movs	r1, r7
 8008372:	f7f8 f871 	bl	8000458 <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	d100      	bne.n	800837c <_dtoa_r+0x698>
 800837a:	e6ee      	b.n	800815a <_dtoa_r+0x476>
 800837c:	0023      	movs	r3, r4
 800837e:	3c01      	subs	r4, #1
 8008380:	7822      	ldrb	r2, [r4, #0]
 8008382:	2a30      	cmp	r2, #48	@ 0x30
 8008384:	d0fa      	beq.n	800837c <_dtoa_r+0x698>
 8008386:	001c      	movs	r4, r3
 8008388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	e73e      	b.n	800820c <_dtoa_r+0x528>
 800838e:	2200      	movs	r2, #0
 8008390:	4b1b      	ldr	r3, [pc, #108]	@ (8008400 <_dtoa_r+0x71c>)
 8008392:	f7f9 fee3 	bl	800215c <__aeabi_dmul>
 8008396:	900a      	str	r0, [sp, #40]	@ 0x28
 8008398:	910b      	str	r1, [sp, #44]	@ 0x2c
 800839a:	e7b9      	b.n	8008310 <_dtoa_r+0x62c>
 800839c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10c      	bne.n	80083bc <_dtoa_r+0x6d8>
 80083a2:	9806      	ldr	r0, [sp, #24]
 80083a4:	9907      	ldr	r1, [sp, #28]
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b18      	ldr	r3, [pc, #96]	@ (800840c <_dtoa_r+0x728>)
 80083aa:	f7f9 fed7 	bl	800215c <__aeabi_dmul>
 80083ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b2:	f7f8 f86f 	bl	8000494 <__aeabi_dcmpge>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d100      	bne.n	80083bc <_dtoa_r+0x6d8>
 80083ba:	e164      	b.n	8008686 <_dtoa_r+0x9a2>
 80083bc:	2600      	movs	r6, #0
 80083be:	0037      	movs	r7, r6
 80083c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083c2:	9c08      	ldr	r4, [sp, #32]
 80083c4:	43db      	mvns	r3, r3
 80083c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80083c8:	2300      	movs	r3, #0
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	0031      	movs	r1, r6
 80083ce:	9803      	ldr	r0, [sp, #12]
 80083d0:	f000 fbc6 	bl	8008b60 <_Bfree>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	d0d7      	beq.n	8008388 <_dtoa_r+0x6a4>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <_dtoa_r+0x706>
 80083de:	42bb      	cmp	r3, r7
 80083e0:	d003      	beq.n	80083ea <_dtoa_r+0x706>
 80083e2:	0019      	movs	r1, r3
 80083e4:	9803      	ldr	r0, [sp, #12]
 80083e6:	f000 fbbb 	bl	8008b60 <_Bfree>
 80083ea:	0039      	movs	r1, r7
 80083ec:	9803      	ldr	r0, [sp, #12]
 80083ee:	f000 fbb7 	bl	8008b60 <_Bfree>
 80083f2:	e7c9      	b.n	8008388 <_dtoa_r+0x6a4>
 80083f4:	0800b980 	.word	0x0800b980
 80083f8:	0800b958 	.word	0x0800b958
 80083fc:	3ff00000 	.word	0x3ff00000
 8008400:	40240000 	.word	0x40240000
 8008404:	401c0000 	.word	0x401c0000
 8008408:	fcc00000 	.word	0xfcc00000
 800840c:	40140000 	.word	0x40140000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	930c      	str	r3, [sp, #48]	@ 0x30
 8008418:	0023      	movs	r3, r4
 800841a:	001c      	movs	r4, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	781a      	ldrb	r2, [r3, #0]
 8008420:	2a39      	cmp	r2, #57	@ 0x39
 8008422:	d108      	bne.n	8008436 <_dtoa_r+0x752>
 8008424:	9a08      	ldr	r2, [sp, #32]
 8008426:	429a      	cmp	r2, r3
 8008428:	d1f7      	bne.n	800841a <_dtoa_r+0x736>
 800842a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800842c:	9908      	ldr	r1, [sp, #32]
 800842e:	3201      	adds	r2, #1
 8008430:	920c      	str	r2, [sp, #48]	@ 0x30
 8008432:	2230      	movs	r2, #48	@ 0x30
 8008434:	700a      	strb	r2, [r1, #0]
 8008436:	781a      	ldrb	r2, [r3, #0]
 8008438:	3201      	adds	r2, #1
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e7a4      	b.n	8008388 <_dtoa_r+0x6a4>
 800843e:	2200      	movs	r2, #0
 8008440:	4bc6      	ldr	r3, [pc, #792]	@ (800875c <_dtoa_r+0xa78>)
 8008442:	f7f9 fe8b 	bl	800215c <__aeabi_dmul>
 8008446:	2200      	movs	r2, #0
 8008448:	2300      	movs	r3, #0
 800844a:	0006      	movs	r6, r0
 800844c:	000f      	movs	r7, r1
 800844e:	f7f7 fffd 	bl	800044c <__aeabi_dcmpeq>
 8008452:	2800      	cmp	r0, #0
 8008454:	d100      	bne.n	8008458 <_dtoa_r+0x774>
 8008456:	e6a1      	b.n	800819c <_dtoa_r+0x4b8>
 8008458:	e6d8      	b.n	800820c <_dtoa_r+0x528>
 800845a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800845c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800845e:	9c06      	ldr	r4, [sp, #24]
 8008460:	2f00      	cmp	r7, #0
 8008462:	d014      	beq.n	800848e <_dtoa_r+0x7aa>
 8008464:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008466:	2a01      	cmp	r2, #1
 8008468:	dd00      	ble.n	800846c <_dtoa_r+0x788>
 800846a:	e0c8      	b.n	80085fe <_dtoa_r+0x91a>
 800846c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800846e:	2a00      	cmp	r2, #0
 8008470:	d100      	bne.n	8008474 <_dtoa_r+0x790>
 8008472:	e0be      	b.n	80085f2 <_dtoa_r+0x90e>
 8008474:	4aba      	ldr	r2, [pc, #744]	@ (8008760 <_dtoa_r+0xa7c>)
 8008476:	189b      	adds	r3, r3, r2
 8008478:	9a06      	ldr	r2, [sp, #24]
 800847a:	2101      	movs	r1, #1
 800847c:	18d2      	adds	r2, r2, r3
 800847e:	9206      	str	r2, [sp, #24]
 8008480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008482:	9803      	ldr	r0, [sp, #12]
 8008484:	18d3      	adds	r3, r2, r3
 8008486:	930d      	str	r3, [sp, #52]	@ 0x34
 8008488:	f000 fc6e 	bl	8008d68 <__i2b>
 800848c:	0007      	movs	r7, r0
 800848e:	2c00      	cmp	r4, #0
 8008490:	d00e      	beq.n	80084b0 <_dtoa_r+0x7cc>
 8008492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008494:	2b00      	cmp	r3, #0
 8008496:	dd0b      	ble.n	80084b0 <_dtoa_r+0x7cc>
 8008498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800849a:	0023      	movs	r3, r4
 800849c:	4294      	cmp	r4, r2
 800849e:	dd00      	ble.n	80084a2 <_dtoa_r+0x7be>
 80084a0:	0013      	movs	r3, r2
 80084a2:	9a06      	ldr	r2, [sp, #24]
 80084a4:	1ae4      	subs	r4, r4, r3
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	9206      	str	r2, [sp, #24]
 80084aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80084b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01f      	beq.n	80084f6 <_dtoa_r+0x812>
 80084b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d100      	bne.n	80084be <_dtoa_r+0x7da>
 80084bc:	e0b5      	b.n	800862a <_dtoa_r+0x946>
 80084be:	2d00      	cmp	r5, #0
 80084c0:	d010      	beq.n	80084e4 <_dtoa_r+0x800>
 80084c2:	0039      	movs	r1, r7
 80084c4:	002a      	movs	r2, r5
 80084c6:	9803      	ldr	r0, [sp, #12]
 80084c8:	f000 fd18 	bl	8008efc <__pow5mult>
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	0001      	movs	r1, r0
 80084d0:	0007      	movs	r7, r0
 80084d2:	9803      	ldr	r0, [sp, #12]
 80084d4:	f000 fc60 	bl	8008d98 <__multiply>
 80084d8:	0006      	movs	r6, r0
 80084da:	9905      	ldr	r1, [sp, #20]
 80084dc:	9803      	ldr	r0, [sp, #12]
 80084de:	f000 fb3f 	bl	8008b60 <_Bfree>
 80084e2:	9605      	str	r6, [sp, #20]
 80084e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e6:	1b5a      	subs	r2, r3, r5
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	d004      	beq.n	80084f6 <_dtoa_r+0x812>
 80084ec:	9905      	ldr	r1, [sp, #20]
 80084ee:	9803      	ldr	r0, [sp, #12]
 80084f0:	f000 fd04 	bl	8008efc <__pow5mult>
 80084f4:	9005      	str	r0, [sp, #20]
 80084f6:	2101      	movs	r1, #1
 80084f8:	9803      	ldr	r0, [sp, #12]
 80084fa:	f000 fc35 	bl	8008d68 <__i2b>
 80084fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008500:	0006      	movs	r6, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d100      	bne.n	8008508 <_dtoa_r+0x824>
 8008506:	e1bc      	b.n	8008882 <_dtoa_r+0xb9e>
 8008508:	001a      	movs	r2, r3
 800850a:	0001      	movs	r1, r0
 800850c:	9803      	ldr	r0, [sp, #12]
 800850e:	f000 fcf5 	bl	8008efc <__pow5mult>
 8008512:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008514:	0006      	movs	r6, r0
 8008516:	2500      	movs	r5, #0
 8008518:	2b01      	cmp	r3, #1
 800851a:	dc16      	bgt.n	800854a <_dtoa_r+0x866>
 800851c:	2500      	movs	r5, #0
 800851e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008520:	42ab      	cmp	r3, r5
 8008522:	d10e      	bne.n	8008542 <_dtoa_r+0x85e>
 8008524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008526:	031b      	lsls	r3, r3, #12
 8008528:	42ab      	cmp	r3, r5
 800852a:	d10a      	bne.n	8008542 <_dtoa_r+0x85e>
 800852c:	4b8d      	ldr	r3, [pc, #564]	@ (8008764 <_dtoa_r+0xa80>)
 800852e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008530:	4213      	tst	r3, r2
 8008532:	d006      	beq.n	8008542 <_dtoa_r+0x85e>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	3501      	adds	r5, #1
 8008538:	3301      	adds	r3, #1
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800853e:	3301      	adds	r3, #1
 8008540:	930d      	str	r3, [sp, #52]	@ 0x34
 8008542:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008544:	2001      	movs	r0, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d008      	beq.n	800855c <_dtoa_r+0x878>
 800854a:	6933      	ldr	r3, [r6, #16]
 800854c:	3303      	adds	r3, #3
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	18f3      	adds	r3, r6, r3
 8008552:	6858      	ldr	r0, [r3, #4]
 8008554:	f000 fbb8 	bl	8008cc8 <__hi0bits>
 8008558:	2320      	movs	r3, #32
 800855a:	1a18      	subs	r0, r3, r0
 800855c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800855e:	1818      	adds	r0, r3, r0
 8008560:	0002      	movs	r2, r0
 8008562:	231f      	movs	r3, #31
 8008564:	401a      	ands	r2, r3
 8008566:	4218      	tst	r0, r3
 8008568:	d065      	beq.n	8008636 <_dtoa_r+0x952>
 800856a:	3301      	adds	r3, #1
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	2b04      	cmp	r3, #4
 8008570:	dd5d      	ble.n	800862e <_dtoa_r+0x94a>
 8008572:	231c      	movs	r3, #28
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	9a06      	ldr	r2, [sp, #24]
 8008578:	18e4      	adds	r4, r4, r3
 800857a:	18d2      	adds	r2, r2, r3
 800857c:	9206      	str	r2, [sp, #24]
 800857e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008580:	18d3      	adds	r3, r2, r3
 8008582:	930d      	str	r3, [sp, #52]	@ 0x34
 8008584:	9b06      	ldr	r3, [sp, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd05      	ble.n	8008596 <_dtoa_r+0x8b2>
 800858a:	001a      	movs	r2, r3
 800858c:	9905      	ldr	r1, [sp, #20]
 800858e:	9803      	ldr	r0, [sp, #12]
 8008590:	f000 fd10 	bl	8008fb4 <__lshift>
 8008594:	9005      	str	r0, [sp, #20]
 8008596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008598:	2b00      	cmp	r3, #0
 800859a:	dd05      	ble.n	80085a8 <_dtoa_r+0x8c4>
 800859c:	0031      	movs	r1, r6
 800859e:	001a      	movs	r2, r3
 80085a0:	9803      	ldr	r0, [sp, #12]
 80085a2:	f000 fd07 	bl	8008fb4 <__lshift>
 80085a6:	0006      	movs	r6, r0
 80085a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d045      	beq.n	800863a <_dtoa_r+0x956>
 80085ae:	0031      	movs	r1, r6
 80085b0:	9805      	ldr	r0, [sp, #20]
 80085b2:	f000 fd6b 	bl	800908c <__mcmp>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	da3f      	bge.n	800863a <_dtoa_r+0x956>
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	220a      	movs	r2, #10
 80085be:	3b01      	subs	r3, #1
 80085c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80085c2:	9905      	ldr	r1, [sp, #20]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9803      	ldr	r0, [sp, #12]
 80085c8:	f000 faee 	bl	8008ba8 <__multadd>
 80085cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085ce:	9005      	str	r0, [sp, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <_dtoa_r+0x8f2>
 80085d4:	e15c      	b.n	8008890 <_dtoa_r+0xbac>
 80085d6:	2300      	movs	r3, #0
 80085d8:	0039      	movs	r1, r7
 80085da:	220a      	movs	r2, #10
 80085dc:	9803      	ldr	r0, [sp, #12]
 80085de:	f000 fae3 	bl	8008ba8 <__multadd>
 80085e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085e4:	0007      	movs	r7, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc55      	bgt.n	8008696 <_dtoa_r+0x9b2>
 80085ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	dc2d      	bgt.n	800864c <_dtoa_r+0x968>
 80085f0:	e051      	b.n	8008696 <_dtoa_r+0x9b2>
 80085f2:	2336      	movs	r3, #54	@ 0x36
 80085f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80085f8:	9c06      	ldr	r4, [sp, #24]
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	e73c      	b.n	8008478 <_dtoa_r+0x794>
 80085fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008600:	1e5d      	subs	r5, r3, #1
 8008602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008604:	42ab      	cmp	r3, r5
 8008606:	db08      	blt.n	800861a <_dtoa_r+0x936>
 8008608:	1b5d      	subs	r5, r3, r5
 800860a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860c:	9c06      	ldr	r4, [sp, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	db00      	blt.n	8008614 <_dtoa_r+0x930>
 8008612:	e731      	b.n	8008478 <_dtoa_r+0x794>
 8008614:	1ae4      	subs	r4, r4, r3
 8008616:	2300      	movs	r3, #0
 8008618:	e72e      	b.n	8008478 <_dtoa_r+0x794>
 800861a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800861e:	1aeb      	subs	r3, r5, r3
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008624:	9314      	str	r3, [sp, #80]	@ 0x50
 8008626:	2500      	movs	r5, #0
 8008628:	e7ef      	b.n	800860a <_dtoa_r+0x926>
 800862a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800862c:	e75e      	b.n	80084ec <_dtoa_r+0x808>
 800862e:	2b04      	cmp	r3, #4
 8008630:	d0a8      	beq.n	8008584 <_dtoa_r+0x8a0>
 8008632:	331c      	adds	r3, #28
 8008634:	e79f      	b.n	8008576 <_dtoa_r+0x892>
 8008636:	0013      	movs	r3, r2
 8008638:	e7fb      	b.n	8008632 <_dtoa_r+0x94e>
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	930c      	str	r3, [sp, #48]	@ 0x30
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	930e      	str	r3, [sp, #56]	@ 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	dc23      	bgt.n	800868e <_dtoa_r+0x9aa>
 8008646:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008648:	2b02      	cmp	r3, #2
 800864a:	dd20      	ble.n	800868e <_dtoa_r+0x9aa>
 800864c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800864e:	2b00      	cmp	r3, #0
 8008650:	d000      	beq.n	8008654 <_dtoa_r+0x970>
 8008652:	e6b5      	b.n	80083c0 <_dtoa_r+0x6dc>
 8008654:	0031      	movs	r1, r6
 8008656:	2205      	movs	r2, #5
 8008658:	9803      	ldr	r0, [sp, #12]
 800865a:	f000 faa5 	bl	8008ba8 <__multadd>
 800865e:	0006      	movs	r6, r0
 8008660:	0001      	movs	r1, r0
 8008662:	9805      	ldr	r0, [sp, #20]
 8008664:	f000 fd12 	bl	800908c <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	dc00      	bgt.n	800866e <_dtoa_r+0x98a>
 800866c:	e6a8      	b.n	80083c0 <_dtoa_r+0x6dc>
 800866e:	9b08      	ldr	r3, [sp, #32]
 8008670:	9a08      	ldr	r2, [sp, #32]
 8008672:	1c5c      	adds	r4, r3, #1
 8008674:	2331      	movs	r3, #49	@ 0x31
 8008676:	7013      	strb	r3, [r2, #0]
 8008678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800867a:	3301      	adds	r3, #1
 800867c:	930c      	str	r3, [sp, #48]	@ 0x30
 800867e:	e6a3      	b.n	80083c8 <_dtoa_r+0x6e4>
 8008680:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008682:	0037      	movs	r7, r6
 8008684:	e7f3      	b.n	800866e <_dtoa_r+0x98a>
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800868a:	930c      	str	r3, [sp, #48]	@ 0x30
 800868c:	e7f9      	b.n	8008682 <_dtoa_r+0x99e>
 800868e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d100      	bne.n	8008696 <_dtoa_r+0x9b2>
 8008694:	e100      	b.n	8008898 <_dtoa_r+0xbb4>
 8008696:	2c00      	cmp	r4, #0
 8008698:	dd05      	ble.n	80086a6 <_dtoa_r+0x9c2>
 800869a:	0039      	movs	r1, r7
 800869c:	0022      	movs	r2, r4
 800869e:	9803      	ldr	r0, [sp, #12]
 80086a0:	f000 fc88 	bl	8008fb4 <__lshift>
 80086a4:	0007      	movs	r7, r0
 80086a6:	0038      	movs	r0, r7
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	d018      	beq.n	80086de <_dtoa_r+0x9fa>
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	9803      	ldr	r0, [sp, #12]
 80086b0:	f000 fa12 	bl	8008ad8 <_Balloc>
 80086b4:	1e04      	subs	r4, r0, #0
 80086b6:	d105      	bne.n	80086c4 <_dtoa_r+0x9e0>
 80086b8:	0022      	movs	r2, r4
 80086ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008768 <_dtoa_r+0xa84>)
 80086bc:	482b      	ldr	r0, [pc, #172]	@ (800876c <_dtoa_r+0xa88>)
 80086be:	492c      	ldr	r1, [pc, #176]	@ (8008770 <_dtoa_r+0xa8c>)
 80086c0:	f7ff fb25 	bl	8007d0e <_dtoa_r+0x2a>
 80086c4:	0039      	movs	r1, r7
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	310c      	adds	r1, #12
 80086ca:	3202      	adds	r2, #2
 80086cc:	0092      	lsls	r2, r2, #2
 80086ce:	300c      	adds	r0, #12
 80086d0:	f001 ffb2 	bl	800a638 <memcpy>
 80086d4:	2201      	movs	r2, #1
 80086d6:	0021      	movs	r1, r4
 80086d8:	9803      	ldr	r0, [sp, #12]
 80086da:	f000 fc6b 	bl	8008fb4 <__lshift>
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	2201      	movs	r2, #1
 80086ea:	9704      	str	r7, [sp, #16]
 80086ec:	0007      	movs	r7, r0
 80086ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f2:	4013      	ands	r3, r2
 80086f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80086f6:	0031      	movs	r1, r6
 80086f8:	9805      	ldr	r0, [sp, #20]
 80086fa:	f7ff fa65 	bl	8007bc8 <quorem>
 80086fe:	9904      	ldr	r1, [sp, #16]
 8008700:	0005      	movs	r5, r0
 8008702:	900a      	str	r0, [sp, #40]	@ 0x28
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	f000 fcc1 	bl	800908c <__mcmp>
 800870a:	003a      	movs	r2, r7
 800870c:	900d      	str	r0, [sp, #52]	@ 0x34
 800870e:	0031      	movs	r1, r6
 8008710:	9803      	ldr	r0, [sp, #12]
 8008712:	f000 fcd7 	bl	80090c4 <__mdiff>
 8008716:	2201      	movs	r2, #1
 8008718:	68c3      	ldr	r3, [r0, #12]
 800871a:	0004      	movs	r4, r0
 800871c:	3530      	adds	r5, #48	@ 0x30
 800871e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <_dtoa_r+0xa4a>
 8008724:	0001      	movs	r1, r0
 8008726:	9805      	ldr	r0, [sp, #20]
 8008728:	f000 fcb0 	bl	800908c <__mcmp>
 800872c:	9009      	str	r0, [sp, #36]	@ 0x24
 800872e:	0021      	movs	r1, r4
 8008730:	9803      	ldr	r0, [sp, #12]
 8008732:	f000 fa15 	bl	8008b60 <_Bfree>
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800873a:	1c5c      	adds	r4, r3, #1
 800873c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800873e:	4313      	orrs	r3, r2
 8008740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008742:	4313      	orrs	r3, r2
 8008744:	d116      	bne.n	8008774 <_dtoa_r+0xa90>
 8008746:	2d39      	cmp	r5, #57	@ 0x39
 8008748:	d02f      	beq.n	80087aa <_dtoa_r+0xac6>
 800874a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd01      	ble.n	8008754 <_dtoa_r+0xa70>
 8008750:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008752:	3531      	adds	r5, #49	@ 0x31
 8008754:	9b06      	ldr	r3, [sp, #24]
 8008756:	701d      	strb	r5, [r3, #0]
 8008758:	e638      	b.n	80083cc <_dtoa_r+0x6e8>
 800875a:	46c0      	nop			@ (mov r8, r8)
 800875c:	40240000 	.word	0x40240000
 8008760:	00000433 	.word	0x00000433
 8008764:	7ff00000 	.word	0x7ff00000
 8008768:	0800b8dd 	.word	0x0800b8dd
 800876c:	0800b885 	.word	0x0800b885
 8008770:	000002ef 	.word	0x000002ef
 8008774:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008776:	2b00      	cmp	r3, #0
 8008778:	db04      	blt.n	8008784 <_dtoa_r+0xaa0>
 800877a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800877c:	4313      	orrs	r3, r2
 800877e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008780:	4313      	orrs	r3, r2
 8008782:	d11e      	bne.n	80087c2 <_dtoa_r+0xade>
 8008784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	dde4      	ble.n	8008754 <_dtoa_r+0xa70>
 800878a:	9905      	ldr	r1, [sp, #20]
 800878c:	2201      	movs	r2, #1
 800878e:	9803      	ldr	r0, [sp, #12]
 8008790:	f000 fc10 	bl	8008fb4 <__lshift>
 8008794:	0031      	movs	r1, r6
 8008796:	9005      	str	r0, [sp, #20]
 8008798:	f000 fc78 	bl	800908c <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	dc02      	bgt.n	80087a6 <_dtoa_r+0xac2>
 80087a0:	d1d8      	bne.n	8008754 <_dtoa_r+0xa70>
 80087a2:	07eb      	lsls	r3, r5, #31
 80087a4:	d5d6      	bpl.n	8008754 <_dtoa_r+0xa70>
 80087a6:	2d39      	cmp	r5, #57	@ 0x39
 80087a8:	d1d2      	bne.n	8008750 <_dtoa_r+0xa6c>
 80087aa:	2339      	movs	r3, #57	@ 0x39
 80087ac:	9a06      	ldr	r2, [sp, #24]
 80087ae:	7013      	strb	r3, [r2, #0]
 80087b0:	0023      	movs	r3, r4
 80087b2:	001c      	movs	r4, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	2a39      	cmp	r2, #57	@ 0x39
 80087ba:	d04f      	beq.n	800885c <_dtoa_r+0xb78>
 80087bc:	3201      	adds	r2, #1
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e604      	b.n	80083cc <_dtoa_r+0x6e8>
 80087c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dd03      	ble.n	80087d0 <_dtoa_r+0xaec>
 80087c8:	2d39      	cmp	r5, #57	@ 0x39
 80087ca:	d0ee      	beq.n	80087aa <_dtoa_r+0xac6>
 80087cc:	3501      	adds	r5, #1
 80087ce:	e7c1      	b.n	8008754 <_dtoa_r+0xa70>
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	9a06      	ldr	r2, [sp, #24]
 80087d4:	701d      	strb	r5, [r3, #0]
 80087d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d8:	4293      	cmp	r3, r2
 80087da:	d02a      	beq.n	8008832 <_dtoa_r+0xb4e>
 80087dc:	2300      	movs	r3, #0
 80087de:	220a      	movs	r2, #10
 80087e0:	9905      	ldr	r1, [sp, #20]
 80087e2:	9803      	ldr	r0, [sp, #12]
 80087e4:	f000 f9e0 	bl	8008ba8 <__multadd>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	9005      	str	r0, [sp, #20]
 80087ec:	42bb      	cmp	r3, r7
 80087ee:	d109      	bne.n	8008804 <_dtoa_r+0xb20>
 80087f0:	2300      	movs	r3, #0
 80087f2:	220a      	movs	r2, #10
 80087f4:	9904      	ldr	r1, [sp, #16]
 80087f6:	9803      	ldr	r0, [sp, #12]
 80087f8:	f000 f9d6 	bl	8008ba8 <__multadd>
 80087fc:	9004      	str	r0, [sp, #16]
 80087fe:	0007      	movs	r7, r0
 8008800:	9406      	str	r4, [sp, #24]
 8008802:	e778      	b.n	80086f6 <_dtoa_r+0xa12>
 8008804:	9904      	ldr	r1, [sp, #16]
 8008806:	2300      	movs	r3, #0
 8008808:	220a      	movs	r2, #10
 800880a:	9803      	ldr	r0, [sp, #12]
 800880c:	f000 f9cc 	bl	8008ba8 <__multadd>
 8008810:	2300      	movs	r3, #0
 8008812:	9004      	str	r0, [sp, #16]
 8008814:	220a      	movs	r2, #10
 8008816:	0039      	movs	r1, r7
 8008818:	9803      	ldr	r0, [sp, #12]
 800881a:	f000 f9c5 	bl	8008ba8 <__multadd>
 800881e:	e7ee      	b.n	80087fe <_dtoa_r+0xb1a>
 8008820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008822:	2401      	movs	r4, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd00      	ble.n	800882a <_dtoa_r+0xb46>
 8008828:	001c      	movs	r4, r3
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	191c      	adds	r4, r3, r4
 800882e:	2300      	movs	r3, #0
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	9905      	ldr	r1, [sp, #20]
 8008834:	2201      	movs	r2, #1
 8008836:	9803      	ldr	r0, [sp, #12]
 8008838:	f000 fbbc 	bl	8008fb4 <__lshift>
 800883c:	0031      	movs	r1, r6
 800883e:	9005      	str	r0, [sp, #20]
 8008840:	f000 fc24 	bl	800908c <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	dcb3      	bgt.n	80087b0 <_dtoa_r+0xacc>
 8008848:	d101      	bne.n	800884e <_dtoa_r+0xb6a>
 800884a:	07ed      	lsls	r5, r5, #31
 800884c:	d4b0      	bmi.n	80087b0 <_dtoa_r+0xacc>
 800884e:	0023      	movs	r3, r4
 8008850:	001c      	movs	r4, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	2a30      	cmp	r2, #48	@ 0x30
 8008858:	d0fa      	beq.n	8008850 <_dtoa_r+0xb6c>
 800885a:	e5b7      	b.n	80083cc <_dtoa_r+0x6e8>
 800885c:	9a08      	ldr	r2, [sp, #32]
 800885e:	429a      	cmp	r2, r3
 8008860:	d1a7      	bne.n	80087b2 <_dtoa_r+0xace>
 8008862:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008864:	3301      	adds	r3, #1
 8008866:	930c      	str	r3, [sp, #48]	@ 0x30
 8008868:	2331      	movs	r3, #49	@ 0x31
 800886a:	7013      	strb	r3, [r2, #0]
 800886c:	e5ae      	b.n	80083cc <_dtoa_r+0x6e8>
 800886e:	4b15      	ldr	r3, [pc, #84]	@ (80088c4 <_dtoa_r+0xbe0>)
 8008870:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008872:	9308      	str	r3, [sp, #32]
 8008874:	4b14      	ldr	r3, [pc, #80]	@ (80088c8 <_dtoa_r+0xbe4>)
 8008876:	2a00      	cmp	r2, #0
 8008878:	d001      	beq.n	800887e <_dtoa_r+0xb9a>
 800887a:	f7ff fa7b 	bl	8007d74 <_dtoa_r+0x90>
 800887e:	f7ff fa7b 	bl	8007d78 <_dtoa_r+0x94>
 8008882:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008884:	2b01      	cmp	r3, #1
 8008886:	dc00      	bgt.n	800888a <_dtoa_r+0xba6>
 8008888:	e648      	b.n	800851c <_dtoa_r+0x838>
 800888a:	2001      	movs	r0, #1
 800888c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800888e:	e665      	b.n	800855c <_dtoa_r+0x878>
 8008890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc00      	bgt.n	8008898 <_dtoa_r+0xbb4>
 8008896:	e6d6      	b.n	8008646 <_dtoa_r+0x962>
 8008898:	2400      	movs	r4, #0
 800889a:	0031      	movs	r1, r6
 800889c:	9805      	ldr	r0, [sp, #20]
 800889e:	f7ff f993 	bl	8007bc8 <quorem>
 80088a2:	9b08      	ldr	r3, [sp, #32]
 80088a4:	3030      	adds	r0, #48	@ 0x30
 80088a6:	5518      	strb	r0, [r3, r4]
 80088a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088aa:	3401      	adds	r4, #1
 80088ac:	0005      	movs	r5, r0
 80088ae:	429c      	cmp	r4, r3
 80088b0:	dab6      	bge.n	8008820 <_dtoa_r+0xb3c>
 80088b2:	2300      	movs	r3, #0
 80088b4:	220a      	movs	r2, #10
 80088b6:	9905      	ldr	r1, [sp, #20]
 80088b8:	9803      	ldr	r0, [sp, #12]
 80088ba:	f000 f975 	bl	8008ba8 <__multadd>
 80088be:	9005      	str	r0, [sp, #20]
 80088c0:	e7eb      	b.n	800889a <_dtoa_r+0xbb6>
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	0800b861 	.word	0x0800b861
 80088c8:	0800b869 	.word	0x0800b869

080088cc <_free_r>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	0005      	movs	r5, r0
 80088d0:	1e0c      	subs	r4, r1, #0
 80088d2:	d010      	beq.n	80088f6 <_free_r+0x2a>
 80088d4:	3c04      	subs	r4, #4
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da00      	bge.n	80088de <_free_r+0x12>
 80088dc:	18e4      	adds	r4, r4, r3
 80088de:	0028      	movs	r0, r5
 80088e0:	f000 f8ea 	bl	8008ab8 <__malloc_lock>
 80088e4:	4a1d      	ldr	r2, [pc, #116]	@ (800895c <_free_r+0x90>)
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d105      	bne.n	80088f8 <_free_r+0x2c>
 80088ec:	6063      	str	r3, [r4, #4]
 80088ee:	6014      	str	r4, [r2, #0]
 80088f0:	0028      	movs	r0, r5
 80088f2:	f000 f8e9 	bl	8008ac8 <__malloc_unlock>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d908      	bls.n	800890e <_free_r+0x42>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	1821      	adds	r1, r4, r0
 8008900:	428b      	cmp	r3, r1
 8008902:	d1f3      	bne.n	80088ec <_free_r+0x20>
 8008904:	6819      	ldr	r1, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	1809      	adds	r1, r1, r0
 800890a:	6021      	str	r1, [r4, #0]
 800890c:	e7ee      	b.n	80088ec <_free_r+0x20>
 800890e:	001a      	movs	r2, r3
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <_free_r+0x4e>
 8008916:	42a3      	cmp	r3, r4
 8008918:	d9f9      	bls.n	800890e <_free_r+0x42>
 800891a:	6811      	ldr	r1, [r2, #0]
 800891c:	1850      	adds	r0, r2, r1
 800891e:	42a0      	cmp	r0, r4
 8008920:	d10b      	bne.n	800893a <_free_r+0x6e>
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	1809      	adds	r1, r1, r0
 8008926:	1850      	adds	r0, r2, r1
 8008928:	6011      	str	r1, [r2, #0]
 800892a:	4283      	cmp	r3, r0
 800892c:	d1e0      	bne.n	80088f0 <_free_r+0x24>
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	1841      	adds	r1, r0, r1
 8008934:	6011      	str	r1, [r2, #0]
 8008936:	6053      	str	r3, [r2, #4]
 8008938:	e7da      	b.n	80088f0 <_free_r+0x24>
 800893a:	42a0      	cmp	r0, r4
 800893c:	d902      	bls.n	8008944 <_free_r+0x78>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d5      	b.n	80088f0 <_free_r+0x24>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	d103      	bne.n	8008954 <_free_r+0x88>
 800894c:	6819      	ldr	r1, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	1809      	adds	r1, r1, r0
 8008952:	6021      	str	r1, [r4, #0]
 8008954:	6063      	str	r3, [r4, #4]
 8008956:	6054      	str	r4, [r2, #4]
 8008958:	e7ca      	b.n	80088f0 <_free_r+0x24>
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	20000438 	.word	0x20000438

08008960 <malloc>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4b03      	ldr	r3, [pc, #12]	@ (8008970 <malloc+0x10>)
 8008964:	0001      	movs	r1, r0
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	f000 f826 	bl	80089b8 <_malloc_r>
 800896c:	bd10      	pop	{r4, pc}
 800896e:	46c0      	nop			@ (mov r8, r8)
 8008970:	20000018 	.word	0x20000018

08008974 <sbrk_aligned>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0f      	ldr	r6, [pc, #60]	@ (80089b4 <sbrk_aligned+0x40>)
 8008978:	000d      	movs	r5, r1
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	0004      	movs	r4, r0
 800897e:	2900      	cmp	r1, #0
 8008980:	d102      	bne.n	8008988 <sbrk_aligned+0x14>
 8008982:	f001 fe47 	bl	800a614 <_sbrk_r>
 8008986:	6030      	str	r0, [r6, #0]
 8008988:	0029      	movs	r1, r5
 800898a:	0020      	movs	r0, r4
 800898c:	f001 fe42 	bl	800a614 <_sbrk_r>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d103      	bne.n	800899c <sbrk_aligned+0x28>
 8008994:	2501      	movs	r5, #1
 8008996:	426d      	negs	r5, r5
 8008998:	0028      	movs	r0, r5
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	2303      	movs	r3, #3
 800899e:	1cc5      	adds	r5, r0, #3
 80089a0:	439d      	bics	r5, r3
 80089a2:	42a8      	cmp	r0, r5
 80089a4:	d0f8      	beq.n	8008998 <sbrk_aligned+0x24>
 80089a6:	1a29      	subs	r1, r5, r0
 80089a8:	0020      	movs	r0, r4
 80089aa:	f001 fe33 	bl	800a614 <_sbrk_r>
 80089ae:	3001      	adds	r0, #1
 80089b0:	d1f2      	bne.n	8008998 <sbrk_aligned+0x24>
 80089b2:	e7ef      	b.n	8008994 <sbrk_aligned+0x20>
 80089b4:	20000434 	.word	0x20000434

080089b8 <_malloc_r>:
 80089b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ba:	2203      	movs	r2, #3
 80089bc:	1ccb      	adds	r3, r1, #3
 80089be:	4393      	bics	r3, r2
 80089c0:	3308      	adds	r3, #8
 80089c2:	0005      	movs	r5, r0
 80089c4:	001f      	movs	r7, r3
 80089c6:	2b0c      	cmp	r3, #12
 80089c8:	d234      	bcs.n	8008a34 <_malloc_r+0x7c>
 80089ca:	270c      	movs	r7, #12
 80089cc:	42b9      	cmp	r1, r7
 80089ce:	d833      	bhi.n	8008a38 <_malloc_r+0x80>
 80089d0:	0028      	movs	r0, r5
 80089d2:	f000 f871 	bl	8008ab8 <__malloc_lock>
 80089d6:	4e37      	ldr	r6, [pc, #220]	@ (8008ab4 <_malloc_r+0xfc>)
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	001c      	movs	r4, r3
 80089dc:	2c00      	cmp	r4, #0
 80089de:	d12f      	bne.n	8008a40 <_malloc_r+0x88>
 80089e0:	0039      	movs	r1, r7
 80089e2:	0028      	movs	r0, r5
 80089e4:	f7ff ffc6 	bl	8008974 <sbrk_aligned>
 80089e8:	0004      	movs	r4, r0
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	d15f      	bne.n	8008aae <_malloc_r+0xf6>
 80089ee:	6834      	ldr	r4, [r6, #0]
 80089f0:	9400      	str	r4, [sp, #0]
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d14a      	bne.n	8008a8e <_malloc_r+0xd6>
 80089f8:	2c00      	cmp	r4, #0
 80089fa:	d052      	beq.n	8008aa2 <_malloc_r+0xea>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	0028      	movs	r0, r5
 8008a00:	18e3      	adds	r3, r4, r3
 8008a02:	9900      	ldr	r1, [sp, #0]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	f001 fe05 	bl	800a614 <_sbrk_r>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	4283      	cmp	r3, r0
 8008a0e:	d148      	bne.n	8008aa2 <_malloc_r+0xea>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	0028      	movs	r0, r5
 8008a14:	1aff      	subs	r7, r7, r3
 8008a16:	0039      	movs	r1, r7
 8008a18:	f7ff ffac 	bl	8008974 <sbrk_aligned>
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d040      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	19db      	adds	r3, r3, r7
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	6833      	ldr	r3, [r6, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d133      	bne.n	8008a96 <_malloc_r+0xde>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	e019      	b.n	8008a68 <_malloc_r+0xb0>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dac9      	bge.n	80089cc <_malloc_r+0x14>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a40:	6821      	ldr	r1, [r4, #0]
 8008a42:	1bc9      	subs	r1, r1, r7
 8008a44:	d420      	bmi.n	8008a88 <_malloc_r+0xd0>
 8008a46:	290b      	cmp	r1, #11
 8008a48:	d90a      	bls.n	8008a60 <_malloc_r+0xa8>
 8008a4a:	19e2      	adds	r2, r4, r7
 8008a4c:	6027      	str	r7, [r4, #0]
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	d104      	bne.n	8008a5c <_malloc_r+0xa4>
 8008a52:	6032      	str	r2, [r6, #0]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	6011      	str	r1, [r2, #0]
 8008a58:	6053      	str	r3, [r2, #4]
 8008a5a:	e005      	b.n	8008a68 <_malloc_r+0xb0>
 8008a5c:	605a      	str	r2, [r3, #4]
 8008a5e:	e7f9      	b.n	8008a54 <_malloc_r+0x9c>
 8008a60:	6862      	ldr	r2, [r4, #4]
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	d10e      	bne.n	8008a84 <_malloc_r+0xcc>
 8008a66:	6032      	str	r2, [r6, #0]
 8008a68:	0028      	movs	r0, r5
 8008a6a:	f000 f82d 	bl	8008ac8 <__malloc_unlock>
 8008a6e:	0020      	movs	r0, r4
 8008a70:	2207      	movs	r2, #7
 8008a72:	300b      	adds	r0, #11
 8008a74:	1d23      	adds	r3, r4, #4
 8008a76:	4390      	bics	r0, r2
 8008a78:	1ac2      	subs	r2, r0, r3
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	d0df      	beq.n	8008a3e <_malloc_r+0x86>
 8008a7e:	1a1b      	subs	r3, r3, r0
 8008a80:	50a3      	str	r3, [r4, r2]
 8008a82:	e7dc      	b.n	8008a3e <_malloc_r+0x86>
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	e7ef      	b.n	8008a68 <_malloc_r+0xb0>
 8008a88:	0023      	movs	r3, r4
 8008a8a:	6864      	ldr	r4, [r4, #4]
 8008a8c:	e7a6      	b.n	80089dc <_malloc_r+0x24>
 8008a8e:	9c00      	ldr	r4, [sp, #0]
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	e7ad      	b.n	80089f2 <_malloc_r+0x3a>
 8008a96:	001a      	movs	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	d1fb      	bne.n	8008a96 <_malloc_r+0xde>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e7da      	b.n	8008a58 <_malloc_r+0xa0>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	0028      	movs	r0, r5
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f000 f80e 	bl	8008ac8 <__malloc_unlock>
 8008aac:	e7c6      	b.n	8008a3c <_malloc_r+0x84>
 8008aae:	6007      	str	r7, [r0, #0]
 8008ab0:	e7da      	b.n	8008a68 <_malloc_r+0xb0>
 8008ab2:	46c0      	nop			@ (mov r8, r8)
 8008ab4:	20000438 	.word	0x20000438

08008ab8 <__malloc_lock>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4802      	ldr	r0, [pc, #8]	@ (8008ac4 <__malloc_lock+0xc>)
 8008abc:	f7ff f873 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	20000430 	.word	0x20000430

08008ac8 <__malloc_unlock>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	4802      	ldr	r0, [pc, #8]	@ (8008ad4 <__malloc_unlock+0xc>)
 8008acc:	f7ff f86c 	bl	8007ba8 <__retarget_lock_release_recursive>
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	20000430 	.word	0x20000430

08008ad8 <_Balloc>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	69c5      	ldr	r5, [r0, #28]
 8008adc:	0006      	movs	r6, r0
 8008ade:	000c      	movs	r4, r1
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	d10e      	bne.n	8008b02 <_Balloc+0x2a>
 8008ae4:	2010      	movs	r0, #16
 8008ae6:	f7ff ff3b 	bl	8008960 <malloc>
 8008aea:	1e02      	subs	r2, r0, #0
 8008aec:	61f0      	str	r0, [r6, #28]
 8008aee:	d104      	bne.n	8008afa <_Balloc+0x22>
 8008af0:	216b      	movs	r1, #107	@ 0x6b
 8008af2:	4b19      	ldr	r3, [pc, #100]	@ (8008b58 <_Balloc+0x80>)
 8008af4:	4819      	ldr	r0, [pc, #100]	@ (8008b5c <_Balloc+0x84>)
 8008af6:	f001 fdaf 	bl	800a658 <__assert_func>
 8008afa:	6045      	str	r5, [r0, #4]
 8008afc:	6085      	str	r5, [r0, #8]
 8008afe:	6005      	str	r5, [r0, #0]
 8008b00:	60c5      	str	r5, [r0, #12]
 8008b02:	69f5      	ldr	r5, [r6, #28]
 8008b04:	68eb      	ldr	r3, [r5, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d013      	beq.n	8008b32 <_Balloc+0x5a>
 8008b0a:	69f3      	ldr	r3, [r6, #28]
 8008b0c:	00a2      	lsls	r2, r4, #2
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d118      	bne.n	8008b4a <_Balloc+0x72>
 8008b18:	2101      	movs	r1, #1
 8008b1a:	000d      	movs	r5, r1
 8008b1c:	40a5      	lsls	r5, r4
 8008b1e:	1d6a      	adds	r2, r5, #5
 8008b20:	0030      	movs	r0, r6
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	f001 fdb6 	bl	800a694 <_calloc_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d00c      	beq.n	8008b46 <_Balloc+0x6e>
 8008b2c:	6044      	str	r4, [r0, #4]
 8008b2e:	6085      	str	r5, [r0, #8]
 8008b30:	e00d      	b.n	8008b4e <_Balloc+0x76>
 8008b32:	2221      	movs	r2, #33	@ 0x21
 8008b34:	2104      	movs	r1, #4
 8008b36:	0030      	movs	r0, r6
 8008b38:	f001 fdac 	bl	800a694 <_calloc_r>
 8008b3c:	69f3      	ldr	r3, [r6, #28]
 8008b3e:	60e8      	str	r0, [r5, #12]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e1      	bne.n	8008b0a <_Balloc+0x32>
 8008b46:	2000      	movs	r0, #0
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	6802      	ldr	r2, [r0, #0]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6103      	str	r3, [r0, #16]
 8008b52:	60c3      	str	r3, [r0, #12]
 8008b54:	e7f8      	b.n	8008b48 <_Balloc+0x70>
 8008b56:	46c0      	nop			@ (mov r8, r8)
 8008b58:	0800b86e 	.word	0x0800b86e
 8008b5c:	0800b8ee 	.word	0x0800b8ee

08008b60 <_Bfree>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	69c6      	ldr	r6, [r0, #28]
 8008b64:	0005      	movs	r5, r0
 8008b66:	000c      	movs	r4, r1
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	d10e      	bne.n	8008b8a <_Bfree+0x2a>
 8008b6c:	2010      	movs	r0, #16
 8008b6e:	f7ff fef7 	bl	8008960 <malloc>
 8008b72:	1e02      	subs	r2, r0, #0
 8008b74:	61e8      	str	r0, [r5, #28]
 8008b76:	d104      	bne.n	8008b82 <_Bfree+0x22>
 8008b78:	218f      	movs	r1, #143	@ 0x8f
 8008b7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ba0 <_Bfree+0x40>)
 8008b7c:	4809      	ldr	r0, [pc, #36]	@ (8008ba4 <_Bfree+0x44>)
 8008b7e:	f001 fd6b 	bl	800a658 <__assert_func>
 8008b82:	6046      	str	r6, [r0, #4]
 8008b84:	6086      	str	r6, [r0, #8]
 8008b86:	6006      	str	r6, [r0, #0]
 8008b88:	60c6      	str	r6, [r0, #12]
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	d007      	beq.n	8008b9e <_Bfree+0x3e>
 8008b8e:	69eb      	ldr	r3, [r5, #28]
 8008b90:	6862      	ldr	r2, [r4, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	0092      	lsls	r2, r2, #2
 8008b96:	189b      	adds	r3, r3, r2
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	601c      	str	r4, [r3, #0]
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	0800b86e 	.word	0x0800b86e
 8008ba4:	0800b8ee 	.word	0x0800b8ee

08008ba8 <__multadd>:
 8008ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008baa:	000f      	movs	r7, r1
 8008bac:	9001      	str	r0, [sp, #4]
 8008bae:	000c      	movs	r4, r1
 8008bb0:	001e      	movs	r6, r3
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	690d      	ldr	r5, [r1, #16]
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	3001      	adds	r0, #1
 8008bbc:	b299      	uxth	r1, r3
 8008bbe:	4351      	muls	r1, r2
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	4353      	muls	r3, r2
 8008bc4:	1989      	adds	r1, r1, r6
 8008bc6:	0c0e      	lsrs	r6, r1, #16
 8008bc8:	199b      	adds	r3, r3, r6
 8008bca:	0c1e      	lsrs	r6, r3, #16
 8008bcc:	b289      	uxth	r1, r1
 8008bce:	041b      	lsls	r3, r3, #16
 8008bd0:	185b      	adds	r3, r3, r1
 8008bd2:	c708      	stmia	r7!, {r3}
 8008bd4:	4285      	cmp	r5, r0
 8008bd6:	dcef      	bgt.n	8008bb8 <__multadd+0x10>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	d022      	beq.n	8008c22 <__multadd+0x7a>
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	42ab      	cmp	r3, r5
 8008be0:	dc19      	bgt.n	8008c16 <__multadd+0x6e>
 8008be2:	6861      	ldr	r1, [r4, #4]
 8008be4:	9801      	ldr	r0, [sp, #4]
 8008be6:	3101      	adds	r1, #1
 8008be8:	f7ff ff76 	bl	8008ad8 <_Balloc>
 8008bec:	1e07      	subs	r7, r0, #0
 8008bee:	d105      	bne.n	8008bfc <__multadd+0x54>
 8008bf0:	003a      	movs	r2, r7
 8008bf2:	21ba      	movs	r1, #186	@ 0xba
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c28 <__multadd+0x80>)
 8008bf6:	480d      	ldr	r0, [pc, #52]	@ (8008c2c <__multadd+0x84>)
 8008bf8:	f001 fd2e 	bl	800a658 <__assert_func>
 8008bfc:	0021      	movs	r1, r4
 8008bfe:	6922      	ldr	r2, [r4, #16]
 8008c00:	310c      	adds	r1, #12
 8008c02:	3202      	adds	r2, #2
 8008c04:	0092      	lsls	r2, r2, #2
 8008c06:	300c      	adds	r0, #12
 8008c08:	f001 fd16 	bl	800a638 <memcpy>
 8008c0c:	0021      	movs	r1, r4
 8008c0e:	9801      	ldr	r0, [sp, #4]
 8008c10:	f7ff ffa6 	bl	8008b60 <_Bfree>
 8008c14:	003c      	movs	r4, r7
 8008c16:	1d2b      	adds	r3, r5, #4
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	18e3      	adds	r3, r4, r3
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	605e      	str	r6, [r3, #4]
 8008c20:	6125      	str	r5, [r4, #16]
 8008c22:	0020      	movs	r0, r4
 8008c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c26:	46c0      	nop			@ (mov r8, r8)
 8008c28:	0800b8dd 	.word	0x0800b8dd
 8008c2c:	0800b8ee 	.word	0x0800b8ee

08008c30 <__s2b>:
 8008c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c32:	0007      	movs	r7, r0
 8008c34:	0018      	movs	r0, r3
 8008c36:	000c      	movs	r4, r1
 8008c38:	3008      	adds	r0, #8
 8008c3a:	2109      	movs	r1, #9
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	0015      	movs	r5, r2
 8008c40:	f7f7 fb08 	bl	8000254 <__divsi3>
 8008c44:	2301      	movs	r3, #1
 8008c46:	2100      	movs	r1, #0
 8008c48:	4283      	cmp	r3, r0
 8008c4a:	db0a      	blt.n	8008c62 <__s2b+0x32>
 8008c4c:	0038      	movs	r0, r7
 8008c4e:	f7ff ff43 	bl	8008ad8 <_Balloc>
 8008c52:	1e01      	subs	r1, r0, #0
 8008c54:	d108      	bne.n	8008c68 <__s2b+0x38>
 8008c56:	000a      	movs	r2, r1
 8008c58:	4b19      	ldr	r3, [pc, #100]	@ (8008cc0 <__s2b+0x90>)
 8008c5a:	481a      	ldr	r0, [pc, #104]	@ (8008cc4 <__s2b+0x94>)
 8008c5c:	31d3      	adds	r1, #211	@ 0xd3
 8008c5e:	f001 fcfb 	bl	800a658 <__assert_func>
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	3101      	adds	r1, #1
 8008c66:	e7ef      	b.n	8008c48 <__s2b+0x18>
 8008c68:	9b08      	ldr	r3, [sp, #32]
 8008c6a:	6143      	str	r3, [r0, #20]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	6103      	str	r3, [r0, #16]
 8008c70:	2d09      	cmp	r5, #9
 8008c72:	dd18      	ble.n	8008ca6 <__s2b+0x76>
 8008c74:	0023      	movs	r3, r4
 8008c76:	3309      	adds	r3, #9
 8008c78:	001e      	movs	r6, r3
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	1964      	adds	r4, r4, r5
 8008c7e:	7833      	ldrb	r3, [r6, #0]
 8008c80:	220a      	movs	r2, #10
 8008c82:	0038      	movs	r0, r7
 8008c84:	3b30      	subs	r3, #48	@ 0x30
 8008c86:	f7ff ff8f 	bl	8008ba8 <__multadd>
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	0001      	movs	r1, r0
 8008c8e:	42a6      	cmp	r6, r4
 8008c90:	d1f5      	bne.n	8008c7e <__s2b+0x4e>
 8008c92:	002c      	movs	r4, r5
 8008c94:	9b00      	ldr	r3, [sp, #0]
 8008c96:	3c08      	subs	r4, #8
 8008c98:	191c      	adds	r4, r3, r4
 8008c9a:	002e      	movs	r6, r5
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	db04      	blt.n	8008cac <__s2b+0x7c>
 8008ca2:	0008      	movs	r0, r1
 8008ca4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ca6:	2509      	movs	r5, #9
 8008ca8:	340a      	adds	r4, #10
 8008caa:	e7f6      	b.n	8008c9a <__s2b+0x6a>
 8008cac:	1b63      	subs	r3, r4, r5
 8008cae:	5d9b      	ldrb	r3, [r3, r6]
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	0038      	movs	r0, r7
 8008cb4:	3b30      	subs	r3, #48	@ 0x30
 8008cb6:	f7ff ff77 	bl	8008ba8 <__multadd>
 8008cba:	3601      	adds	r6, #1
 8008cbc:	0001      	movs	r1, r0
 8008cbe:	e7ed      	b.n	8008c9c <__s2b+0x6c>
 8008cc0:	0800b8dd 	.word	0x0800b8dd
 8008cc4:	0800b8ee 	.word	0x0800b8ee

08008cc8 <__hi0bits>:
 8008cc8:	2280      	movs	r2, #128	@ 0x80
 8008cca:	0003      	movs	r3, r0
 8008ccc:	0252      	lsls	r2, r2, #9
 8008cce:	2000      	movs	r0, #0
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d201      	bcs.n	8008cd8 <__hi0bits+0x10>
 8008cd4:	041b      	lsls	r3, r3, #16
 8008cd6:	3010      	adds	r0, #16
 8008cd8:	2280      	movs	r2, #128	@ 0x80
 8008cda:	0452      	lsls	r2, r2, #17
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d201      	bcs.n	8008ce4 <__hi0bits+0x1c>
 8008ce0:	3008      	adds	r0, #8
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	2280      	movs	r2, #128	@ 0x80
 8008ce6:	0552      	lsls	r2, r2, #21
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d201      	bcs.n	8008cf0 <__hi0bits+0x28>
 8008cec:	3004      	adds	r0, #4
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	2280      	movs	r2, #128	@ 0x80
 8008cf2:	05d2      	lsls	r2, r2, #23
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d201      	bcs.n	8008cfc <__hi0bits+0x34>
 8008cf8:	3002      	adds	r0, #2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	db03      	blt.n	8008d08 <__hi0bits+0x40>
 8008d00:	3001      	adds	r0, #1
 8008d02:	4213      	tst	r3, r2
 8008d04:	d100      	bne.n	8008d08 <__hi0bits+0x40>
 8008d06:	2020      	movs	r0, #32
 8008d08:	4770      	bx	lr

08008d0a <__lo0bits>:
 8008d0a:	6803      	ldr	r3, [r0, #0]
 8008d0c:	0001      	movs	r1, r0
 8008d0e:	2207      	movs	r2, #7
 8008d10:	0018      	movs	r0, r3
 8008d12:	4010      	ands	r0, r2
 8008d14:	4213      	tst	r3, r2
 8008d16:	d00d      	beq.n	8008d34 <__lo0bits+0x2a>
 8008d18:	3a06      	subs	r2, #6
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4213      	tst	r3, r2
 8008d1e:	d105      	bne.n	8008d2c <__lo0bits+0x22>
 8008d20:	3002      	adds	r0, #2
 8008d22:	4203      	tst	r3, r0
 8008d24:	d003      	beq.n	8008d2e <__lo0bits+0x24>
 8008d26:	40d3      	lsrs	r3, r2
 8008d28:	0010      	movs	r0, r2
 8008d2a:	600b      	str	r3, [r1, #0]
 8008d2c:	4770      	bx	lr
 8008d2e:	089b      	lsrs	r3, r3, #2
 8008d30:	600b      	str	r3, [r1, #0]
 8008d32:	e7fb      	b.n	8008d2c <__lo0bits+0x22>
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	d101      	bne.n	8008d3e <__lo0bits+0x34>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	0c1b      	lsrs	r3, r3, #16
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	d101      	bne.n	8008d48 <__lo0bits+0x3e>
 8008d44:	3008      	adds	r0, #8
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	071a      	lsls	r2, r3, #28
 8008d4a:	d101      	bne.n	8008d50 <__lo0bits+0x46>
 8008d4c:	3004      	adds	r0, #4
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	079a      	lsls	r2, r3, #30
 8008d52:	d101      	bne.n	8008d58 <__lo0bits+0x4e>
 8008d54:	3002      	adds	r0, #2
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	07da      	lsls	r2, r3, #31
 8008d5a:	d4e9      	bmi.n	8008d30 <__lo0bits+0x26>
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	085b      	lsrs	r3, r3, #1
 8008d60:	d1e6      	bne.n	8008d30 <__lo0bits+0x26>
 8008d62:	2020      	movs	r0, #32
 8008d64:	e7e2      	b.n	8008d2c <__lo0bits+0x22>
	...

08008d68 <__i2b>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	000c      	movs	r4, r1
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	f7ff feb3 	bl	8008ad8 <_Balloc>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d107      	bne.n	8008d86 <__i2b+0x1e>
 8008d76:	2146      	movs	r1, #70	@ 0x46
 8008d78:	4c05      	ldr	r4, [pc, #20]	@ (8008d90 <__i2b+0x28>)
 8008d7a:	0002      	movs	r2, r0
 8008d7c:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <__i2b+0x2c>)
 8008d7e:	0020      	movs	r0, r4
 8008d80:	31ff      	adds	r1, #255	@ 0xff
 8008d82:	f001 fc69 	bl	800a658 <__assert_func>
 8008d86:	2301      	movs	r3, #1
 8008d88:	6144      	str	r4, [r0, #20]
 8008d8a:	6103      	str	r3, [r0, #16]
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	0800b8ee 	.word	0x0800b8ee
 8008d94:	0800b8dd 	.word	0x0800b8dd

08008d98 <__multiply>:
 8008d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9a:	0014      	movs	r4, r2
 8008d9c:	690a      	ldr	r2, [r1, #16]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	000d      	movs	r5, r1
 8008da2:	b08b      	sub	sp, #44	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
 8008da6:	db02      	blt.n	8008dae <__multiply+0x16>
 8008da8:	0023      	movs	r3, r4
 8008daa:	000c      	movs	r4, r1
 8008dac:	001d      	movs	r5, r3
 8008dae:	6927      	ldr	r7, [r4, #16]
 8008db0:	692e      	ldr	r6, [r5, #16]
 8008db2:	6861      	ldr	r1, [r4, #4]
 8008db4:	19bb      	adds	r3, r7, r6
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	19ba      	adds	r2, r7, r6
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	da00      	bge.n	8008dc2 <__multiply+0x2a>
 8008dc0:	3101      	adds	r1, #1
 8008dc2:	f7ff fe89 	bl	8008ad8 <_Balloc>
 8008dc6:	9002      	str	r0, [sp, #8]
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d106      	bne.n	8008dda <__multiply+0x42>
 8008dcc:	21b1      	movs	r1, #177	@ 0xb1
 8008dce:	4b49      	ldr	r3, [pc, #292]	@ (8008ef4 <__multiply+0x15c>)
 8008dd0:	4849      	ldr	r0, [pc, #292]	@ (8008ef8 <__multiply+0x160>)
 8008dd2:	9a02      	ldr	r2, [sp, #8]
 8008dd4:	0049      	lsls	r1, r1, #1
 8008dd6:	f001 fc3f 	bl	800a658 <__assert_func>
 8008dda:	9b02      	ldr	r3, [sp, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	3314      	adds	r3, #20
 8008de0:	469c      	mov	ip, r3
 8008de2:	19bb      	adds	r3, r7, r6
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4463      	add	r3, ip
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	4663      	mov	r3, ip
 8008dec:	9904      	ldr	r1, [sp, #16]
 8008dee:	428b      	cmp	r3, r1
 8008df0:	d32a      	bcc.n	8008e48 <__multiply+0xb0>
 8008df2:	0023      	movs	r3, r4
 8008df4:	00bf      	lsls	r7, r7, #2
 8008df6:	3314      	adds	r3, #20
 8008df8:	3514      	adds	r5, #20
 8008dfa:	9308      	str	r3, [sp, #32]
 8008dfc:	00b6      	lsls	r6, r6, #2
 8008dfe:	19db      	adds	r3, r3, r7
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	19ab      	adds	r3, r5, r6
 8008e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e06:	2304      	movs	r3, #4
 8008e08:	9306      	str	r3, [sp, #24]
 8008e0a:	0023      	movs	r3, r4
 8008e0c:	9a05      	ldr	r2, [sp, #20]
 8008e0e:	3315      	adds	r3, #21
 8008e10:	9501      	str	r5, [sp, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d305      	bcc.n	8008e22 <__multiply+0x8a>
 8008e16:	1b13      	subs	r3, r2, r4
 8008e18:	3b15      	subs	r3, #21
 8008e1a:	089b      	lsrs	r3, r3, #2
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	9306      	str	r3, [sp, #24]
 8008e22:	9b01      	ldr	r3, [sp, #4]
 8008e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d310      	bcc.n	8008e4c <__multiply+0xb4>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dd05      	ble.n	8008e3c <__multiply+0xa4>
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	3b04      	subs	r3, #4
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d056      	beq.n	8008eea <__multiply+0x152>
 8008e3c:	9b02      	ldr	r3, [sp, #8]
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	0018      	movs	r0, r3
 8008e42:	611a      	str	r2, [r3, #16]
 8008e44:	b00b      	add	sp, #44	@ 0x2c
 8008e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e48:	c304      	stmia	r3!, {r2}
 8008e4a:	e7cf      	b.n	8008dec <__multiply+0x54>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	b280      	uxth	r0, r0
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d01e      	beq.n	8008e94 <__multiply+0xfc>
 8008e56:	4667      	mov	r7, ip
 8008e58:	2500      	movs	r5, #0
 8008e5a:	9e08      	ldr	r6, [sp, #32]
 8008e5c:	ce02      	ldmia	r6!, {r1}
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	9307      	str	r3, [sp, #28]
 8008e62:	b28b      	uxth	r3, r1
 8008e64:	4343      	muls	r3, r0
 8008e66:	001a      	movs	r2, r3
 8008e68:	466b      	mov	r3, sp
 8008e6a:	0c09      	lsrs	r1, r1, #16
 8008e6c:	8b9b      	ldrh	r3, [r3, #28]
 8008e6e:	4341      	muls	r1, r0
 8008e70:	18d3      	adds	r3, r2, r3
 8008e72:	9a07      	ldr	r2, [sp, #28]
 8008e74:	195b      	adds	r3, r3, r5
 8008e76:	0c12      	lsrs	r2, r2, #16
 8008e78:	1889      	adds	r1, r1, r2
 8008e7a:	0c1a      	lsrs	r2, r3, #16
 8008e7c:	188a      	adds	r2, r1, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	0c15      	lsrs	r5, r2, #16
 8008e82:	0412      	lsls	r2, r2, #16
 8008e84:	431a      	orrs	r2, r3
 8008e86:	9b05      	ldr	r3, [sp, #20]
 8008e88:	c704      	stmia	r7!, {r2}
 8008e8a:	42b3      	cmp	r3, r6
 8008e8c:	d8e6      	bhi.n	8008e5c <__multiply+0xc4>
 8008e8e:	4663      	mov	r3, ip
 8008e90:	9a06      	ldr	r2, [sp, #24]
 8008e92:	509d      	str	r5, [r3, r2]
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	0c00      	lsrs	r0, r0, #16
 8008e9a:	d020      	beq.n	8008ede <__multiply+0x146>
 8008e9c:	4663      	mov	r3, ip
 8008e9e:	0025      	movs	r5, r4
 8008ea0:	4661      	mov	r1, ip
 8008ea2:	2700      	movs	r7, #0
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3514      	adds	r5, #20
 8008ea8:	682a      	ldr	r2, [r5, #0]
 8008eaa:	680e      	ldr	r6, [r1, #0]
 8008eac:	b292      	uxth	r2, r2
 8008eae:	4342      	muls	r2, r0
 8008eb0:	0c36      	lsrs	r6, r6, #16
 8008eb2:	1992      	adds	r2, r2, r6
 8008eb4:	19d2      	adds	r2, r2, r7
 8008eb6:	0416      	lsls	r6, r2, #16
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	431e      	orrs	r6, r3
 8008ebc:	600e      	str	r6, [r1, #0]
 8008ebe:	cd40      	ldmia	r5!, {r6}
 8008ec0:	684b      	ldr	r3, [r1, #4]
 8008ec2:	0c36      	lsrs	r6, r6, #16
 8008ec4:	4346      	muls	r6, r0
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	0c12      	lsrs	r2, r2, #16
 8008eca:	18f3      	adds	r3, r6, r3
 8008ecc:	189b      	adds	r3, r3, r2
 8008ece:	9a05      	ldr	r2, [sp, #20]
 8008ed0:	0c1f      	lsrs	r7, r3, #16
 8008ed2:	3104      	adds	r1, #4
 8008ed4:	42aa      	cmp	r2, r5
 8008ed6:	d8e7      	bhi.n	8008ea8 <__multiply+0x110>
 8008ed8:	4662      	mov	r2, ip
 8008eda:	9906      	ldr	r1, [sp, #24]
 8008edc:	5053      	str	r3, [r2, r1]
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	449c      	add	ip, r3
 8008ee8:	e79b      	b.n	8008e22 <__multiply+0x8a>
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	e79b      	b.n	8008e2a <__multiply+0x92>
 8008ef2:	46c0      	nop			@ (mov r8, r8)
 8008ef4:	0800b8dd 	.word	0x0800b8dd
 8008ef8:	0800b8ee 	.word	0x0800b8ee

08008efc <__pow5mult>:
 8008efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008efe:	2303      	movs	r3, #3
 8008f00:	0015      	movs	r5, r2
 8008f02:	0007      	movs	r7, r0
 8008f04:	000e      	movs	r6, r1
 8008f06:	401a      	ands	r2, r3
 8008f08:	421d      	tst	r5, r3
 8008f0a:	d008      	beq.n	8008f1e <__pow5mult+0x22>
 8008f0c:	4925      	ldr	r1, [pc, #148]	@ (8008fa4 <__pow5mult+0xa8>)
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	0092      	lsls	r2, r2, #2
 8008f12:	5852      	ldr	r2, [r2, r1]
 8008f14:	2300      	movs	r3, #0
 8008f16:	0031      	movs	r1, r6
 8008f18:	f7ff fe46 	bl	8008ba8 <__multadd>
 8008f1c:	0006      	movs	r6, r0
 8008f1e:	10ad      	asrs	r5, r5, #2
 8008f20:	d03d      	beq.n	8008f9e <__pow5mult+0xa2>
 8008f22:	69fc      	ldr	r4, [r7, #28]
 8008f24:	2c00      	cmp	r4, #0
 8008f26:	d10f      	bne.n	8008f48 <__pow5mult+0x4c>
 8008f28:	2010      	movs	r0, #16
 8008f2a:	f7ff fd19 	bl	8008960 <malloc>
 8008f2e:	1e02      	subs	r2, r0, #0
 8008f30:	61f8      	str	r0, [r7, #28]
 8008f32:	d105      	bne.n	8008f40 <__pow5mult+0x44>
 8008f34:	21b4      	movs	r1, #180	@ 0xb4
 8008f36:	4b1c      	ldr	r3, [pc, #112]	@ (8008fa8 <__pow5mult+0xac>)
 8008f38:	481c      	ldr	r0, [pc, #112]	@ (8008fac <__pow5mult+0xb0>)
 8008f3a:	31ff      	adds	r1, #255	@ 0xff
 8008f3c:	f001 fb8c 	bl	800a658 <__assert_func>
 8008f40:	6044      	str	r4, [r0, #4]
 8008f42:	6084      	str	r4, [r0, #8]
 8008f44:	6004      	str	r4, [r0, #0]
 8008f46:	60c4      	str	r4, [r0, #12]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	689c      	ldr	r4, [r3, #8]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	d108      	bne.n	8008f64 <__pow5mult+0x68>
 8008f52:	0038      	movs	r0, r7
 8008f54:	4916      	ldr	r1, [pc, #88]	@ (8008fb0 <__pow5mult+0xb4>)
 8008f56:	f7ff ff07 	bl	8008d68 <__i2b>
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	0004      	movs	r4, r0
 8008f5e:	6098      	str	r0, [r3, #8]
 8008f60:	2300      	movs	r3, #0
 8008f62:	6003      	str	r3, [r0, #0]
 8008f64:	2301      	movs	r3, #1
 8008f66:	421d      	tst	r5, r3
 8008f68:	d00a      	beq.n	8008f80 <__pow5mult+0x84>
 8008f6a:	0031      	movs	r1, r6
 8008f6c:	0022      	movs	r2, r4
 8008f6e:	0038      	movs	r0, r7
 8008f70:	f7ff ff12 	bl	8008d98 <__multiply>
 8008f74:	0031      	movs	r1, r6
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	0038      	movs	r0, r7
 8008f7a:	f7ff fdf1 	bl	8008b60 <_Bfree>
 8008f7e:	9e01      	ldr	r6, [sp, #4]
 8008f80:	106d      	asrs	r5, r5, #1
 8008f82:	d00c      	beq.n	8008f9e <__pow5mult+0xa2>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d107      	bne.n	8008f9a <__pow5mult+0x9e>
 8008f8a:	0022      	movs	r2, r4
 8008f8c:	0021      	movs	r1, r4
 8008f8e:	0038      	movs	r0, r7
 8008f90:	f7ff ff02 	bl	8008d98 <__multiply>
 8008f94:	2300      	movs	r3, #0
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	0004      	movs	r4, r0
 8008f9c:	e7e2      	b.n	8008f64 <__pow5mult+0x68>
 8008f9e:	0030      	movs	r0, r6
 8008fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fa2:	46c0      	nop			@ (mov r8, r8)
 8008fa4:	0800b948 	.word	0x0800b948
 8008fa8:	0800b86e 	.word	0x0800b86e
 8008fac:	0800b8ee 	.word	0x0800b8ee
 8008fb0:	00000271 	.word	0x00000271

08008fb4 <__lshift>:
 8008fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb6:	000c      	movs	r4, r1
 8008fb8:	0016      	movs	r6, r2
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	1157      	asrs	r7, r2, #5
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	6849      	ldr	r1, [r1, #4]
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	9a00      	ldr	r2, [sp, #0]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	db10      	blt.n	8008ff6 <__lshift+0x42>
 8008fd4:	9802      	ldr	r0, [sp, #8]
 8008fd6:	f7ff fd7f 	bl	8008ad8 <_Balloc>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	0001      	movs	r1, r0
 8008fde:	0005      	movs	r5, r0
 8008fe0:	001a      	movs	r2, r3
 8008fe2:	3114      	adds	r1, #20
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	d10c      	bne.n	8009002 <__lshift+0x4e>
 8008fe8:	21ef      	movs	r1, #239	@ 0xef
 8008fea:	002a      	movs	r2, r5
 8008fec:	4b25      	ldr	r3, [pc, #148]	@ (8009084 <__lshift+0xd0>)
 8008fee:	4826      	ldr	r0, [pc, #152]	@ (8009088 <__lshift+0xd4>)
 8008ff0:	0049      	lsls	r1, r1, #1
 8008ff2:	f001 fb31 	bl	800a658 <__assert_func>
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	e7e8      	b.n	8008fce <__lshift+0x1a>
 8008ffc:	0098      	lsls	r0, r3, #2
 8008ffe:	500a      	str	r2, [r1, r0]
 8009000:	3301      	adds	r3, #1
 8009002:	42bb      	cmp	r3, r7
 8009004:	dbfa      	blt.n	8008ffc <__lshift+0x48>
 8009006:	43fb      	mvns	r3, r7
 8009008:	17db      	asrs	r3, r3, #31
 800900a:	401f      	ands	r7, r3
 800900c:	00bf      	lsls	r7, r7, #2
 800900e:	0023      	movs	r3, r4
 8009010:	201f      	movs	r0, #31
 8009012:	19c9      	adds	r1, r1, r7
 8009014:	0037      	movs	r7, r6
 8009016:	6922      	ldr	r2, [r4, #16]
 8009018:	3314      	adds	r3, #20
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	189a      	adds	r2, r3, r2
 800901e:	4007      	ands	r7, r0
 8009020:	4206      	tst	r6, r0
 8009022:	d029      	beq.n	8009078 <__lshift+0xc4>
 8009024:	3001      	adds	r0, #1
 8009026:	1bc0      	subs	r0, r0, r7
 8009028:	9003      	str	r0, [sp, #12]
 800902a:	468c      	mov	ip, r1
 800902c:	2000      	movs	r0, #0
 800902e:	681e      	ldr	r6, [r3, #0]
 8009030:	40be      	lsls	r6, r7
 8009032:	4306      	orrs	r6, r0
 8009034:	4660      	mov	r0, ip
 8009036:	c040      	stmia	r0!, {r6}
 8009038:	4684      	mov	ip, r0
 800903a:	9e03      	ldr	r6, [sp, #12]
 800903c:	cb01      	ldmia	r3!, {r0}
 800903e:	40f0      	lsrs	r0, r6
 8009040:	429a      	cmp	r2, r3
 8009042:	d8f4      	bhi.n	800902e <__lshift+0x7a>
 8009044:	0026      	movs	r6, r4
 8009046:	3615      	adds	r6, #21
 8009048:	2304      	movs	r3, #4
 800904a:	42b2      	cmp	r2, r6
 800904c:	d304      	bcc.n	8009058 <__lshift+0xa4>
 800904e:	1b13      	subs	r3, r2, r4
 8009050:	3b15      	subs	r3, #21
 8009052:	089b      	lsrs	r3, r3, #2
 8009054:	3301      	adds	r3, #1
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	50c8      	str	r0, [r1, r3]
 800905a:	2800      	cmp	r0, #0
 800905c:	d002      	beq.n	8009064 <__lshift+0xb0>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	3302      	adds	r3, #2
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	9802      	ldr	r0, [sp, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	0021      	movs	r1, r4
 800906c:	612b      	str	r3, [r5, #16]
 800906e:	f7ff fd77 	bl	8008b60 <_Bfree>
 8009072:	0028      	movs	r0, r5
 8009074:	b005      	add	sp, #20
 8009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009078:	cb01      	ldmia	r3!, {r0}
 800907a:	c101      	stmia	r1!, {r0}
 800907c:	429a      	cmp	r2, r3
 800907e:	d8fb      	bhi.n	8009078 <__lshift+0xc4>
 8009080:	e7f0      	b.n	8009064 <__lshift+0xb0>
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	0800b8dd 	.word	0x0800b8dd
 8009088:	0800b8ee 	.word	0x0800b8ee

0800908c <__mcmp>:
 800908c:	b530      	push	{r4, r5, lr}
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	6904      	ldr	r4, [r0, #16]
 8009092:	0002      	movs	r2, r0
 8009094:	1ae0      	subs	r0, r4, r3
 8009096:	429c      	cmp	r4, r3
 8009098:	d10f      	bne.n	80090ba <__mcmp+0x2e>
 800909a:	3214      	adds	r2, #20
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	3114      	adds	r1, #20
 80090a0:	0014      	movs	r4, r2
 80090a2:	18c9      	adds	r1, r1, r3
 80090a4:	18d2      	adds	r2, r2, r3
 80090a6:	3a04      	subs	r2, #4
 80090a8:	3904      	subs	r1, #4
 80090aa:	6815      	ldr	r5, [r2, #0]
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	429d      	cmp	r5, r3
 80090b0:	d004      	beq.n	80090bc <__mcmp+0x30>
 80090b2:	2001      	movs	r0, #1
 80090b4:	429d      	cmp	r5, r3
 80090b6:	d200      	bcs.n	80090ba <__mcmp+0x2e>
 80090b8:	3802      	subs	r0, #2
 80090ba:	bd30      	pop	{r4, r5, pc}
 80090bc:	4294      	cmp	r4, r2
 80090be:	d3f2      	bcc.n	80090a6 <__mcmp+0x1a>
 80090c0:	e7fb      	b.n	80090ba <__mcmp+0x2e>
	...

080090c4 <__mdiff>:
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	000c      	movs	r4, r1
 80090c8:	b087      	sub	sp, #28
 80090ca:	9000      	str	r0, [sp, #0]
 80090cc:	0011      	movs	r1, r2
 80090ce:	0020      	movs	r0, r4
 80090d0:	0017      	movs	r7, r2
 80090d2:	f7ff ffdb 	bl	800908c <__mcmp>
 80090d6:	1e05      	subs	r5, r0, #0
 80090d8:	d110      	bne.n	80090fc <__mdiff+0x38>
 80090da:	0001      	movs	r1, r0
 80090dc:	9800      	ldr	r0, [sp, #0]
 80090de:	f7ff fcfb 	bl	8008ad8 <_Balloc>
 80090e2:	1e02      	subs	r2, r0, #0
 80090e4:	d104      	bne.n	80090f0 <__mdiff+0x2c>
 80090e6:	4b40      	ldr	r3, [pc, #256]	@ (80091e8 <__mdiff+0x124>)
 80090e8:	4840      	ldr	r0, [pc, #256]	@ (80091ec <__mdiff+0x128>)
 80090ea:	4941      	ldr	r1, [pc, #260]	@ (80091f0 <__mdiff+0x12c>)
 80090ec:	f001 fab4 	bl	800a658 <__assert_func>
 80090f0:	2301      	movs	r3, #1
 80090f2:	6145      	str	r5, [r0, #20]
 80090f4:	6103      	str	r3, [r0, #16]
 80090f6:	0010      	movs	r0, r2
 80090f8:	b007      	add	sp, #28
 80090fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090fc:	2600      	movs	r6, #0
 80090fe:	42b0      	cmp	r0, r6
 8009100:	da03      	bge.n	800910a <__mdiff+0x46>
 8009102:	0023      	movs	r3, r4
 8009104:	003c      	movs	r4, r7
 8009106:	001f      	movs	r7, r3
 8009108:	3601      	adds	r6, #1
 800910a:	6861      	ldr	r1, [r4, #4]
 800910c:	9800      	ldr	r0, [sp, #0]
 800910e:	f7ff fce3 	bl	8008ad8 <_Balloc>
 8009112:	1e02      	subs	r2, r0, #0
 8009114:	d103      	bne.n	800911e <__mdiff+0x5a>
 8009116:	4b34      	ldr	r3, [pc, #208]	@ (80091e8 <__mdiff+0x124>)
 8009118:	4834      	ldr	r0, [pc, #208]	@ (80091ec <__mdiff+0x128>)
 800911a:	4936      	ldr	r1, [pc, #216]	@ (80091f4 <__mdiff+0x130>)
 800911c:	e7e6      	b.n	80090ec <__mdiff+0x28>
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	3414      	adds	r4, #20
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	18e3      	adds	r3, r4, r3
 8009128:	0021      	movs	r1, r4
 800912a:	9401      	str	r4, [sp, #4]
 800912c:	003c      	movs	r4, r7
 800912e:	9302      	str	r3, [sp, #8]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	3414      	adds	r4, #20
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	18e3      	adds	r3, r4, r3
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	0003      	movs	r3, r0
 800913c:	60c6      	str	r6, [r0, #12]
 800913e:	468c      	mov	ip, r1
 8009140:	2000      	movs	r0, #0
 8009142:	3314      	adds	r3, #20
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	4663      	mov	r3, ip
 800914a:	cb20      	ldmia	r3!, {r5}
 800914c:	b2a9      	uxth	r1, r5
 800914e:	000e      	movs	r6, r1
 8009150:	469c      	mov	ip, r3
 8009152:	cc08      	ldmia	r4!, {r3}
 8009154:	0c2d      	lsrs	r5, r5, #16
 8009156:	b299      	uxth	r1, r3
 8009158:	1a71      	subs	r1, r6, r1
 800915a:	1809      	adds	r1, r1, r0
 800915c:	0c1b      	lsrs	r3, r3, #16
 800915e:	1408      	asrs	r0, r1, #16
 8009160:	1aeb      	subs	r3, r5, r3
 8009162:	181b      	adds	r3, r3, r0
 8009164:	1418      	asrs	r0, r3, #16
 8009166:	b289      	uxth	r1, r1
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	4319      	orrs	r1, r3
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	c302      	stmia	r3!, {r1}
 8009170:	9305      	str	r3, [sp, #20]
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	42a3      	cmp	r3, r4
 8009176:	d8e7      	bhi.n	8009148 <__mdiff+0x84>
 8009178:	0039      	movs	r1, r7
 800917a:	9c03      	ldr	r4, [sp, #12]
 800917c:	3115      	adds	r1, #21
 800917e:	2304      	movs	r3, #4
 8009180:	428c      	cmp	r4, r1
 8009182:	d304      	bcc.n	800918e <__mdiff+0xca>
 8009184:	1be3      	subs	r3, r4, r7
 8009186:	3b15      	subs	r3, #21
 8009188:	089b      	lsrs	r3, r3, #2
 800918a:	3301      	adds	r3, #1
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	9901      	ldr	r1, [sp, #4]
 8009190:	18cd      	adds	r5, r1, r3
 8009192:	9904      	ldr	r1, [sp, #16]
 8009194:	002e      	movs	r6, r5
 8009196:	18cb      	adds	r3, r1, r3
 8009198:	001f      	movs	r7, r3
 800919a:	9902      	ldr	r1, [sp, #8]
 800919c:	428e      	cmp	r6, r1
 800919e:	d311      	bcc.n	80091c4 <__mdiff+0x100>
 80091a0:	9c02      	ldr	r4, [sp, #8]
 80091a2:	1ee9      	subs	r1, r5, #3
 80091a4:	2000      	movs	r0, #0
 80091a6:	428c      	cmp	r4, r1
 80091a8:	d304      	bcc.n	80091b4 <__mdiff+0xf0>
 80091aa:	0021      	movs	r1, r4
 80091ac:	3103      	adds	r1, #3
 80091ae:	1b49      	subs	r1, r1, r5
 80091b0:	0889      	lsrs	r1, r1, #2
 80091b2:	0088      	lsls	r0, r1, #2
 80091b4:	181b      	adds	r3, r3, r0
 80091b6:	3b04      	subs	r3, #4
 80091b8:	6819      	ldr	r1, [r3, #0]
 80091ba:	2900      	cmp	r1, #0
 80091bc:	d010      	beq.n	80091e0 <__mdiff+0x11c>
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	6113      	str	r3, [r2, #16]
 80091c2:	e798      	b.n	80090f6 <__mdiff+0x32>
 80091c4:	4684      	mov	ip, r0
 80091c6:	ce02      	ldmia	r6!, {r1}
 80091c8:	b288      	uxth	r0, r1
 80091ca:	4460      	add	r0, ip
 80091cc:	1400      	asrs	r0, r0, #16
 80091ce:	0c0c      	lsrs	r4, r1, #16
 80091d0:	1904      	adds	r4, r0, r4
 80091d2:	4461      	add	r1, ip
 80091d4:	1420      	asrs	r0, r4, #16
 80091d6:	b289      	uxth	r1, r1
 80091d8:	0424      	lsls	r4, r4, #16
 80091da:	4321      	orrs	r1, r4
 80091dc:	c702      	stmia	r7!, {r1}
 80091de:	e7dc      	b.n	800919a <__mdiff+0xd6>
 80091e0:	9900      	ldr	r1, [sp, #0]
 80091e2:	3901      	subs	r1, #1
 80091e4:	9100      	str	r1, [sp, #0]
 80091e6:	e7e6      	b.n	80091b6 <__mdiff+0xf2>
 80091e8:	0800b8dd 	.word	0x0800b8dd
 80091ec:	0800b8ee 	.word	0x0800b8ee
 80091f0:	00000237 	.word	0x00000237
 80091f4:	00000245 	.word	0x00000245

080091f8 <__ulp>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	2400      	movs	r4, #0
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <__ulp+0x38>)
 80091fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009234 <__ulp+0x3c>)
 8009200:	400b      	ands	r3, r1
 8009202:	189b      	adds	r3, r3, r2
 8009204:	42a3      	cmp	r3, r4
 8009206:	dc06      	bgt.n	8009216 <__ulp+0x1e>
 8009208:	425b      	negs	r3, r3
 800920a:	151a      	asrs	r2, r3, #20
 800920c:	2a13      	cmp	r2, #19
 800920e:	dc05      	bgt.n	800921c <__ulp+0x24>
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	031b      	lsls	r3, r3, #12
 8009214:	4113      	asrs	r3, r2
 8009216:	0019      	movs	r1, r3
 8009218:	0020      	movs	r0, r4
 800921a:	bd10      	pop	{r4, pc}
 800921c:	3a14      	subs	r2, #20
 800921e:	2401      	movs	r4, #1
 8009220:	2a1e      	cmp	r2, #30
 8009222:	dc02      	bgt.n	800922a <__ulp+0x32>
 8009224:	2480      	movs	r4, #128	@ 0x80
 8009226:	0624      	lsls	r4, r4, #24
 8009228:	40d4      	lsrs	r4, r2
 800922a:	2300      	movs	r3, #0
 800922c:	e7f3      	b.n	8009216 <__ulp+0x1e>
 800922e:	46c0      	nop			@ (mov r8, r8)
 8009230:	7ff00000 	.word	0x7ff00000
 8009234:	fcc00000 	.word	0xfcc00000

08009238 <__b2d>:
 8009238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800923a:	0006      	movs	r6, r0
 800923c:	6903      	ldr	r3, [r0, #16]
 800923e:	3614      	adds	r6, #20
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	18f3      	adds	r3, r6, r3
 8009244:	1f1d      	subs	r5, r3, #4
 8009246:	682c      	ldr	r4, [r5, #0]
 8009248:	000f      	movs	r7, r1
 800924a:	0020      	movs	r0, r4
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f7ff fd3b 	bl	8008cc8 <__hi0bits>
 8009252:	2220      	movs	r2, #32
 8009254:	1a12      	subs	r2, r2, r0
 8009256:	603a      	str	r2, [r7, #0]
 8009258:	0003      	movs	r3, r0
 800925a:	4a1c      	ldr	r2, [pc, #112]	@ (80092cc <__b2d+0x94>)
 800925c:	280a      	cmp	r0, #10
 800925e:	dc15      	bgt.n	800928c <__b2d+0x54>
 8009260:	210b      	movs	r1, #11
 8009262:	0027      	movs	r7, r4
 8009264:	1a09      	subs	r1, r1, r0
 8009266:	40cf      	lsrs	r7, r1
 8009268:	433a      	orrs	r2, r7
 800926a:	468c      	mov	ip, r1
 800926c:	0011      	movs	r1, r2
 800926e:	2200      	movs	r2, #0
 8009270:	42ae      	cmp	r6, r5
 8009272:	d202      	bcs.n	800927a <__b2d+0x42>
 8009274:	9a01      	ldr	r2, [sp, #4]
 8009276:	3a08      	subs	r2, #8
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	3315      	adds	r3, #21
 800927c:	409c      	lsls	r4, r3
 800927e:	4663      	mov	r3, ip
 8009280:	0027      	movs	r7, r4
 8009282:	40da      	lsrs	r2, r3
 8009284:	4317      	orrs	r7, r2
 8009286:	0038      	movs	r0, r7
 8009288:	b003      	add	sp, #12
 800928a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928c:	2700      	movs	r7, #0
 800928e:	42ae      	cmp	r6, r5
 8009290:	d202      	bcs.n	8009298 <__b2d+0x60>
 8009292:	9d01      	ldr	r5, [sp, #4]
 8009294:	3d08      	subs	r5, #8
 8009296:	682f      	ldr	r7, [r5, #0]
 8009298:	210b      	movs	r1, #11
 800929a:	4249      	negs	r1, r1
 800929c:	468c      	mov	ip, r1
 800929e:	449c      	add	ip, r3
 80092a0:	2b0b      	cmp	r3, #11
 80092a2:	d010      	beq.n	80092c6 <__b2d+0x8e>
 80092a4:	4661      	mov	r1, ip
 80092a6:	2320      	movs	r3, #32
 80092a8:	408c      	lsls	r4, r1
 80092aa:	1a5b      	subs	r3, r3, r1
 80092ac:	0039      	movs	r1, r7
 80092ae:	40d9      	lsrs	r1, r3
 80092b0:	430c      	orrs	r4, r1
 80092b2:	4322      	orrs	r2, r4
 80092b4:	0011      	movs	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	42b5      	cmp	r5, r6
 80092ba:	d901      	bls.n	80092c0 <__b2d+0x88>
 80092bc:	3d04      	subs	r5, #4
 80092be:	682a      	ldr	r2, [r5, #0]
 80092c0:	4664      	mov	r4, ip
 80092c2:	40a7      	lsls	r7, r4
 80092c4:	e7dd      	b.n	8009282 <__b2d+0x4a>
 80092c6:	4322      	orrs	r2, r4
 80092c8:	0011      	movs	r1, r2
 80092ca:	e7dc      	b.n	8009286 <__b2d+0x4e>
 80092cc:	3ff00000 	.word	0x3ff00000

080092d0 <__d2b>:
 80092d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d2:	2101      	movs	r1, #1
 80092d4:	0016      	movs	r6, r2
 80092d6:	001f      	movs	r7, r3
 80092d8:	f7ff fbfe 	bl	8008ad8 <_Balloc>
 80092dc:	1e04      	subs	r4, r0, #0
 80092de:	d105      	bne.n	80092ec <__d2b+0x1c>
 80092e0:	0022      	movs	r2, r4
 80092e2:	4b25      	ldr	r3, [pc, #148]	@ (8009378 <__d2b+0xa8>)
 80092e4:	4825      	ldr	r0, [pc, #148]	@ (800937c <__d2b+0xac>)
 80092e6:	4926      	ldr	r1, [pc, #152]	@ (8009380 <__d2b+0xb0>)
 80092e8:	f001 f9b6 	bl	800a658 <__assert_func>
 80092ec:	033b      	lsls	r3, r7, #12
 80092ee:	007d      	lsls	r5, r7, #1
 80092f0:	0b1b      	lsrs	r3, r3, #12
 80092f2:	0d6d      	lsrs	r5, r5, #21
 80092f4:	d002      	beq.n	80092fc <__d2b+0x2c>
 80092f6:	2280      	movs	r2, #128	@ 0x80
 80092f8:	0352      	lsls	r2, r2, #13
 80092fa:	4313      	orrs	r3, r2
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2e00      	cmp	r6, #0
 8009300:	d025      	beq.n	800934e <__d2b+0x7e>
 8009302:	4668      	mov	r0, sp
 8009304:	9600      	str	r6, [sp, #0]
 8009306:	f7ff fd00 	bl	8008d0a <__lo0bits>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	9900      	ldr	r1, [sp, #0]
 800930e:	2800      	cmp	r0, #0
 8009310:	d01b      	beq.n	800934a <__d2b+0x7a>
 8009312:	2220      	movs	r2, #32
 8009314:	001e      	movs	r6, r3
 8009316:	1a12      	subs	r2, r2, r0
 8009318:	4096      	lsls	r6, r2
 800931a:	0032      	movs	r2, r6
 800931c:	40c3      	lsrs	r3, r0
 800931e:	430a      	orrs	r2, r1
 8009320:	6162      	str	r2, [r4, #20]
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	9e01      	ldr	r6, [sp, #4]
 8009326:	61a6      	str	r6, [r4, #24]
 8009328:	1e73      	subs	r3, r6, #1
 800932a:	419e      	sbcs	r6, r3
 800932c:	3601      	adds	r6, #1
 800932e:	6126      	str	r6, [r4, #16]
 8009330:	2d00      	cmp	r5, #0
 8009332:	d014      	beq.n	800935e <__d2b+0x8e>
 8009334:	2635      	movs	r6, #53	@ 0x35
 8009336:	4b13      	ldr	r3, [pc, #76]	@ (8009384 <__d2b+0xb4>)
 8009338:	18ed      	adds	r5, r5, r3
 800933a:	9b08      	ldr	r3, [sp, #32]
 800933c:	182d      	adds	r5, r5, r0
 800933e:	601d      	str	r5, [r3, #0]
 8009340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009342:	1a36      	subs	r6, r6, r0
 8009344:	601e      	str	r6, [r3, #0]
 8009346:	0020      	movs	r0, r4
 8009348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800934a:	6161      	str	r1, [r4, #20]
 800934c:	e7ea      	b.n	8009324 <__d2b+0x54>
 800934e:	a801      	add	r0, sp, #4
 8009350:	f7ff fcdb 	bl	8008d0a <__lo0bits>
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	2601      	movs	r6, #1
 8009358:	6163      	str	r3, [r4, #20]
 800935a:	3020      	adds	r0, #32
 800935c:	e7e7      	b.n	800932e <__d2b+0x5e>
 800935e:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <__d2b+0xb8>)
 8009360:	18c0      	adds	r0, r0, r3
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	6018      	str	r0, [r3, #0]
 8009366:	4b09      	ldr	r3, [pc, #36]	@ (800938c <__d2b+0xbc>)
 8009368:	18f3      	adds	r3, r6, r3
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	18e3      	adds	r3, r4, r3
 800936e:	6958      	ldr	r0, [r3, #20]
 8009370:	f7ff fcaa 	bl	8008cc8 <__hi0bits>
 8009374:	0176      	lsls	r6, r6, #5
 8009376:	e7e3      	b.n	8009340 <__d2b+0x70>
 8009378:	0800b8dd 	.word	0x0800b8dd
 800937c:	0800b8ee 	.word	0x0800b8ee
 8009380:	0000030f 	.word	0x0000030f
 8009384:	fffffbcd 	.word	0xfffffbcd
 8009388:	fffffbce 	.word	0xfffffbce
 800938c:	3fffffff 	.word	0x3fffffff

08009390 <__ratio>:
 8009390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009392:	b087      	sub	sp, #28
 8009394:	000f      	movs	r7, r1
 8009396:	a904      	add	r1, sp, #16
 8009398:	0006      	movs	r6, r0
 800939a:	f7ff ff4d 	bl	8009238 <__b2d>
 800939e:	9000      	str	r0, [sp, #0]
 80093a0:	9101      	str	r1, [sp, #4]
 80093a2:	9b00      	ldr	r3, [sp, #0]
 80093a4:	9c01      	ldr	r4, [sp, #4]
 80093a6:	0038      	movs	r0, r7
 80093a8:	a905      	add	r1, sp, #20
 80093aa:	9302      	str	r3, [sp, #8]
 80093ac:	9403      	str	r4, [sp, #12]
 80093ae:	f7ff ff43 	bl	8009238 <__b2d>
 80093b2:	000d      	movs	r5, r1
 80093b4:	0002      	movs	r2, r0
 80093b6:	000b      	movs	r3, r1
 80093b8:	6930      	ldr	r0, [r6, #16]
 80093ba:	6939      	ldr	r1, [r7, #16]
 80093bc:	9e04      	ldr	r6, [sp, #16]
 80093be:	1a40      	subs	r0, r0, r1
 80093c0:	9905      	ldr	r1, [sp, #20]
 80093c2:	0140      	lsls	r0, r0, #5
 80093c4:	1a71      	subs	r1, r6, r1
 80093c6:	1841      	adds	r1, r0, r1
 80093c8:	0508      	lsls	r0, r1, #20
 80093ca:	2900      	cmp	r1, #0
 80093cc:	dd08      	ble.n	80093e0 <__ratio+0x50>
 80093ce:	9901      	ldr	r1, [sp, #4]
 80093d0:	1841      	adds	r1, r0, r1
 80093d2:	9103      	str	r1, [sp, #12]
 80093d4:	9802      	ldr	r0, [sp, #8]
 80093d6:	9903      	ldr	r1, [sp, #12]
 80093d8:	f7f8 fa7c 	bl	80018d4 <__aeabi_ddiv>
 80093dc:	b007      	add	sp, #28
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e0:	1a2b      	subs	r3, r5, r0
 80093e2:	e7f7      	b.n	80093d4 <__ratio+0x44>

080093e4 <__copybits>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	0014      	movs	r4, r2
 80093e8:	0005      	movs	r5, r0
 80093ea:	3901      	subs	r1, #1
 80093ec:	6913      	ldr	r3, [r2, #16]
 80093ee:	1149      	asrs	r1, r1, #5
 80093f0:	3101      	adds	r1, #1
 80093f2:	0089      	lsls	r1, r1, #2
 80093f4:	3414      	adds	r4, #20
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	1841      	adds	r1, r0, r1
 80093fa:	18e3      	adds	r3, r4, r3
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d80d      	bhi.n	800941c <__copybits+0x38>
 8009400:	0014      	movs	r4, r2
 8009402:	3411      	adds	r4, #17
 8009404:	2500      	movs	r5, #0
 8009406:	429c      	cmp	r4, r3
 8009408:	d803      	bhi.n	8009412 <__copybits+0x2e>
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	3b11      	subs	r3, #17
 800940e:	089b      	lsrs	r3, r3, #2
 8009410:	009d      	lsls	r5, r3, #2
 8009412:	2300      	movs	r3, #0
 8009414:	1940      	adds	r0, r0, r5
 8009416:	4281      	cmp	r1, r0
 8009418:	d803      	bhi.n	8009422 <__copybits+0x3e>
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	cc40      	ldmia	r4!, {r6}
 800941e:	c540      	stmia	r5!, {r6}
 8009420:	e7ec      	b.n	80093fc <__copybits+0x18>
 8009422:	c008      	stmia	r0!, {r3}
 8009424:	e7f7      	b.n	8009416 <__copybits+0x32>

08009426 <__any_on>:
 8009426:	0002      	movs	r2, r0
 8009428:	6900      	ldr	r0, [r0, #16]
 800942a:	b510      	push	{r4, lr}
 800942c:	3214      	adds	r2, #20
 800942e:	114b      	asrs	r3, r1, #5
 8009430:	4298      	cmp	r0, r3
 8009432:	db13      	blt.n	800945c <__any_on+0x36>
 8009434:	dd0c      	ble.n	8009450 <__any_on+0x2a>
 8009436:	241f      	movs	r4, #31
 8009438:	0008      	movs	r0, r1
 800943a:	4020      	ands	r0, r4
 800943c:	4221      	tst	r1, r4
 800943e:	d007      	beq.n	8009450 <__any_on+0x2a>
 8009440:	0099      	lsls	r1, r3, #2
 8009442:	588c      	ldr	r4, [r1, r2]
 8009444:	0021      	movs	r1, r4
 8009446:	40c1      	lsrs	r1, r0
 8009448:	4081      	lsls	r1, r0
 800944a:	2001      	movs	r0, #1
 800944c:	428c      	cmp	r4, r1
 800944e:	d104      	bne.n	800945a <__any_on+0x34>
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	4293      	cmp	r3, r2
 8009456:	d803      	bhi.n	8009460 <__any_on+0x3a>
 8009458:	2000      	movs	r0, #0
 800945a:	bd10      	pop	{r4, pc}
 800945c:	0003      	movs	r3, r0
 800945e:	e7f7      	b.n	8009450 <__any_on+0x2a>
 8009460:	3b04      	subs	r3, #4
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	2900      	cmp	r1, #0
 8009466:	d0f5      	beq.n	8009454 <__any_on+0x2e>
 8009468:	2001      	movs	r0, #1
 800946a:	e7f6      	b.n	800945a <__any_on+0x34>

0800946c <sulp>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	0016      	movs	r6, r2
 8009470:	000d      	movs	r5, r1
 8009472:	f7ff fec1 	bl	80091f8 <__ulp>
 8009476:	2e00      	cmp	r6, #0
 8009478:	d00d      	beq.n	8009496 <sulp+0x2a>
 800947a:	236b      	movs	r3, #107	@ 0x6b
 800947c:	006a      	lsls	r2, r5, #1
 800947e:	0d52      	lsrs	r2, r2, #21
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd07      	ble.n	8009496 <sulp+0x2a>
 8009486:	2400      	movs	r4, #0
 8009488:	4a03      	ldr	r2, [pc, #12]	@ (8009498 <sulp+0x2c>)
 800948a:	051b      	lsls	r3, r3, #20
 800948c:	189d      	adds	r5, r3, r2
 800948e:	002b      	movs	r3, r5
 8009490:	0022      	movs	r2, r4
 8009492:	f7f8 fe63 	bl	800215c <__aeabi_dmul>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	3ff00000 	.word	0x3ff00000

0800949c <_strtod_l>:
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	b0a3      	sub	sp, #140	@ 0x8c
 80094a0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80094a2:	2200      	movs	r2, #0
 80094a4:	2600      	movs	r6, #0
 80094a6:	2700      	movs	r7, #0
 80094a8:	9005      	str	r0, [sp, #20]
 80094aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80094ac:	921e      	str	r2, [sp, #120]	@ 0x78
 80094ae:	911d      	str	r1, [sp, #116]	@ 0x74
 80094b0:	780a      	ldrb	r2, [r1, #0]
 80094b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80094b4:	d053      	beq.n	800955e <_strtod_l+0xc2>
 80094b6:	d83f      	bhi.n	8009538 <_strtod_l+0x9c>
 80094b8:	2a0d      	cmp	r2, #13
 80094ba:	d839      	bhi.n	8009530 <_strtod_l+0x94>
 80094bc:	2a08      	cmp	r2, #8
 80094be:	d839      	bhi.n	8009534 <_strtod_l+0x98>
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d042      	beq.n	800954a <_strtod_l+0xae>
 80094c4:	2200      	movs	r2, #0
 80094c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80094c8:	2100      	movs	r1, #0
 80094ca:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80094cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80094ce:	782a      	ldrb	r2, [r5, #0]
 80094d0:	2a30      	cmp	r2, #48	@ 0x30
 80094d2:	d000      	beq.n	80094d6 <_strtod_l+0x3a>
 80094d4:	e083      	b.n	80095de <_strtod_l+0x142>
 80094d6:	786a      	ldrb	r2, [r5, #1]
 80094d8:	3120      	adds	r1, #32
 80094da:	438a      	bics	r2, r1
 80094dc:	2a58      	cmp	r2, #88	@ 0x58
 80094de:	d000      	beq.n	80094e2 <_strtod_l+0x46>
 80094e0:	e073      	b.n	80095ca <_strtod_l+0x12e>
 80094e2:	9302      	str	r3, [sp, #8]
 80094e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094e6:	4a95      	ldr	r2, [pc, #596]	@ (800973c <_strtod_l+0x2a0>)
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	ab1e      	add	r3, sp, #120	@ 0x78
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	9805      	ldr	r0, [sp, #20]
 80094f0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80094f2:	a91d      	add	r1, sp, #116	@ 0x74
 80094f4:	f001 f964 	bl	800a7c0 <__gethex>
 80094f8:	230f      	movs	r3, #15
 80094fa:	0002      	movs	r2, r0
 80094fc:	401a      	ands	r2, r3
 80094fe:	0004      	movs	r4, r0
 8009500:	9206      	str	r2, [sp, #24]
 8009502:	4218      	tst	r0, r3
 8009504:	d005      	beq.n	8009512 <_strtod_l+0x76>
 8009506:	2a06      	cmp	r2, #6
 8009508:	d12b      	bne.n	8009562 <_strtod_l+0xc6>
 800950a:	2300      	movs	r3, #0
 800950c:	3501      	adds	r5, #1
 800950e:	951d      	str	r5, [sp, #116]	@ 0x74
 8009510:	9312      	str	r3, [sp, #72]	@ 0x48
 8009512:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <_strtod_l+0x82>
 8009518:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800951a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009520:	2b00      	cmp	r3, #0
 8009522:	d019      	beq.n	8009558 <_strtod_l+0xbc>
 8009524:	2380      	movs	r3, #128	@ 0x80
 8009526:	0030      	movs	r0, r6
 8009528:	061b      	lsls	r3, r3, #24
 800952a:	18f9      	adds	r1, r7, r3
 800952c:	b023      	add	sp, #140	@ 0x8c
 800952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009530:	2a20      	cmp	r2, #32
 8009532:	d1c7      	bne.n	80094c4 <_strtod_l+0x28>
 8009534:	3101      	adds	r1, #1
 8009536:	e7ba      	b.n	80094ae <_strtod_l+0x12>
 8009538:	2a2d      	cmp	r2, #45	@ 0x2d
 800953a:	d1c3      	bne.n	80094c4 <_strtod_l+0x28>
 800953c:	3a2c      	subs	r2, #44	@ 0x2c
 800953e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009540:	1c4a      	adds	r2, r1, #1
 8009542:	921d      	str	r2, [sp, #116]	@ 0x74
 8009544:	784a      	ldrb	r2, [r1, #1]
 8009546:	2a00      	cmp	r2, #0
 8009548:	d1be      	bne.n	80094c8 <_strtod_l+0x2c>
 800954a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954c:	931d      	str	r3, [sp, #116]	@ 0x74
 800954e:	2300      	movs	r3, #0
 8009550:	9312      	str	r3, [sp, #72]	@ 0x48
 8009552:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1df      	bne.n	8009518 <_strtod_l+0x7c>
 8009558:	0030      	movs	r0, r6
 800955a:	0039      	movs	r1, r7
 800955c:	e7e6      	b.n	800952c <_strtod_l+0x90>
 800955e:	2200      	movs	r2, #0
 8009560:	e7ed      	b.n	800953e <_strtod_l+0xa2>
 8009562:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009564:	2a00      	cmp	r2, #0
 8009566:	d007      	beq.n	8009578 <_strtod_l+0xdc>
 8009568:	2135      	movs	r1, #53	@ 0x35
 800956a:	a820      	add	r0, sp, #128	@ 0x80
 800956c:	f7ff ff3a 	bl	80093e4 <__copybits>
 8009570:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009572:	9805      	ldr	r0, [sp, #20]
 8009574:	f7ff faf4 	bl	8008b60 <_Bfree>
 8009578:	9806      	ldr	r0, [sp, #24]
 800957a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800957c:	3801      	subs	r0, #1
 800957e:	2804      	cmp	r0, #4
 8009580:	d806      	bhi.n	8009590 <_strtod_l+0xf4>
 8009582:	f7f6 fdc9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009586:	0312      	.short	0x0312
 8009588:	1e1c      	.short	0x1e1c
 800958a:	12          	.byte	0x12
 800958b:	00          	.byte	0x00
 800958c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800958e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009590:	05e4      	lsls	r4, r4, #23
 8009592:	d502      	bpl.n	800959a <_strtod_l+0xfe>
 8009594:	2380      	movs	r3, #128	@ 0x80
 8009596:	061b      	lsls	r3, r3, #24
 8009598:	431f      	orrs	r7, r3
 800959a:	4b69      	ldr	r3, [pc, #420]	@ (8009740 <_strtod_l+0x2a4>)
 800959c:	423b      	tst	r3, r7
 800959e:	d1b8      	bne.n	8009512 <_strtod_l+0x76>
 80095a0:	f7fe fad6 	bl	8007b50 <__errno>
 80095a4:	2322      	movs	r3, #34	@ 0x22
 80095a6:	6003      	str	r3, [r0, #0]
 80095a8:	e7b3      	b.n	8009512 <_strtod_l+0x76>
 80095aa:	4966      	ldr	r1, [pc, #408]	@ (8009744 <_strtod_l+0x2a8>)
 80095ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095ae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80095b0:	400a      	ands	r2, r1
 80095b2:	4965      	ldr	r1, [pc, #404]	@ (8009748 <_strtod_l+0x2ac>)
 80095b4:	185b      	adds	r3, r3, r1
 80095b6:	051b      	lsls	r3, r3, #20
 80095b8:	431a      	orrs	r2, r3
 80095ba:	0017      	movs	r7, r2
 80095bc:	e7e8      	b.n	8009590 <_strtod_l+0xf4>
 80095be:	4f60      	ldr	r7, [pc, #384]	@ (8009740 <_strtod_l+0x2a4>)
 80095c0:	e7e6      	b.n	8009590 <_strtod_l+0xf4>
 80095c2:	2601      	movs	r6, #1
 80095c4:	4f61      	ldr	r7, [pc, #388]	@ (800974c <_strtod_l+0x2b0>)
 80095c6:	4276      	negs	r6, r6
 80095c8:	e7e2      	b.n	8009590 <_strtod_l+0xf4>
 80095ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	921d      	str	r2, [sp, #116]	@ 0x74
 80095d0:	785b      	ldrb	r3, [r3, #1]
 80095d2:	2b30      	cmp	r3, #48	@ 0x30
 80095d4:	d0f9      	beq.n	80095ca <_strtod_l+0x12e>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d09b      	beq.n	8009512 <_strtod_l+0x76>
 80095da:	2301      	movs	r3, #1
 80095dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095de:	2500      	movs	r5, #0
 80095e0:	220a      	movs	r2, #10
 80095e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095e4:	950d      	str	r5, [sp, #52]	@ 0x34
 80095e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095e8:	9508      	str	r5, [sp, #32]
 80095ea:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80095ec:	7804      	ldrb	r4, [r0, #0]
 80095ee:	0023      	movs	r3, r4
 80095f0:	3b30      	subs	r3, #48	@ 0x30
 80095f2:	b2d9      	uxtb	r1, r3
 80095f4:	2909      	cmp	r1, #9
 80095f6:	d927      	bls.n	8009648 <_strtod_l+0x1ac>
 80095f8:	2201      	movs	r2, #1
 80095fa:	4955      	ldr	r1, [pc, #340]	@ (8009750 <_strtod_l+0x2b4>)
 80095fc:	f000 fff8 	bl	800a5f0 <strncmp>
 8009600:	2800      	cmp	r0, #0
 8009602:	d031      	beq.n	8009668 <_strtod_l+0x1cc>
 8009604:	2000      	movs	r0, #0
 8009606:	0023      	movs	r3, r4
 8009608:	4684      	mov	ip, r0
 800960a:	9a08      	ldr	r2, [sp, #32]
 800960c:	900e      	str	r0, [sp, #56]	@ 0x38
 800960e:	9206      	str	r2, [sp, #24]
 8009610:	2220      	movs	r2, #32
 8009612:	0019      	movs	r1, r3
 8009614:	4391      	bics	r1, r2
 8009616:	000a      	movs	r2, r1
 8009618:	2100      	movs	r1, #0
 800961a:	9107      	str	r1, [sp, #28]
 800961c:	2a45      	cmp	r2, #69	@ 0x45
 800961e:	d000      	beq.n	8009622 <_strtod_l+0x186>
 8009620:	e0c0      	b.n	80097a4 <_strtod_l+0x308>
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009626:	4303      	orrs	r3, r0
 8009628:	4313      	orrs	r3, r2
 800962a:	428b      	cmp	r3, r1
 800962c:	d08d      	beq.n	800954a <_strtod_l+0xae>
 800962e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009630:	9309      	str	r3, [sp, #36]	@ 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	931d      	str	r3, [sp, #116]	@ 0x74
 8009636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009638:	785b      	ldrb	r3, [r3, #1]
 800963a:	2b2b      	cmp	r3, #43	@ 0x2b
 800963c:	d070      	beq.n	8009720 <_strtod_l+0x284>
 800963e:	000c      	movs	r4, r1
 8009640:	2b2d      	cmp	r3, #45	@ 0x2d
 8009642:	d173      	bne.n	800972c <_strtod_l+0x290>
 8009644:	2401      	movs	r4, #1
 8009646:	e06c      	b.n	8009722 <_strtod_l+0x286>
 8009648:	9908      	ldr	r1, [sp, #32]
 800964a:	2908      	cmp	r1, #8
 800964c:	dc09      	bgt.n	8009662 <_strtod_l+0x1c6>
 800964e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009650:	4351      	muls	r1, r2
 8009652:	185b      	adds	r3, r3, r1
 8009654:	930d      	str	r3, [sp, #52]	@ 0x34
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	3001      	adds	r0, #1
 800965a:	3301      	adds	r3, #1
 800965c:	9308      	str	r3, [sp, #32]
 800965e:	901d      	str	r0, [sp, #116]	@ 0x74
 8009660:	e7c3      	b.n	80095ea <_strtod_l+0x14e>
 8009662:	4355      	muls	r5, r2
 8009664:	195d      	adds	r5, r3, r5
 8009666:	e7f6      	b.n	8009656 <_strtod_l+0x1ba>
 8009668:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	921d      	str	r2, [sp, #116]	@ 0x74
 800966e:	9a08      	ldr	r2, [sp, #32]
 8009670:	785b      	ldrb	r3, [r3, #1]
 8009672:	2a00      	cmp	r2, #0
 8009674:	d03a      	beq.n	80096ec <_strtod_l+0x250>
 8009676:	900e      	str	r0, [sp, #56]	@ 0x38
 8009678:	9206      	str	r2, [sp, #24]
 800967a:	001a      	movs	r2, r3
 800967c:	3a30      	subs	r2, #48	@ 0x30
 800967e:	2a09      	cmp	r2, #9
 8009680:	d912      	bls.n	80096a8 <_strtod_l+0x20c>
 8009682:	2201      	movs	r2, #1
 8009684:	4694      	mov	ip, r2
 8009686:	e7c3      	b.n	8009610 <_strtod_l+0x174>
 8009688:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800968a:	3001      	adds	r0, #1
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	2b30      	cmp	r3, #48	@ 0x30
 8009694:	d0f8      	beq.n	8009688 <_strtod_l+0x1ec>
 8009696:	001a      	movs	r2, r3
 8009698:	3a31      	subs	r2, #49	@ 0x31
 800969a:	2a08      	cmp	r2, #8
 800969c:	d83b      	bhi.n	8009716 <_strtod_l+0x27a>
 800969e:	900e      	str	r0, [sp, #56]	@ 0x38
 80096a0:	2000      	movs	r0, #0
 80096a2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80096a4:	9006      	str	r0, [sp, #24]
 80096a6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80096a8:	001a      	movs	r2, r3
 80096aa:	1c41      	adds	r1, r0, #1
 80096ac:	3a30      	subs	r2, #48	@ 0x30
 80096ae:	2b30      	cmp	r3, #48	@ 0x30
 80096b0:	d016      	beq.n	80096e0 <_strtod_l+0x244>
 80096b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096b4:	185b      	adds	r3, r3, r1
 80096b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80096b8:	9b06      	ldr	r3, [sp, #24]
 80096ba:	210a      	movs	r1, #10
 80096bc:	469c      	mov	ip, r3
 80096be:	4484      	add	ip, r0
 80096c0:	459c      	cmp	ip, r3
 80096c2:	d115      	bne.n	80096f0 <_strtod_l+0x254>
 80096c4:	9906      	ldr	r1, [sp, #24]
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	3101      	adds	r1, #1
 80096ca:	1809      	adds	r1, r1, r0
 80096cc:	181b      	adds	r3, r3, r0
 80096ce:	9106      	str	r1, [sp, #24]
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	dc19      	bgt.n	8009708 <_strtod_l+0x26c>
 80096d4:	230a      	movs	r3, #10
 80096d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80096d8:	434b      	muls	r3, r1
 80096da:	2100      	movs	r1, #0
 80096dc:	18d3      	adds	r3, r2, r3
 80096de:	930d      	str	r3, [sp, #52]	@ 0x34
 80096e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096e2:	0008      	movs	r0, r1
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	e7c6      	b.n	800967a <_strtod_l+0x1de>
 80096ec:	9808      	ldr	r0, [sp, #32]
 80096ee:	e7d0      	b.n	8009692 <_strtod_l+0x1f6>
 80096f0:	1c5c      	adds	r4, r3, #1
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	dc04      	bgt.n	8009700 <_strtod_l+0x264>
 80096f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096f8:	434b      	muls	r3, r1
 80096fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80096fc:	0023      	movs	r3, r4
 80096fe:	e7df      	b.n	80096c0 <_strtod_l+0x224>
 8009700:	2c10      	cmp	r4, #16
 8009702:	dcfb      	bgt.n	80096fc <_strtod_l+0x260>
 8009704:	434d      	muls	r5, r1
 8009706:	e7f9      	b.n	80096fc <_strtod_l+0x260>
 8009708:	2100      	movs	r1, #0
 800970a:	2b0f      	cmp	r3, #15
 800970c:	dce8      	bgt.n	80096e0 <_strtod_l+0x244>
 800970e:	230a      	movs	r3, #10
 8009710:	435d      	muls	r5, r3
 8009712:	1955      	adds	r5, r2, r5
 8009714:	e7e4      	b.n	80096e0 <_strtod_l+0x244>
 8009716:	2200      	movs	r2, #0
 8009718:	920e      	str	r2, [sp, #56]	@ 0x38
 800971a:	9206      	str	r2, [sp, #24]
 800971c:	3201      	adds	r2, #1
 800971e:	e7b1      	b.n	8009684 <_strtod_l+0x1e8>
 8009720:	2400      	movs	r4, #0
 8009722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009724:	3302      	adds	r3, #2
 8009726:	931d      	str	r3, [sp, #116]	@ 0x74
 8009728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972a:	789b      	ldrb	r3, [r3, #2]
 800972c:	001a      	movs	r2, r3
 800972e:	3a30      	subs	r2, #48	@ 0x30
 8009730:	2a09      	cmp	r2, #9
 8009732:	d913      	bls.n	800975c <_strtod_l+0x2c0>
 8009734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009736:	921d      	str	r2, [sp, #116]	@ 0x74
 8009738:	2200      	movs	r2, #0
 800973a:	e032      	b.n	80097a2 <_strtod_l+0x306>
 800973c:	0800ba60 	.word	0x0800ba60
 8009740:	7ff00000 	.word	0x7ff00000
 8009744:	ffefffff 	.word	0xffefffff
 8009748:	00000433 	.word	0x00000433
 800974c:	7fffffff 	.word	0x7fffffff
 8009750:	0800ba48 	.word	0x0800ba48
 8009754:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	921d      	str	r2, [sp, #116]	@ 0x74
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b30      	cmp	r3, #48	@ 0x30
 800975e:	d0f9      	beq.n	8009754 <_strtod_l+0x2b8>
 8009760:	2200      	movs	r2, #0
 8009762:	9207      	str	r2, [sp, #28]
 8009764:	001a      	movs	r2, r3
 8009766:	3a31      	subs	r2, #49	@ 0x31
 8009768:	2a08      	cmp	r2, #8
 800976a:	d81b      	bhi.n	80097a4 <_strtod_l+0x308>
 800976c:	3b30      	subs	r3, #48	@ 0x30
 800976e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009770:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009772:	9307      	str	r3, [sp, #28]
 8009774:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009776:	1c59      	adds	r1, r3, #1
 8009778:	911d      	str	r1, [sp, #116]	@ 0x74
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	001a      	movs	r2, r3
 800977e:	3a30      	subs	r2, #48	@ 0x30
 8009780:	2a09      	cmp	r2, #9
 8009782:	d93a      	bls.n	80097fa <_strtod_l+0x35e>
 8009784:	9a07      	ldr	r2, [sp, #28]
 8009786:	1a8a      	subs	r2, r1, r2
 8009788:	49b4      	ldr	r1, [pc, #720]	@ (8009a5c <_strtod_l+0x5c0>)
 800978a:	9107      	str	r1, [sp, #28]
 800978c:	2a08      	cmp	r2, #8
 800978e:	dc04      	bgt.n	800979a <_strtod_l+0x2fe>
 8009790:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	428a      	cmp	r2, r1
 8009796:	dd00      	ble.n	800979a <_strtod_l+0x2fe>
 8009798:	9107      	str	r1, [sp, #28]
 800979a:	2c00      	cmp	r4, #0
 800979c:	d002      	beq.n	80097a4 <_strtod_l+0x308>
 800979e:	9a07      	ldr	r2, [sp, #28]
 80097a0:	4252      	negs	r2, r2
 80097a2:	9207      	str	r2, [sp, #28]
 80097a4:	9a06      	ldr	r2, [sp, #24]
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	d14d      	bne.n	8009846 <_strtod_l+0x3aa>
 80097aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097ac:	4310      	orrs	r0, r2
 80097ae:	d000      	beq.n	80097b2 <_strtod_l+0x316>
 80097b0:	e6af      	b.n	8009512 <_strtod_l+0x76>
 80097b2:	4662      	mov	r2, ip
 80097b4:	2a00      	cmp	r2, #0
 80097b6:	d000      	beq.n	80097ba <_strtod_l+0x31e>
 80097b8:	e6c7      	b.n	800954a <_strtod_l+0xae>
 80097ba:	2b69      	cmp	r3, #105	@ 0x69
 80097bc:	d027      	beq.n	800980e <_strtod_l+0x372>
 80097be:	dc23      	bgt.n	8009808 <_strtod_l+0x36c>
 80097c0:	2b49      	cmp	r3, #73	@ 0x49
 80097c2:	d024      	beq.n	800980e <_strtod_l+0x372>
 80097c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80097c6:	d000      	beq.n	80097ca <_strtod_l+0x32e>
 80097c8:	e6bf      	b.n	800954a <_strtod_l+0xae>
 80097ca:	49a5      	ldr	r1, [pc, #660]	@ (8009a60 <_strtod_l+0x5c4>)
 80097cc:	a81d      	add	r0, sp, #116	@ 0x74
 80097ce:	f001 fa2d 	bl	800ac2c <__match>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d100      	bne.n	80097d8 <_strtod_l+0x33c>
 80097d6:	e6b8      	b.n	800954a <_strtod_l+0xae>
 80097d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b28      	cmp	r3, #40	@ 0x28
 80097de:	d12c      	bne.n	800983a <_strtod_l+0x39e>
 80097e0:	49a0      	ldr	r1, [pc, #640]	@ (8009a64 <_strtod_l+0x5c8>)
 80097e2:	aa20      	add	r2, sp, #128	@ 0x80
 80097e4:	a81d      	add	r0, sp, #116	@ 0x74
 80097e6:	f001 fa35 	bl	800ac54 <__hexnan>
 80097ea:	2805      	cmp	r0, #5
 80097ec:	d125      	bne.n	800983a <_strtod_l+0x39e>
 80097ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097f0:	4a9d      	ldr	r2, [pc, #628]	@ (8009a68 <_strtod_l+0x5cc>)
 80097f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80097f4:	431a      	orrs	r2, r3
 80097f6:	0017      	movs	r7, r2
 80097f8:	e68b      	b.n	8009512 <_strtod_l+0x76>
 80097fa:	220a      	movs	r2, #10
 80097fc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80097fe:	434a      	muls	r2, r1
 8009800:	18d2      	adds	r2, r2, r3
 8009802:	3a30      	subs	r2, #48	@ 0x30
 8009804:	9210      	str	r2, [sp, #64]	@ 0x40
 8009806:	e7b5      	b.n	8009774 <_strtod_l+0x2d8>
 8009808:	2b6e      	cmp	r3, #110	@ 0x6e
 800980a:	d0de      	beq.n	80097ca <_strtod_l+0x32e>
 800980c:	e69d      	b.n	800954a <_strtod_l+0xae>
 800980e:	4997      	ldr	r1, [pc, #604]	@ (8009a6c <_strtod_l+0x5d0>)
 8009810:	a81d      	add	r0, sp, #116	@ 0x74
 8009812:	f001 fa0b 	bl	800ac2c <__match>
 8009816:	2800      	cmp	r0, #0
 8009818:	d100      	bne.n	800981c <_strtod_l+0x380>
 800981a:	e696      	b.n	800954a <_strtod_l+0xae>
 800981c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800981e:	4994      	ldr	r1, [pc, #592]	@ (8009a70 <_strtod_l+0x5d4>)
 8009820:	3b01      	subs	r3, #1
 8009822:	a81d      	add	r0, sp, #116	@ 0x74
 8009824:	931d      	str	r3, [sp, #116]	@ 0x74
 8009826:	f001 fa01 	bl	800ac2c <__match>
 800982a:	2800      	cmp	r0, #0
 800982c:	d102      	bne.n	8009834 <_strtod_l+0x398>
 800982e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009830:	3301      	adds	r3, #1
 8009832:	931d      	str	r3, [sp, #116]	@ 0x74
 8009834:	2600      	movs	r6, #0
 8009836:	4f8c      	ldr	r7, [pc, #560]	@ (8009a68 <_strtod_l+0x5cc>)
 8009838:	e66b      	b.n	8009512 <_strtod_l+0x76>
 800983a:	488e      	ldr	r0, [pc, #568]	@ (8009a74 <_strtod_l+0x5d8>)
 800983c:	f000 ff06 	bl	800a64c <nan>
 8009840:	0006      	movs	r6, r0
 8009842:	000f      	movs	r7, r1
 8009844:	e665      	b.n	8009512 <_strtod_l+0x76>
 8009846:	9b07      	ldr	r3, [sp, #28]
 8009848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	930c      	str	r3, [sp, #48]	@ 0x30
 800984e:	9b08      	ldr	r3, [sp, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <_strtod_l+0x3bc>
 8009854:	9b06      	ldr	r3, [sp, #24]
 8009856:	9308      	str	r3, [sp, #32]
 8009858:	9c06      	ldr	r4, [sp, #24]
 800985a:	2c10      	cmp	r4, #16
 800985c:	dd00      	ble.n	8009860 <_strtod_l+0x3c4>
 800985e:	2410      	movs	r4, #16
 8009860:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009862:	f7f9 fb6b 	bl	8002f3c <__aeabi_ui2d>
 8009866:	9b06      	ldr	r3, [sp, #24]
 8009868:	0006      	movs	r6, r0
 800986a:	000f      	movs	r7, r1
 800986c:	2b09      	cmp	r3, #9
 800986e:	dc13      	bgt.n	8009898 <_strtod_l+0x3fc>
 8009870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	d100      	bne.n	8009878 <_strtod_l+0x3dc>
 8009876:	e64c      	b.n	8009512 <_strtod_l+0x76>
 8009878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	dc00      	bgt.n	8009880 <_strtod_l+0x3e4>
 800987e:	e07e      	b.n	800997e <_strtod_l+0x4e2>
 8009880:	2b16      	cmp	r3, #22
 8009882:	dc63      	bgt.n	800994c <_strtod_l+0x4b0>
 8009884:	497c      	ldr	r1, [pc, #496]	@ (8009a78 <_strtod_l+0x5dc>)
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	18c9      	adds	r1, r1, r3
 800988a:	0032      	movs	r2, r6
 800988c:	6808      	ldr	r0, [r1, #0]
 800988e:	6849      	ldr	r1, [r1, #4]
 8009890:	003b      	movs	r3, r7
 8009892:	f7f8 fc63 	bl	800215c <__aeabi_dmul>
 8009896:	e7d3      	b.n	8009840 <_strtod_l+0x3a4>
 8009898:	0022      	movs	r2, r4
 800989a:	4b77      	ldr	r3, [pc, #476]	@ (8009a78 <_strtod_l+0x5dc>)
 800989c:	3a09      	subs	r2, #9
 800989e:	00d2      	lsls	r2, r2, #3
 80098a0:	189b      	adds	r3, r3, r2
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f7f8 fc59 	bl	800215c <__aeabi_dmul>
 80098aa:	0006      	movs	r6, r0
 80098ac:	0028      	movs	r0, r5
 80098ae:	000f      	movs	r7, r1
 80098b0:	f7f9 fb44 	bl	8002f3c <__aeabi_ui2d>
 80098b4:	000b      	movs	r3, r1
 80098b6:	0002      	movs	r2, r0
 80098b8:	0039      	movs	r1, r7
 80098ba:	0030      	movs	r0, r6
 80098bc:	f7f7 fca6 	bl	800120c <__aeabi_dadd>
 80098c0:	9b06      	ldr	r3, [sp, #24]
 80098c2:	0006      	movs	r6, r0
 80098c4:	000f      	movs	r7, r1
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	ddd2      	ble.n	8009870 <_strtod_l+0x3d4>
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	1b1c      	subs	r4, r3, r4
 80098ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098d0:	18e4      	adds	r4, r4, r3
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	dc00      	bgt.n	80098d8 <_strtod_l+0x43c>
 80098d6:	e09b      	b.n	8009a10 <_strtod_l+0x574>
 80098d8:	220f      	movs	r2, #15
 80098da:	0023      	movs	r3, r4
 80098dc:	4013      	ands	r3, r2
 80098de:	4214      	tst	r4, r2
 80098e0:	d00a      	beq.n	80098f8 <_strtod_l+0x45c>
 80098e2:	4965      	ldr	r1, [pc, #404]	@ (8009a78 <_strtod_l+0x5dc>)
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	18c9      	adds	r1, r1, r3
 80098e8:	0032      	movs	r2, r6
 80098ea:	6808      	ldr	r0, [r1, #0]
 80098ec:	6849      	ldr	r1, [r1, #4]
 80098ee:	003b      	movs	r3, r7
 80098f0:	f7f8 fc34 	bl	800215c <__aeabi_dmul>
 80098f4:	0006      	movs	r6, r0
 80098f6:	000f      	movs	r7, r1
 80098f8:	230f      	movs	r3, #15
 80098fa:	439c      	bics	r4, r3
 80098fc:	d073      	beq.n	80099e6 <_strtod_l+0x54a>
 80098fe:	3326      	adds	r3, #38	@ 0x26
 8009900:	33ff      	adds	r3, #255	@ 0xff
 8009902:	429c      	cmp	r4, r3
 8009904:	dd4b      	ble.n	800999e <_strtod_l+0x502>
 8009906:	2300      	movs	r3, #0
 8009908:	9306      	str	r3, [sp, #24]
 800990a:	9307      	str	r3, [sp, #28]
 800990c:	930d      	str	r3, [sp, #52]	@ 0x34
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	2322      	movs	r3, #34	@ 0x22
 8009912:	2600      	movs	r6, #0
 8009914:	9a05      	ldr	r2, [sp, #20]
 8009916:	4f54      	ldr	r7, [pc, #336]	@ (8009a68 <_strtod_l+0x5cc>)
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800991c:	42b3      	cmp	r3, r6
 800991e:	d100      	bne.n	8009922 <_strtod_l+0x486>
 8009920:	e5f7      	b.n	8009512 <_strtod_l+0x76>
 8009922:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	f7ff f91b 	bl	8008b60 <_Bfree>
 800992a:	9908      	ldr	r1, [sp, #32]
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	f7ff f917 	bl	8008b60 <_Bfree>
 8009932:	9907      	ldr	r1, [sp, #28]
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	f7ff f913 	bl	8008b60 <_Bfree>
 800993a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800993c:	9805      	ldr	r0, [sp, #20]
 800993e:	f7ff f90f 	bl	8008b60 <_Bfree>
 8009942:	9906      	ldr	r1, [sp, #24]
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	f7ff f90b 	bl	8008b60 <_Bfree>
 800994a:	e5e2      	b.n	8009512 <_strtod_l+0x76>
 800994c:	2325      	movs	r3, #37	@ 0x25
 800994e:	9a06      	ldr	r2, [sp, #24]
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009954:	4293      	cmp	r3, r2
 8009956:	dbb8      	blt.n	80098ca <_strtod_l+0x42e>
 8009958:	240f      	movs	r4, #15
 800995a:	9b06      	ldr	r3, [sp, #24]
 800995c:	4d46      	ldr	r5, [pc, #280]	@ (8009a78 <_strtod_l+0x5dc>)
 800995e:	1ae4      	subs	r4, r4, r3
 8009960:	00e1      	lsls	r1, r4, #3
 8009962:	1869      	adds	r1, r5, r1
 8009964:	0032      	movs	r2, r6
 8009966:	6808      	ldr	r0, [r1, #0]
 8009968:	6849      	ldr	r1, [r1, #4]
 800996a:	003b      	movs	r3, r7
 800996c:	f7f8 fbf6 	bl	800215c <__aeabi_dmul>
 8009970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009972:	1b1c      	subs	r4, r3, r4
 8009974:	00e4      	lsls	r4, r4, #3
 8009976:	192d      	adds	r5, r5, r4
 8009978:	682a      	ldr	r2, [r5, #0]
 800997a:	686b      	ldr	r3, [r5, #4]
 800997c:	e789      	b.n	8009892 <_strtod_l+0x3f6>
 800997e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009980:	3316      	adds	r3, #22
 8009982:	dba2      	blt.n	80098ca <_strtod_l+0x42e>
 8009984:	9907      	ldr	r1, [sp, #28]
 8009986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009988:	4b3b      	ldr	r3, [pc, #236]	@ (8009a78 <_strtod_l+0x5dc>)
 800998a:	1a52      	subs	r2, r2, r1
 800998c:	00d2      	lsls	r2, r2, #3
 800998e:	189b      	adds	r3, r3, r2
 8009990:	0030      	movs	r0, r6
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	0039      	movs	r1, r7
 8009998:	f7f7 ff9c 	bl	80018d4 <__aeabi_ddiv>
 800999c:	e750      	b.n	8009840 <_strtod_l+0x3a4>
 800999e:	2300      	movs	r3, #0
 80099a0:	0030      	movs	r0, r6
 80099a2:	0039      	movs	r1, r7
 80099a4:	4d35      	ldr	r5, [pc, #212]	@ (8009a7c <_strtod_l+0x5e0>)
 80099a6:	1124      	asrs	r4, r4, #4
 80099a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099aa:	2c01      	cmp	r4, #1
 80099ac:	dc1e      	bgt.n	80099ec <_strtod_l+0x550>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <_strtod_l+0x51a>
 80099b2:	0006      	movs	r6, r0
 80099b4:	000f      	movs	r7, r1
 80099b6:	4b32      	ldr	r3, [pc, #200]	@ (8009a80 <_strtod_l+0x5e4>)
 80099b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ba:	18ff      	adds	r7, r7, r3
 80099bc:	4b2f      	ldr	r3, [pc, #188]	@ (8009a7c <_strtod_l+0x5e0>)
 80099be:	00d5      	lsls	r5, r2, #3
 80099c0:	195d      	adds	r5, r3, r5
 80099c2:	0032      	movs	r2, r6
 80099c4:	6828      	ldr	r0, [r5, #0]
 80099c6:	6869      	ldr	r1, [r5, #4]
 80099c8:	003b      	movs	r3, r7
 80099ca:	f7f8 fbc7 	bl	800215c <__aeabi_dmul>
 80099ce:	4b26      	ldr	r3, [pc, #152]	@ (8009a68 <_strtod_l+0x5cc>)
 80099d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009a84 <_strtod_l+0x5e8>)
 80099d2:	0006      	movs	r6, r0
 80099d4:	400b      	ands	r3, r1
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d895      	bhi.n	8009906 <_strtod_l+0x46a>
 80099da:	4a2b      	ldr	r2, [pc, #172]	@ (8009a88 <_strtod_l+0x5ec>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d913      	bls.n	8009a08 <_strtod_l+0x56c>
 80099e0:	2601      	movs	r6, #1
 80099e2:	4f2a      	ldr	r7, [pc, #168]	@ (8009a8c <_strtod_l+0x5f0>)
 80099e4:	4276      	negs	r6, r6
 80099e6:	2300      	movs	r3, #0
 80099e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ea:	e086      	b.n	8009afa <_strtod_l+0x65e>
 80099ec:	2201      	movs	r2, #1
 80099ee:	4214      	tst	r4, r2
 80099f0:	d004      	beq.n	80099fc <_strtod_l+0x560>
 80099f2:	682a      	ldr	r2, [r5, #0]
 80099f4:	686b      	ldr	r3, [r5, #4]
 80099f6:	f7f8 fbb1 	bl	800215c <__aeabi_dmul>
 80099fa:	2301      	movs	r3, #1
 80099fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099fe:	1064      	asrs	r4, r4, #1
 8009a00:	3201      	adds	r2, #1
 8009a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a04:	3508      	adds	r5, #8
 8009a06:	e7d0      	b.n	80099aa <_strtod_l+0x50e>
 8009a08:	23d4      	movs	r3, #212	@ 0xd4
 8009a0a:	049b      	lsls	r3, r3, #18
 8009a0c:	18cf      	adds	r7, r1, r3
 8009a0e:	e7ea      	b.n	80099e6 <_strtod_l+0x54a>
 8009a10:	2c00      	cmp	r4, #0
 8009a12:	d0e8      	beq.n	80099e6 <_strtod_l+0x54a>
 8009a14:	4264      	negs	r4, r4
 8009a16:	230f      	movs	r3, #15
 8009a18:	0022      	movs	r2, r4
 8009a1a:	401a      	ands	r2, r3
 8009a1c:	421c      	tst	r4, r3
 8009a1e:	d00a      	beq.n	8009a36 <_strtod_l+0x59a>
 8009a20:	4b15      	ldr	r3, [pc, #84]	@ (8009a78 <_strtod_l+0x5dc>)
 8009a22:	00d2      	lsls	r2, r2, #3
 8009a24:	189b      	adds	r3, r3, r2
 8009a26:	0030      	movs	r0, r6
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	0039      	movs	r1, r7
 8009a2e:	f7f7 ff51 	bl	80018d4 <__aeabi_ddiv>
 8009a32:	0006      	movs	r6, r0
 8009a34:	000f      	movs	r7, r1
 8009a36:	1124      	asrs	r4, r4, #4
 8009a38:	d0d5      	beq.n	80099e6 <_strtod_l+0x54a>
 8009a3a:	2c1f      	cmp	r4, #31
 8009a3c:	dd28      	ble.n	8009a90 <_strtod_l+0x5f4>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9306      	str	r3, [sp, #24]
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	2322      	movs	r3, #34	@ 0x22
 8009a4a:	9a05      	ldr	r2, [sp, #20]
 8009a4c:	2600      	movs	r6, #0
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a52:	2700      	movs	r7, #0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d000      	beq.n	8009a5a <_strtod_l+0x5be>
 8009a58:	e763      	b.n	8009922 <_strtod_l+0x486>
 8009a5a:	e55a      	b.n	8009512 <_strtod_l+0x76>
 8009a5c:	00004e1f 	.word	0x00004e1f
 8009a60:	0800b835 	.word	0x0800b835
 8009a64:	0800ba4c 	.word	0x0800ba4c
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	0800b82d 	.word	0x0800b82d
 8009a70:	0800b864 	.word	0x0800b864
 8009a74:	0800bbf5 	.word	0x0800bbf5
 8009a78:	0800b980 	.word	0x0800b980
 8009a7c:	0800b958 	.word	0x0800b958
 8009a80:	fcb00000 	.word	0xfcb00000
 8009a84:	7ca00000 	.word	0x7ca00000
 8009a88:	7c900000 	.word	0x7c900000
 8009a8c:	7fefffff 	.word	0x7fefffff
 8009a90:	2310      	movs	r3, #16
 8009a92:	0022      	movs	r2, r4
 8009a94:	401a      	ands	r2, r3
 8009a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a98:	421c      	tst	r4, r3
 8009a9a:	d001      	beq.n	8009aa0 <_strtod_l+0x604>
 8009a9c:	335a      	adds	r3, #90	@ 0x5a
 8009a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aa0:	0030      	movs	r0, r6
 8009aa2:	0039      	movs	r1, r7
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4dbf      	ldr	r5, [pc, #764]	@ (8009da4 <_strtod_l+0x908>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4214      	tst	r4, r2
 8009aac:	d004      	beq.n	8009ab8 <_strtod_l+0x61c>
 8009aae:	682a      	ldr	r2, [r5, #0]
 8009ab0:	686b      	ldr	r3, [r5, #4]
 8009ab2:	f7f8 fb53 	bl	800215c <__aeabi_dmul>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	1064      	asrs	r4, r4, #1
 8009aba:	3508      	adds	r5, #8
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d1f3      	bne.n	8009aa8 <_strtod_l+0x60c>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <_strtod_l+0x62c>
 8009ac4:	0006      	movs	r6, r0
 8009ac6:	000f      	movs	r7, r1
 8009ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00d      	beq.n	8009aea <_strtod_l+0x64e>
 8009ace:	236b      	movs	r3, #107	@ 0x6b
 8009ad0:	007a      	lsls	r2, r7, #1
 8009ad2:	0d52      	lsrs	r2, r2, #21
 8009ad4:	0039      	movs	r1, r7
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dd06      	ble.n	8009aea <_strtod_l+0x64e>
 8009adc:	2b1f      	cmp	r3, #31
 8009ade:	dd5a      	ble.n	8009b96 <_strtod_l+0x6fa>
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	2b34      	cmp	r3, #52	@ 0x34
 8009ae4:	dd50      	ble.n	8009b88 <_strtod_l+0x6ec>
 8009ae6:	27dc      	movs	r7, #220	@ 0xdc
 8009ae8:	04bf      	lsls	r7, r7, #18
 8009aea:	2200      	movs	r2, #0
 8009aec:	2300      	movs	r3, #0
 8009aee:	0030      	movs	r0, r6
 8009af0:	0039      	movs	r1, r7
 8009af2:	f7f6 fcab 	bl	800044c <__aeabi_dcmpeq>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d1a1      	bne.n	8009a3e <_strtod_l+0x5a2>
 8009afa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009afc:	9a08      	ldr	r2, [sp, #32]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009b02:	9b06      	ldr	r3, [sp, #24]
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	f7ff f893 	bl	8008c30 <__s2b>
 8009b0a:	900d      	str	r0, [sp, #52]	@ 0x34
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d100      	bne.n	8009b12 <_strtod_l+0x676>
 8009b10:	e6f9      	b.n	8009906 <_strtod_l+0x46a>
 8009b12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b14:	9907      	ldr	r1, [sp, #28]
 8009b16:	17da      	asrs	r2, r3, #31
 8009b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	401a      	ands	r2, r3
 8009b1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009b22:	43db      	mvns	r3, r3
 8009b24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b26:	17db      	asrs	r3, r3, #31
 8009b28:	401a      	ands	r2, r3
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009b2e:	9306      	str	r3, [sp, #24]
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b34:	9805      	ldr	r0, [sp, #20]
 8009b36:	6859      	ldr	r1, [r3, #4]
 8009b38:	f7fe ffce 	bl	8008ad8 <_Balloc>
 8009b3c:	9008      	str	r0, [sp, #32]
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d100      	bne.n	8009b44 <_strtod_l+0x6a8>
 8009b42:	e6e5      	b.n	8009910 <_strtod_l+0x474>
 8009b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b46:	300c      	adds	r0, #12
 8009b48:	0019      	movs	r1, r3
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	310c      	adds	r1, #12
 8009b4e:	3202      	adds	r2, #2
 8009b50:	0092      	lsls	r2, r2, #2
 8009b52:	f000 fd71 	bl	800a638 <memcpy>
 8009b56:	ab20      	add	r3, sp, #128	@ 0x80
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	0032      	movs	r2, r6
 8009b60:	003b      	movs	r3, r7
 8009b62:	9805      	ldr	r0, [sp, #20]
 8009b64:	9610      	str	r6, [sp, #64]	@ 0x40
 8009b66:	9711      	str	r7, [sp, #68]	@ 0x44
 8009b68:	f7ff fbb2 	bl	80092d0 <__d2b>
 8009b6c:	901e      	str	r0, [sp, #120]	@ 0x78
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d100      	bne.n	8009b74 <_strtod_l+0x6d8>
 8009b72:	e6cd      	b.n	8009910 <_strtod_l+0x474>
 8009b74:	2101      	movs	r1, #1
 8009b76:	9805      	ldr	r0, [sp, #20]
 8009b78:	f7ff f8f6 	bl	8008d68 <__i2b>
 8009b7c:	9007      	str	r0, [sp, #28]
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d10e      	bne.n	8009ba0 <_strtod_l+0x704>
 8009b82:	2300      	movs	r3, #0
 8009b84:	9307      	str	r3, [sp, #28]
 8009b86:	e6c3      	b.n	8009910 <_strtod_l+0x474>
 8009b88:	234b      	movs	r3, #75	@ 0x4b
 8009b8a:	1a9a      	subs	r2, r3, r2
 8009b8c:	3b4c      	subs	r3, #76	@ 0x4c
 8009b8e:	4093      	lsls	r3, r2
 8009b90:	4019      	ands	r1, r3
 8009b92:	000f      	movs	r7, r1
 8009b94:	e7a9      	b.n	8009aea <_strtod_l+0x64e>
 8009b96:	2201      	movs	r2, #1
 8009b98:	4252      	negs	r2, r2
 8009b9a:	409a      	lsls	r2, r3
 8009b9c:	4016      	ands	r6, r2
 8009b9e:	e7a4      	b.n	8009aea <_strtod_l+0x64e>
 8009ba0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009ba2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ba4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8009ba6:	1ad4      	subs	r4, r2, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	db01      	blt.n	8009bb0 <_strtod_l+0x714>
 8009bac:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009bae:	195d      	adds	r5, r3, r5
 8009bb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bb4:	1a5b      	subs	r3, r3, r1
 8009bb6:	2136      	movs	r1, #54	@ 0x36
 8009bb8:	189b      	adds	r3, r3, r2
 8009bba:	1a8a      	subs	r2, r1, r2
 8009bbc:	497a      	ldr	r1, [pc, #488]	@ (8009da8 <_strtod_l+0x90c>)
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	468c      	mov	ip, r1
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	9116      	str	r1, [sp, #88]	@ 0x58
 8009bc8:	9014      	str	r0, [sp, #80]	@ 0x50
 8009bca:	4563      	cmp	r3, ip
 8009bcc:	da06      	bge.n	8009bdc <_strtod_l+0x740>
 8009bce:	4661      	mov	r1, ip
 8009bd0:	1ac9      	subs	r1, r1, r3
 8009bd2:	1a52      	subs	r2, r2, r1
 8009bd4:	291f      	cmp	r1, #31
 8009bd6:	dc3f      	bgt.n	8009c58 <_strtod_l+0x7bc>
 8009bd8:	4088      	lsls	r0, r1
 8009bda:	9014      	str	r0, [sp, #80]	@ 0x50
 8009bdc:	18ab      	adds	r3, r5, r2
 8009bde:	930e      	str	r3, [sp, #56]	@ 0x38
 8009be0:	18a4      	adds	r4, r4, r2
 8009be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009be6:	191c      	adds	r4, r3, r4
 8009be8:	002b      	movs	r3, r5
 8009bea:	4295      	cmp	r5, r2
 8009bec:	dd00      	ble.n	8009bf0 <_strtod_l+0x754>
 8009bee:	0013      	movs	r3, r2
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	dd00      	ble.n	8009bf6 <_strtod_l+0x75a>
 8009bf4:	0023      	movs	r3, r4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd04      	ble.n	8009c04 <_strtod_l+0x768>
 8009bfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bfc:	1ae4      	subs	r4, r4, r3
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c02:	1aed      	subs	r5, r5, r3
 8009c04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	dd16      	ble.n	8009c38 <_strtod_l+0x79c>
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	9907      	ldr	r1, [sp, #28]
 8009c0e:	9805      	ldr	r0, [sp, #20]
 8009c10:	f7ff f974 	bl	8008efc <__pow5mult>
 8009c14:	9007      	str	r0, [sp, #28]
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d0b3      	beq.n	8009b82 <_strtod_l+0x6e6>
 8009c1a:	0001      	movs	r1, r0
 8009c1c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009c1e:	9805      	ldr	r0, [sp, #20]
 8009c20:	f7ff f8ba 	bl	8008d98 <__multiply>
 8009c24:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d100      	bne.n	8009c2c <_strtod_l+0x790>
 8009c2a:	e671      	b.n	8009910 <_strtod_l+0x474>
 8009c2c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009c2e:	9805      	ldr	r0, [sp, #20]
 8009c30:	f7fe ff96 	bl	8008b60 <_Bfree>
 8009c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c36:	931e      	str	r3, [sp, #120]	@ 0x78
 8009c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dc12      	bgt.n	8009c64 <_strtod_l+0x7c8>
 8009c3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dd18      	ble.n	8009c76 <_strtod_l+0x7da>
 8009c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c46:	9908      	ldr	r1, [sp, #32]
 8009c48:	9805      	ldr	r0, [sp, #20]
 8009c4a:	f7ff f957 	bl	8008efc <__pow5mult>
 8009c4e:	9008      	str	r0, [sp, #32]
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d110      	bne.n	8009c76 <_strtod_l+0x7da>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e65a      	b.n	800990e <_strtod_l+0x472>
 8009c58:	4954      	ldr	r1, [pc, #336]	@ (8009dac <_strtod_l+0x910>)
 8009c5a:	1acb      	subs	r3, r1, r3
 8009c5c:	0001      	movs	r1, r0
 8009c5e:	4099      	lsls	r1, r3
 8009c60:	9116      	str	r1, [sp, #88]	@ 0x58
 8009c62:	e7ba      	b.n	8009bda <_strtod_l+0x73e>
 8009c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c66:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009c68:	9805      	ldr	r0, [sp, #20]
 8009c6a:	f7ff f9a3 	bl	8008fb4 <__lshift>
 8009c6e:	901e      	str	r0, [sp, #120]	@ 0x78
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d1e4      	bne.n	8009c3e <_strtod_l+0x7a2>
 8009c74:	e64c      	b.n	8009910 <_strtod_l+0x474>
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	dd07      	ble.n	8009c8a <_strtod_l+0x7ee>
 8009c7a:	0022      	movs	r2, r4
 8009c7c:	9908      	ldr	r1, [sp, #32]
 8009c7e:	9805      	ldr	r0, [sp, #20]
 8009c80:	f7ff f998 	bl	8008fb4 <__lshift>
 8009c84:	9008      	str	r0, [sp, #32]
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0e4      	beq.n	8009c54 <_strtod_l+0x7b8>
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	dd08      	ble.n	8009ca0 <_strtod_l+0x804>
 8009c8e:	002a      	movs	r2, r5
 8009c90:	9907      	ldr	r1, [sp, #28]
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	f7ff f98e 	bl	8008fb4 <__lshift>
 8009c98:	9007      	str	r0, [sp, #28]
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d100      	bne.n	8009ca0 <_strtod_l+0x804>
 8009c9e:	e637      	b.n	8009910 <_strtod_l+0x474>
 8009ca0:	9a08      	ldr	r2, [sp, #32]
 8009ca2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009ca4:	9805      	ldr	r0, [sp, #20]
 8009ca6:	f7ff fa0d 	bl	80090c4 <__mdiff>
 8009caa:	9006      	str	r0, [sp, #24]
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d100      	bne.n	8009cb2 <_strtod_l+0x816>
 8009cb0:	e62e      	b.n	8009910 <_strtod_l+0x474>
 8009cb2:	68c3      	ldr	r3, [r0, #12]
 8009cb4:	9907      	ldr	r1, [sp, #28]
 8009cb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60c3      	str	r3, [r0, #12]
 8009cbc:	f7ff f9e6 	bl	800908c <__mcmp>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	da3b      	bge.n	8009d3c <_strtod_l+0x8a0>
 8009cc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cc6:	4333      	orrs	r3, r6
 8009cc8:	d167      	bne.n	8009d9a <_strtod_l+0x8fe>
 8009cca:	033b      	lsls	r3, r7, #12
 8009ccc:	d165      	bne.n	8009d9a <_strtod_l+0x8fe>
 8009cce:	22d6      	movs	r2, #214	@ 0xd6
 8009cd0:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <_strtod_l+0x914>)
 8009cd2:	04d2      	lsls	r2, r2, #19
 8009cd4:	403b      	ands	r3, r7
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d95f      	bls.n	8009d9a <_strtod_l+0x8fe>
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d103      	bne.n	8009cea <_strtod_l+0x84e>
 8009ce2:	9b06      	ldr	r3, [sp, #24]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	dd57      	ble.n	8009d9a <_strtod_l+0x8fe>
 8009cea:	9906      	ldr	r1, [sp, #24]
 8009cec:	2201      	movs	r2, #1
 8009cee:	9805      	ldr	r0, [sp, #20]
 8009cf0:	f7ff f960 	bl	8008fb4 <__lshift>
 8009cf4:	9907      	ldr	r1, [sp, #28]
 8009cf6:	9006      	str	r0, [sp, #24]
 8009cf8:	f7ff f9c8 	bl	800908c <__mcmp>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	dd4c      	ble.n	8009d9a <_strtod_l+0x8fe>
 8009d00:	4b2b      	ldr	r3, [pc, #172]	@ (8009db0 <_strtod_l+0x914>)
 8009d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d04:	403b      	ands	r3, r7
 8009d06:	2a00      	cmp	r2, #0
 8009d08:	d074      	beq.n	8009df4 <_strtod_l+0x958>
 8009d0a:	22d6      	movs	r2, #214	@ 0xd6
 8009d0c:	04d2      	lsls	r2, r2, #19
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d870      	bhi.n	8009df4 <_strtod_l+0x958>
 8009d12:	22dc      	movs	r2, #220	@ 0xdc
 8009d14:	0492      	lsls	r2, r2, #18
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d800      	bhi.n	8009d1c <_strtod_l+0x880>
 8009d1a:	e695      	b.n	8009a48 <_strtod_l+0x5ac>
 8009d1c:	0030      	movs	r0, r6
 8009d1e:	0039      	movs	r1, r7
 8009d20:	4b24      	ldr	r3, [pc, #144]	@ (8009db4 <_strtod_l+0x918>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	f7f8 fa1a 	bl	800215c <__aeabi_dmul>
 8009d28:	4b21      	ldr	r3, [pc, #132]	@ (8009db0 <_strtod_l+0x914>)
 8009d2a:	0006      	movs	r6, r0
 8009d2c:	000f      	movs	r7, r1
 8009d2e:	420b      	tst	r3, r1
 8009d30:	d000      	beq.n	8009d34 <_strtod_l+0x898>
 8009d32:	e5f6      	b.n	8009922 <_strtod_l+0x486>
 8009d34:	2322      	movs	r3, #34	@ 0x22
 8009d36:	9a05      	ldr	r2, [sp, #20]
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e5f2      	b.n	8009922 <_strtod_l+0x486>
 8009d3c:	970e      	str	r7, [sp, #56]	@ 0x38
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d175      	bne.n	8009e2e <_strtod_l+0x992>
 8009d42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d44:	033b      	lsls	r3, r7, #12
 8009d46:	0b1b      	lsrs	r3, r3, #12
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	d039      	beq.n	8009dc0 <_strtod_l+0x924>
 8009d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009db8 <_strtod_l+0x91c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d138      	bne.n	8009dc4 <_strtod_l+0x928>
 8009d52:	2101      	movs	r1, #1
 8009d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d56:	4249      	negs	r1, r1
 8009d58:	0032      	movs	r2, r6
 8009d5a:	0008      	movs	r0, r1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <_strtod_l+0x8dc>
 8009d60:	24d4      	movs	r4, #212	@ 0xd4
 8009d62:	4b13      	ldr	r3, [pc, #76]	@ (8009db0 <_strtod_l+0x914>)
 8009d64:	0008      	movs	r0, r1
 8009d66:	403b      	ands	r3, r7
 8009d68:	04e4      	lsls	r4, r4, #19
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	d804      	bhi.n	8009d78 <_strtod_l+0x8dc>
 8009d6e:	306c      	adds	r0, #108	@ 0x6c
 8009d70:	0d1b      	lsrs	r3, r3, #20
 8009d72:	1ac3      	subs	r3, r0, r3
 8009d74:	4099      	lsls	r1, r3
 8009d76:	0008      	movs	r0, r1
 8009d78:	4282      	cmp	r2, r0
 8009d7a:	d123      	bne.n	8009dc4 <_strtod_l+0x928>
 8009d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009dbc <_strtod_l+0x920>)
 8009d7e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d80:	4299      	cmp	r1, r3
 8009d82:	d102      	bne.n	8009d8a <_strtod_l+0x8ee>
 8009d84:	3201      	adds	r2, #1
 8009d86:	d100      	bne.n	8009d8a <_strtod_l+0x8ee>
 8009d88:	e5c2      	b.n	8009910 <_strtod_l+0x474>
 8009d8a:	4b09      	ldr	r3, [pc, #36]	@ (8009db0 <_strtod_l+0x914>)
 8009d8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d8e:	2600      	movs	r6, #0
 8009d90:	401a      	ands	r2, r3
 8009d92:	0013      	movs	r3, r2
 8009d94:	2280      	movs	r2, #128	@ 0x80
 8009d96:	0352      	lsls	r2, r2, #13
 8009d98:	189f      	adds	r7, r3, r2
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1bd      	bne.n	8009d1c <_strtod_l+0x880>
 8009da0:	e5bf      	b.n	8009922 <_strtod_l+0x486>
 8009da2:	46c0      	nop			@ (mov r8, r8)
 8009da4:	0800ba78 	.word	0x0800ba78
 8009da8:	fffffc02 	.word	0xfffffc02
 8009dac:	fffffbe2 	.word	0xfffffbe2
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	39500000 	.word	0x39500000
 8009db8:	000fffff 	.word	0x000fffff
 8009dbc:	7fefffff 	.word	0x7fefffff
 8009dc0:	4333      	orrs	r3, r6
 8009dc2:	d09d      	beq.n	8009d00 <_strtod_l+0x864>
 8009dc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01c      	beq.n	8009e04 <_strtod_l+0x968>
 8009dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009dce:	4213      	tst	r3, r2
 8009dd0:	d0e3      	beq.n	8009d9a <_strtod_l+0x8fe>
 8009dd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dd4:	0030      	movs	r0, r6
 8009dd6:	0039      	movs	r1, r7
 8009dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d016      	beq.n	8009e0c <_strtod_l+0x970>
 8009dde:	f7ff fb45 	bl	800946c <sulp>
 8009de2:	0002      	movs	r2, r0
 8009de4:	000b      	movs	r3, r1
 8009de6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009de8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009dea:	f7f7 fa0f 	bl	800120c <__aeabi_dadd>
 8009dee:	0006      	movs	r6, r0
 8009df0:	000f      	movs	r7, r1
 8009df2:	e7d2      	b.n	8009d9a <_strtod_l+0x8fe>
 8009df4:	2601      	movs	r6, #1
 8009df6:	4a92      	ldr	r2, [pc, #584]	@ (800a040 <_strtod_l+0xba4>)
 8009df8:	4276      	negs	r6, r6
 8009dfa:	189b      	adds	r3, r3, r2
 8009dfc:	4a91      	ldr	r2, [pc, #580]	@ (800a044 <_strtod_l+0xba8>)
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	0017      	movs	r7, r2
 8009e02:	e7ca      	b.n	8009d9a <_strtod_l+0x8fe>
 8009e04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e06:	4233      	tst	r3, r6
 8009e08:	d0c7      	beq.n	8009d9a <_strtod_l+0x8fe>
 8009e0a:	e7e2      	b.n	8009dd2 <_strtod_l+0x936>
 8009e0c:	f7ff fb2e 	bl	800946c <sulp>
 8009e10:	0002      	movs	r2, r0
 8009e12:	000b      	movs	r3, r1
 8009e14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009e16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009e18:	f7f8 fc68 	bl	80026ec <__aeabi_dsub>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	0006      	movs	r6, r0
 8009e22:	000f      	movs	r7, r1
 8009e24:	f7f6 fb12 	bl	800044c <__aeabi_dcmpeq>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d0b6      	beq.n	8009d9a <_strtod_l+0x8fe>
 8009e2c:	e60c      	b.n	8009a48 <_strtod_l+0x5ac>
 8009e2e:	9907      	ldr	r1, [sp, #28]
 8009e30:	9806      	ldr	r0, [sp, #24]
 8009e32:	f7ff faad 	bl	8009390 <__ratio>
 8009e36:	2380      	movs	r3, #128	@ 0x80
 8009e38:	2200      	movs	r2, #0
 8009e3a:	05db      	lsls	r3, r3, #23
 8009e3c:	0004      	movs	r4, r0
 8009e3e:	000d      	movs	r5, r1
 8009e40:	f7f6 fb14 	bl	800046c <__aeabi_dcmple>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d06c      	beq.n	8009f22 <_strtod_l+0xa86>
 8009e48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d177      	bne.n	8009f3e <_strtod_l+0xaa2>
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	d157      	bne.n	8009f02 <_strtod_l+0xa66>
 8009e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e54:	031b      	lsls	r3, r3, #12
 8009e56:	d15a      	bne.n	8009f0e <_strtod_l+0xa72>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	0020      	movs	r0, r4
 8009e5c:	0029      	movs	r1, r5
 8009e5e:	4b7a      	ldr	r3, [pc, #488]	@ (800a048 <_strtod_l+0xbac>)
 8009e60:	f7f6 fafa 	bl	8000458 <__aeabi_dcmplt>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d159      	bne.n	8009f1c <_strtod_l+0xa80>
 8009e68:	0020      	movs	r0, r4
 8009e6a:	0029      	movs	r1, r5
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4b77      	ldr	r3, [pc, #476]	@ (800a04c <_strtod_l+0xbb0>)
 8009e70:	f7f8 f974 	bl	800215c <__aeabi_dmul>
 8009e74:	0004      	movs	r4, r0
 8009e76:	000d      	movs	r5, r1
 8009e78:	2380      	movs	r3, #128	@ 0x80
 8009e7a:	061b      	lsls	r3, r3, #24
 8009e7c:	18eb      	adds	r3, r5, r3
 8009e7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e86:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e88:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e8a:	4a71      	ldr	r2, [pc, #452]	@ (800a050 <_strtod_l+0xbb4>)
 8009e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8e:	4013      	ands	r3, r2
 8009e90:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e94:	4b6f      	ldr	r3, [pc, #444]	@ (800a054 <_strtod_l+0xbb8>)
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d000      	beq.n	8009e9c <_strtod_l+0xa00>
 8009e9a:	e087      	b.n	8009fac <_strtod_l+0xb10>
 8009e9c:	4a6e      	ldr	r2, [pc, #440]	@ (800a058 <_strtod_l+0xbbc>)
 8009e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea0:	4694      	mov	ip, r2
 8009ea2:	4463      	add	r3, ip
 8009ea4:	001f      	movs	r7, r3
 8009ea6:	0030      	movs	r0, r6
 8009ea8:	0019      	movs	r1, r3
 8009eaa:	f7ff f9a5 	bl	80091f8 <__ulp>
 8009eae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb2:	f7f8 f953 	bl	800215c <__aeabi_dmul>
 8009eb6:	0032      	movs	r2, r6
 8009eb8:	003b      	movs	r3, r7
 8009eba:	f7f7 f9a7 	bl	800120c <__aeabi_dadd>
 8009ebe:	4a64      	ldr	r2, [pc, #400]	@ (800a050 <_strtod_l+0xbb4>)
 8009ec0:	4b66      	ldr	r3, [pc, #408]	@ (800a05c <_strtod_l+0xbc0>)
 8009ec2:	0006      	movs	r6, r0
 8009ec4:	400a      	ands	r2, r1
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d940      	bls.n	8009f4c <_strtod_l+0xab0>
 8009eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ecc:	4a64      	ldr	r2, [pc, #400]	@ (800a060 <_strtod_l+0xbc4>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d103      	bne.n	8009eda <_strtod_l+0xa3e>
 8009ed2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	d100      	bne.n	8009eda <_strtod_l+0xa3e>
 8009ed8:	e51a      	b.n	8009910 <_strtod_l+0x474>
 8009eda:	2601      	movs	r6, #1
 8009edc:	4f60      	ldr	r7, [pc, #384]	@ (800a060 <_strtod_l+0xbc4>)
 8009ede:	4276      	negs	r6, r6
 8009ee0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009ee2:	9805      	ldr	r0, [sp, #20]
 8009ee4:	f7fe fe3c 	bl	8008b60 <_Bfree>
 8009ee8:	9908      	ldr	r1, [sp, #32]
 8009eea:	9805      	ldr	r0, [sp, #20]
 8009eec:	f7fe fe38 	bl	8008b60 <_Bfree>
 8009ef0:	9907      	ldr	r1, [sp, #28]
 8009ef2:	9805      	ldr	r0, [sp, #20]
 8009ef4:	f7fe fe34 	bl	8008b60 <_Bfree>
 8009ef8:	9906      	ldr	r1, [sp, #24]
 8009efa:	9805      	ldr	r0, [sp, #20]
 8009efc:	f7fe fe30 	bl	8008b60 <_Bfree>
 8009f00:	e617      	b.n	8009b32 <_strtod_l+0x696>
 8009f02:	2e01      	cmp	r6, #1
 8009f04:	d103      	bne.n	8009f0e <_strtod_l+0xa72>
 8009f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d100      	bne.n	8009f0e <_strtod_l+0xa72>
 8009f0c:	e59c      	b.n	8009a48 <_strtod_l+0x5ac>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4c54      	ldr	r4, [pc, #336]	@ (800a064 <_strtod_l+0xbc8>)
 8009f12:	4d4d      	ldr	r5, [pc, #308]	@ (800a048 <_strtod_l+0xbac>)
 8009f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f18:	2400      	movs	r4, #0
 8009f1a:	e7b2      	b.n	8009e82 <_strtod_l+0x9e6>
 8009f1c:	2400      	movs	r4, #0
 8009f1e:	4d4b      	ldr	r5, [pc, #300]	@ (800a04c <_strtod_l+0xbb0>)
 8009f20:	e7aa      	b.n	8009e78 <_strtod_l+0x9dc>
 8009f22:	0020      	movs	r0, r4
 8009f24:	0029      	movs	r1, r5
 8009f26:	4b49      	ldr	r3, [pc, #292]	@ (800a04c <_strtod_l+0xbb0>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f7f8 f917 	bl	800215c <__aeabi_dmul>
 8009f2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f30:	0004      	movs	r4, r0
 8009f32:	000d      	movs	r5, r1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d09f      	beq.n	8009e78 <_strtod_l+0x9dc>
 8009f38:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f3a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009f3c:	e7a1      	b.n	8009e82 <_strtod_l+0x9e6>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4c41      	ldr	r4, [pc, #260]	@ (800a048 <_strtod_l+0xbac>)
 8009f42:	0025      	movs	r5, r4
 8009f44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f48:	001c      	movs	r4, r3
 8009f4a:	e79a      	b.n	8009e82 <_strtod_l+0x9e6>
 8009f4c:	23d4      	movs	r3, #212	@ 0xd4
 8009f4e:	049b      	lsls	r3, r3, #18
 8009f50:	18cf      	adds	r7, r1, r3
 8009f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f54:	9710      	str	r7, [sp, #64]	@ 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1c2      	bne.n	8009ee0 <_strtod_l+0xa44>
 8009f5a:	4b3d      	ldr	r3, [pc, #244]	@ (800a050 <_strtod_l+0xbb4>)
 8009f5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f5e:	403b      	ands	r3, r7
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d1bd      	bne.n	8009ee0 <_strtod_l+0xa44>
 8009f64:	0020      	movs	r0, r4
 8009f66:	0029      	movs	r1, r5
 8009f68:	f7f6 fb44 	bl	80005f4 <__aeabi_d2lz>
 8009f6c:	f7f6 fb7c 	bl	8000668 <__aeabi_l2d>
 8009f70:	0002      	movs	r2, r0
 8009f72:	000b      	movs	r3, r1
 8009f74:	0020      	movs	r0, r4
 8009f76:	0029      	movs	r1, r5
 8009f78:	f7f8 fbb8 	bl	80026ec <__aeabi_dsub>
 8009f7c:	033c      	lsls	r4, r7, #12
 8009f7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f80:	0b24      	lsrs	r4, r4, #12
 8009f82:	4334      	orrs	r4, r6
 8009f84:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f86:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009f88:	4a37      	ldr	r2, [pc, #220]	@ (800a068 <_strtod_l+0xbcc>)
 8009f8a:	431c      	orrs	r4, r3
 8009f8c:	d052      	beq.n	800a034 <_strtod_l+0xb98>
 8009f8e:	4b37      	ldr	r3, [pc, #220]	@ (800a06c <_strtod_l+0xbd0>)
 8009f90:	f7f6 fa62 	bl	8000458 <__aeabi_dcmplt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d000      	beq.n	8009f9a <_strtod_l+0xafe>
 8009f98:	e4c3      	b.n	8009922 <_strtod_l+0x486>
 8009f9a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009f9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f9e:	4a34      	ldr	r2, [pc, #208]	@ (800a070 <_strtod_l+0xbd4>)
 8009fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800a04c <_strtod_l+0xbb0>)
 8009fa2:	f7f6 fa6d 	bl	8000480 <__aeabi_dcmpgt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d09a      	beq.n	8009ee0 <_strtod_l+0xa44>
 8009faa:	e4ba      	b.n	8009922 <_strtod_l+0x486>
 8009fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02a      	beq.n	800a008 <_strtod_l+0xb6c>
 8009fb2:	23d4      	movs	r3, #212	@ 0xd4
 8009fb4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009fb6:	04db      	lsls	r3, r3, #19
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d825      	bhi.n	800a008 <_strtod_l+0xb6c>
 8009fbc:	0020      	movs	r0, r4
 8009fbe:	0029      	movs	r1, r5
 8009fc0:	4a2c      	ldr	r2, [pc, #176]	@ (800a074 <_strtod_l+0xbd8>)
 8009fc2:	4b2d      	ldr	r3, [pc, #180]	@ (800a078 <_strtod_l+0xbdc>)
 8009fc4:	f7f6 fa52 	bl	800046c <__aeabi_dcmple>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d016      	beq.n	8009ffa <_strtod_l+0xb5e>
 8009fcc:	0020      	movs	r0, r4
 8009fce:	0029      	movs	r1, r5
 8009fd0:	f7f6 faf2 	bl	80005b8 <__aeabi_d2uiz>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d100      	bne.n	8009fda <_strtod_l+0xb3e>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f7f8 ffaf 	bl	8002f3c <__aeabi_ui2d>
 8009fde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fe0:	0004      	movs	r4, r0
 8009fe2:	000d      	movs	r5, r1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d122      	bne.n	800a02e <_strtod_l+0xb92>
 8009fe8:	2380      	movs	r3, #128	@ 0x80
 8009fea:	061b      	lsls	r3, r3, #24
 8009fec:	18cb      	adds	r3, r1, r3
 8009fee:	9018      	str	r0, [sp, #96]	@ 0x60
 8009ff0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ff2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff6:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ff8:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ffa:	22d6      	movs	r2, #214	@ 0xd6
 8009ffc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ffe:	04d2      	lsls	r2, r2, #19
 800a000:	189b      	adds	r3, r3, r2
 800a002:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	9315      	str	r3, [sp, #84]	@ 0x54
 800a008:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a00a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a00c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a00e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a010:	f7ff f8f2 	bl	80091f8 <__ulp>
 800a014:	0002      	movs	r2, r0
 800a016:	000b      	movs	r3, r1
 800a018:	0030      	movs	r0, r6
 800a01a:	0039      	movs	r1, r7
 800a01c:	f7f8 f89e 	bl	800215c <__aeabi_dmul>
 800a020:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a022:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a024:	f7f7 f8f2 	bl	800120c <__aeabi_dadd>
 800a028:	0006      	movs	r6, r0
 800a02a:	000f      	movs	r7, r1
 800a02c:	e791      	b.n	8009f52 <_strtod_l+0xab6>
 800a02e:	9418      	str	r4, [sp, #96]	@ 0x60
 800a030:	9519      	str	r5, [sp, #100]	@ 0x64
 800a032:	e7de      	b.n	8009ff2 <_strtod_l+0xb56>
 800a034:	4b11      	ldr	r3, [pc, #68]	@ (800a07c <_strtod_l+0xbe0>)
 800a036:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a038:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a03a:	f7f6 fa0d 	bl	8000458 <__aeabi_dcmplt>
 800a03e:	e7b2      	b.n	8009fa6 <_strtod_l+0xb0a>
 800a040:	fff00000 	.word	0xfff00000
 800a044:	000fffff 	.word	0x000fffff
 800a048:	3ff00000 	.word	0x3ff00000
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	7fe00000 	.word	0x7fe00000
 800a058:	fcb00000 	.word	0xfcb00000
 800a05c:	7c9fffff 	.word	0x7c9fffff
 800a060:	7fefffff 	.word	0x7fefffff
 800a064:	bff00000 	.word	0xbff00000
 800a068:	94a03595 	.word	0x94a03595
 800a06c:	3fdfffff 	.word	0x3fdfffff
 800a070:	35afe535 	.word	0x35afe535
 800a074:	ffc00000 	.word	0xffc00000
 800a078:	41dfffff 	.word	0x41dfffff
 800a07c:	3fcfffff 	.word	0x3fcfffff

0800a080 <_strtod_r>:
 800a080:	b510      	push	{r4, lr}
 800a082:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <_strtod_r+0xc>)
 800a084:	f7ff fa0a 	bl	800949c <_strtod_l>
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	46c0      	nop			@ (mov r8, r8)
 800a08c:	20000068 	.word	0x20000068

0800a090 <_strtol_l.constprop.0>:
 800a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a092:	b085      	sub	sp, #20
 800a094:	0017      	movs	r7, r2
 800a096:	001e      	movs	r6, r3
 800a098:	9003      	str	r0, [sp, #12]
 800a09a:	9101      	str	r1, [sp, #4]
 800a09c:	2b24      	cmp	r3, #36	@ 0x24
 800a09e:	d844      	bhi.n	800a12a <_strtol_l.constprop.0+0x9a>
 800a0a0:	000c      	movs	r4, r1
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d041      	beq.n	800a12a <_strtol_l.constprop.0+0x9a>
 800a0a6:	4b3d      	ldr	r3, [pc, #244]	@ (800a19c <_strtol_l.constprop.0+0x10c>)
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	469c      	mov	ip, r3
 800a0ac:	0023      	movs	r3, r4
 800a0ae:	4661      	mov	r1, ip
 800a0b0:	781d      	ldrb	r5, [r3, #0]
 800a0b2:	3401      	adds	r4, #1
 800a0b4:	5d48      	ldrb	r0, [r1, r5]
 800a0b6:	0001      	movs	r1, r0
 800a0b8:	4011      	ands	r1, r2
 800a0ba:	4210      	tst	r0, r2
 800a0bc:	d1f6      	bne.n	800a0ac <_strtol_l.constprop.0+0x1c>
 800a0be:	2d2d      	cmp	r5, #45	@ 0x2d
 800a0c0:	d13a      	bne.n	800a138 <_strtol_l.constprop.0+0xa8>
 800a0c2:	7825      	ldrb	r5, [r4, #0]
 800a0c4:	1c9c      	adds	r4, r3, #2
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	2210      	movs	r2, #16
 800a0cc:	0033      	movs	r3, r6
 800a0ce:	4393      	bics	r3, r2
 800a0d0:	d109      	bne.n	800a0e6 <_strtol_l.constprop.0+0x56>
 800a0d2:	2d30      	cmp	r5, #48	@ 0x30
 800a0d4:	d136      	bne.n	800a144 <_strtol_l.constprop.0+0xb4>
 800a0d6:	2120      	movs	r1, #32
 800a0d8:	7823      	ldrb	r3, [r4, #0]
 800a0da:	438b      	bics	r3, r1
 800a0dc:	2b58      	cmp	r3, #88	@ 0x58
 800a0de:	d131      	bne.n	800a144 <_strtol_l.constprop.0+0xb4>
 800a0e0:	0016      	movs	r6, r2
 800a0e2:	7865      	ldrb	r5, [r4, #1]
 800a0e4:	3402      	adds	r4, #2
 800a0e6:	4a2e      	ldr	r2, [pc, #184]	@ (800a1a0 <_strtol_l.constprop.0+0x110>)
 800a0e8:	9b00      	ldr	r3, [sp, #0]
 800a0ea:	4694      	mov	ip, r2
 800a0ec:	4463      	add	r3, ip
 800a0ee:	0031      	movs	r1, r6
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	9302      	str	r3, [sp, #8]
 800a0f4:	f7f6 f8aa 	bl	800024c <__aeabi_uidivmod>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4684      	mov	ip, r0
 800a0fc:	0010      	movs	r0, r2
 800a0fe:	002b      	movs	r3, r5
 800a100:	3b30      	subs	r3, #48	@ 0x30
 800a102:	2b09      	cmp	r3, #9
 800a104:	d825      	bhi.n	800a152 <_strtol_l.constprop.0+0xc2>
 800a106:	001d      	movs	r5, r3
 800a108:	42ae      	cmp	r6, r5
 800a10a:	dd31      	ble.n	800a170 <_strtol_l.constprop.0+0xe0>
 800a10c:	1c53      	adds	r3, r2, #1
 800a10e:	d009      	beq.n	800a124 <_strtol_l.constprop.0+0x94>
 800a110:	2201      	movs	r2, #1
 800a112:	4252      	negs	r2, r2
 800a114:	4584      	cmp	ip, r0
 800a116:	d305      	bcc.n	800a124 <_strtol_l.constprop.0+0x94>
 800a118:	d101      	bne.n	800a11e <_strtol_l.constprop.0+0x8e>
 800a11a:	42a9      	cmp	r1, r5
 800a11c:	db25      	blt.n	800a16a <_strtol_l.constprop.0+0xda>
 800a11e:	2201      	movs	r2, #1
 800a120:	4370      	muls	r0, r6
 800a122:	1828      	adds	r0, r5, r0
 800a124:	7825      	ldrb	r5, [r4, #0]
 800a126:	3401      	adds	r4, #1
 800a128:	e7e9      	b.n	800a0fe <_strtol_l.constprop.0+0x6e>
 800a12a:	f7fd fd11 	bl	8007b50 <__errno>
 800a12e:	2316      	movs	r3, #22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	2000      	movs	r0, #0
 800a134:	b005      	add	sp, #20
 800a136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a138:	9100      	str	r1, [sp, #0]
 800a13a:	2d2b      	cmp	r5, #43	@ 0x2b
 800a13c:	d1c5      	bne.n	800a0ca <_strtol_l.constprop.0+0x3a>
 800a13e:	7825      	ldrb	r5, [r4, #0]
 800a140:	1c9c      	adds	r4, r3, #2
 800a142:	e7c2      	b.n	800a0ca <_strtol_l.constprop.0+0x3a>
 800a144:	2e00      	cmp	r6, #0
 800a146:	d1ce      	bne.n	800a0e6 <_strtol_l.constprop.0+0x56>
 800a148:	3608      	adds	r6, #8
 800a14a:	2d30      	cmp	r5, #48	@ 0x30
 800a14c:	d0cb      	beq.n	800a0e6 <_strtol_l.constprop.0+0x56>
 800a14e:	3602      	adds	r6, #2
 800a150:	e7c9      	b.n	800a0e6 <_strtol_l.constprop.0+0x56>
 800a152:	002b      	movs	r3, r5
 800a154:	3b41      	subs	r3, #65	@ 0x41
 800a156:	2b19      	cmp	r3, #25
 800a158:	d801      	bhi.n	800a15e <_strtol_l.constprop.0+0xce>
 800a15a:	3d37      	subs	r5, #55	@ 0x37
 800a15c:	e7d4      	b.n	800a108 <_strtol_l.constprop.0+0x78>
 800a15e:	002b      	movs	r3, r5
 800a160:	3b61      	subs	r3, #97	@ 0x61
 800a162:	2b19      	cmp	r3, #25
 800a164:	d804      	bhi.n	800a170 <_strtol_l.constprop.0+0xe0>
 800a166:	3d57      	subs	r5, #87	@ 0x57
 800a168:	e7ce      	b.n	800a108 <_strtol_l.constprop.0+0x78>
 800a16a:	2201      	movs	r2, #1
 800a16c:	4252      	negs	r2, r2
 800a16e:	e7d9      	b.n	800a124 <_strtol_l.constprop.0+0x94>
 800a170:	1c53      	adds	r3, r2, #1
 800a172:	d108      	bne.n	800a186 <_strtol_l.constprop.0+0xf6>
 800a174:	2322      	movs	r3, #34	@ 0x22
 800a176:	9a03      	ldr	r2, [sp, #12]
 800a178:	9802      	ldr	r0, [sp, #8]
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	2f00      	cmp	r7, #0
 800a17e:	d0d9      	beq.n	800a134 <_strtol_l.constprop.0+0xa4>
 800a180:	1e63      	subs	r3, r4, #1
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	e007      	b.n	800a196 <_strtol_l.constprop.0+0x106>
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d000      	beq.n	800a18e <_strtol_l.constprop.0+0xfe>
 800a18c:	4240      	negs	r0, r0
 800a18e:	2f00      	cmp	r7, #0
 800a190:	d0d0      	beq.n	800a134 <_strtol_l.constprop.0+0xa4>
 800a192:	2a00      	cmp	r2, #0
 800a194:	d1f4      	bne.n	800a180 <_strtol_l.constprop.0+0xf0>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	e7cb      	b.n	800a134 <_strtol_l.constprop.0+0xa4>
 800a19c:	0800baa1 	.word	0x0800baa1
 800a1a0:	7fffffff 	.word	0x7fffffff

0800a1a4 <_strtol_r>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	f7ff ff73 	bl	800a090 <_strtol_l.constprop.0>
 800a1aa:	bd10      	pop	{r4, pc}

0800a1ac <__ssputs_r>:
 800a1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ae:	688e      	ldr	r6, [r1, #8]
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	001f      	movs	r7, r3
 800a1b4:	000c      	movs	r4, r1
 800a1b6:	680b      	ldr	r3, [r1, #0]
 800a1b8:	9002      	str	r0, [sp, #8]
 800a1ba:	9203      	str	r2, [sp, #12]
 800a1bc:	42be      	cmp	r6, r7
 800a1be:	d830      	bhi.n	800a222 <__ssputs_r+0x76>
 800a1c0:	210c      	movs	r1, #12
 800a1c2:	5e62      	ldrsh	r2, [r4, r1]
 800a1c4:	2190      	movs	r1, #144	@ 0x90
 800a1c6:	00c9      	lsls	r1, r1, #3
 800a1c8:	420a      	tst	r2, r1
 800a1ca:	d028      	beq.n	800a21e <__ssputs_r+0x72>
 800a1cc:	2003      	movs	r0, #3
 800a1ce:	6921      	ldr	r1, [r4, #16]
 800a1d0:	1a5b      	subs	r3, r3, r1
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	6963      	ldr	r3, [r4, #20]
 800a1d6:	4343      	muls	r3, r0
 800a1d8:	9801      	ldr	r0, [sp, #4]
 800a1da:	0fdd      	lsrs	r5, r3, #31
 800a1dc:	18ed      	adds	r5, r5, r3
 800a1de:	1c7b      	adds	r3, r7, #1
 800a1e0:	181b      	adds	r3, r3, r0
 800a1e2:	106d      	asrs	r5, r5, #1
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	d900      	bls.n	800a1ea <__ssputs_r+0x3e>
 800a1e8:	001d      	movs	r5, r3
 800a1ea:	0552      	lsls	r2, r2, #21
 800a1ec:	d528      	bpl.n	800a240 <__ssputs_r+0x94>
 800a1ee:	0029      	movs	r1, r5
 800a1f0:	9802      	ldr	r0, [sp, #8]
 800a1f2:	f7fe fbe1 	bl	80089b8 <_malloc_r>
 800a1f6:	1e06      	subs	r6, r0, #0
 800a1f8:	d02c      	beq.n	800a254 <__ssputs_r+0xa8>
 800a1fa:	9a01      	ldr	r2, [sp, #4]
 800a1fc:	6921      	ldr	r1, [r4, #16]
 800a1fe:	f000 fa1b 	bl	800a638 <memcpy>
 800a202:	89a2      	ldrh	r2, [r4, #12]
 800a204:	4b18      	ldr	r3, [pc, #96]	@ (800a268 <__ssputs_r+0xbc>)
 800a206:	401a      	ands	r2, r3
 800a208:	2380      	movs	r3, #128	@ 0x80
 800a20a:	4313      	orrs	r3, r2
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	6126      	str	r6, [r4, #16]
 800a212:	18f6      	adds	r6, r6, r3
 800a214:	6026      	str	r6, [r4, #0]
 800a216:	003e      	movs	r6, r7
 800a218:	6165      	str	r5, [r4, #20]
 800a21a:	1aed      	subs	r5, r5, r3
 800a21c:	60a5      	str	r5, [r4, #8]
 800a21e:	42be      	cmp	r6, r7
 800a220:	d900      	bls.n	800a224 <__ssputs_r+0x78>
 800a222:	003e      	movs	r6, r7
 800a224:	0032      	movs	r2, r6
 800a226:	9903      	ldr	r1, [sp, #12]
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	f000 f9ce 	bl	800a5ca <memmove>
 800a22e:	2000      	movs	r0, #0
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	1b9b      	subs	r3, r3, r6
 800a234:	60a3      	str	r3, [r4, #8]
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	199b      	adds	r3, r3, r6
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	b005      	add	sp, #20
 800a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a240:	002a      	movs	r2, r5
 800a242:	9802      	ldr	r0, [sp, #8]
 800a244:	f000 fdc0 	bl	800adc8 <_realloc_r>
 800a248:	1e06      	subs	r6, r0, #0
 800a24a:	d1e0      	bne.n	800a20e <__ssputs_r+0x62>
 800a24c:	6921      	ldr	r1, [r4, #16]
 800a24e:	9802      	ldr	r0, [sp, #8]
 800a250:	f7fe fb3c 	bl	80088cc <_free_r>
 800a254:	230c      	movs	r3, #12
 800a256:	2001      	movs	r0, #1
 800a258:	9a02      	ldr	r2, [sp, #8]
 800a25a:	4240      	negs	r0, r0
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	89a2      	ldrh	r2, [r4, #12]
 800a260:	3334      	adds	r3, #52	@ 0x34
 800a262:	4313      	orrs	r3, r2
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	e7e9      	b.n	800a23c <__ssputs_r+0x90>
 800a268:	fffffb7f 	.word	0xfffffb7f

0800a26c <_svfiprintf_r>:
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	b0a1      	sub	sp, #132	@ 0x84
 800a270:	9003      	str	r0, [sp, #12]
 800a272:	001d      	movs	r5, r3
 800a274:	898b      	ldrh	r3, [r1, #12]
 800a276:	000f      	movs	r7, r1
 800a278:	0016      	movs	r6, r2
 800a27a:	061b      	lsls	r3, r3, #24
 800a27c:	d511      	bpl.n	800a2a2 <_svfiprintf_r+0x36>
 800a27e:	690b      	ldr	r3, [r1, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10e      	bne.n	800a2a2 <_svfiprintf_r+0x36>
 800a284:	2140      	movs	r1, #64	@ 0x40
 800a286:	f7fe fb97 	bl	80089b8 <_malloc_r>
 800a28a:	6038      	str	r0, [r7, #0]
 800a28c:	6138      	str	r0, [r7, #16]
 800a28e:	2800      	cmp	r0, #0
 800a290:	d105      	bne.n	800a29e <_svfiprintf_r+0x32>
 800a292:	230c      	movs	r3, #12
 800a294:	9a03      	ldr	r2, [sp, #12]
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	2001      	movs	r0, #1
 800a29a:	4240      	negs	r0, r0
 800a29c:	e0cf      	b.n	800a43e <_svfiprintf_r+0x1d2>
 800a29e:	2340      	movs	r3, #64	@ 0x40
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	ac08      	add	r4, sp, #32
 800a2a6:	6163      	str	r3, [r4, #20]
 800a2a8:	3320      	adds	r3, #32
 800a2aa:	7663      	strb	r3, [r4, #25]
 800a2ac:	3310      	adds	r3, #16
 800a2ae:	76a3      	strb	r3, [r4, #26]
 800a2b0:	9507      	str	r5, [sp, #28]
 800a2b2:	0035      	movs	r5, r6
 800a2b4:	782b      	ldrb	r3, [r5, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <_svfiprintf_r+0x52>
 800a2ba:	2b25      	cmp	r3, #37	@ 0x25
 800a2bc:	d148      	bne.n	800a350 <_svfiprintf_r+0xe4>
 800a2be:	1bab      	subs	r3, r5, r6
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	42b5      	cmp	r5, r6
 800a2c4:	d00b      	beq.n	800a2de <_svfiprintf_r+0x72>
 800a2c6:	0032      	movs	r2, r6
 800a2c8:	0039      	movs	r1, r7
 800a2ca:	9803      	ldr	r0, [sp, #12]
 800a2cc:	f7ff ff6e 	bl	800a1ac <__ssputs_r>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d100      	bne.n	800a2d6 <_svfiprintf_r+0x6a>
 800a2d4:	e0ae      	b.n	800a434 <_svfiprintf_r+0x1c8>
 800a2d6:	6963      	ldr	r3, [r4, #20]
 800a2d8:	9a05      	ldr	r2, [sp, #20]
 800a2da:	189b      	adds	r3, r3, r2
 800a2dc:	6163      	str	r3, [r4, #20]
 800a2de:	782b      	ldrb	r3, [r5, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d100      	bne.n	800a2e6 <_svfiprintf_r+0x7a>
 800a2e4:	e0a6      	b.n	800a434 <_svfiprintf_r+0x1c8>
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4252      	negs	r2, r2
 800a2ec:	6062      	str	r2, [r4, #4]
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	3254      	adds	r2, #84	@ 0x54
 800a2f2:	1852      	adds	r2, r2, r1
 800a2f4:	1c6e      	adds	r6, r5, #1
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	60e3      	str	r3, [r4, #12]
 800a2fa:	60a3      	str	r3, [r4, #8]
 800a2fc:	7013      	strb	r3, [r2, #0]
 800a2fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a300:	4b54      	ldr	r3, [pc, #336]	@ (800a454 <_svfiprintf_r+0x1e8>)
 800a302:	2205      	movs	r2, #5
 800a304:	0018      	movs	r0, r3
 800a306:	7831      	ldrb	r1, [r6, #0]
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	f7fd fc4e 	bl	8007baa <memchr>
 800a30e:	1c75      	adds	r5, r6, #1
 800a310:	2800      	cmp	r0, #0
 800a312:	d11f      	bne.n	800a354 <_svfiprintf_r+0xe8>
 800a314:	6822      	ldr	r2, [r4, #0]
 800a316:	06d3      	lsls	r3, r2, #27
 800a318:	d504      	bpl.n	800a324 <_svfiprintf_r+0xb8>
 800a31a:	2353      	movs	r3, #83	@ 0x53
 800a31c:	a904      	add	r1, sp, #16
 800a31e:	185b      	adds	r3, r3, r1
 800a320:	2120      	movs	r1, #32
 800a322:	7019      	strb	r1, [r3, #0]
 800a324:	0713      	lsls	r3, r2, #28
 800a326:	d504      	bpl.n	800a332 <_svfiprintf_r+0xc6>
 800a328:	2353      	movs	r3, #83	@ 0x53
 800a32a:	a904      	add	r1, sp, #16
 800a32c:	185b      	adds	r3, r3, r1
 800a32e:	212b      	movs	r1, #43	@ 0x2b
 800a330:	7019      	strb	r1, [r3, #0]
 800a332:	7833      	ldrb	r3, [r6, #0]
 800a334:	2b2a      	cmp	r3, #42	@ 0x2a
 800a336:	d016      	beq.n	800a366 <_svfiprintf_r+0xfa>
 800a338:	0035      	movs	r5, r6
 800a33a:	2100      	movs	r1, #0
 800a33c:	200a      	movs	r0, #10
 800a33e:	68e3      	ldr	r3, [r4, #12]
 800a340:	782a      	ldrb	r2, [r5, #0]
 800a342:	1c6e      	adds	r6, r5, #1
 800a344:	3a30      	subs	r2, #48	@ 0x30
 800a346:	2a09      	cmp	r2, #9
 800a348:	d950      	bls.n	800a3ec <_svfiprintf_r+0x180>
 800a34a:	2900      	cmp	r1, #0
 800a34c:	d111      	bne.n	800a372 <_svfiprintf_r+0x106>
 800a34e:	e017      	b.n	800a380 <_svfiprintf_r+0x114>
 800a350:	3501      	adds	r5, #1
 800a352:	e7af      	b.n	800a2b4 <_svfiprintf_r+0x48>
 800a354:	9b05      	ldr	r3, [sp, #20]
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	1ac0      	subs	r0, r0, r3
 800a35a:	2301      	movs	r3, #1
 800a35c:	4083      	lsls	r3, r0
 800a35e:	4313      	orrs	r3, r2
 800a360:	002e      	movs	r6, r5
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	e7cc      	b.n	800a300 <_svfiprintf_r+0x94>
 800a366:	9b07      	ldr	r3, [sp, #28]
 800a368:	1d19      	adds	r1, r3, #4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	9107      	str	r1, [sp, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	db01      	blt.n	800a376 <_svfiprintf_r+0x10a>
 800a372:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a374:	e004      	b.n	800a380 <_svfiprintf_r+0x114>
 800a376:	425b      	negs	r3, r3
 800a378:	60e3      	str	r3, [r4, #12]
 800a37a:	2302      	movs	r3, #2
 800a37c:	4313      	orrs	r3, r2
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	782b      	ldrb	r3, [r5, #0]
 800a382:	2b2e      	cmp	r3, #46	@ 0x2e
 800a384:	d10c      	bne.n	800a3a0 <_svfiprintf_r+0x134>
 800a386:	786b      	ldrb	r3, [r5, #1]
 800a388:	2b2a      	cmp	r3, #42	@ 0x2a
 800a38a:	d134      	bne.n	800a3f6 <_svfiprintf_r+0x18a>
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	3502      	adds	r5, #2
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	9207      	str	r2, [sp, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da01      	bge.n	800a39e <_svfiprintf_r+0x132>
 800a39a:	2301      	movs	r3, #1
 800a39c:	425b      	negs	r3, r3
 800a39e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a0:	4e2d      	ldr	r6, [pc, #180]	@ (800a458 <_svfiprintf_r+0x1ec>)
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	0030      	movs	r0, r6
 800a3a6:	7829      	ldrb	r1, [r5, #0]
 800a3a8:	f7fd fbff 	bl	8007baa <memchr>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d006      	beq.n	800a3be <_svfiprintf_r+0x152>
 800a3b0:	2340      	movs	r3, #64	@ 0x40
 800a3b2:	1b80      	subs	r0, r0, r6
 800a3b4:	4083      	lsls	r3, r0
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	7829      	ldrb	r1, [r5, #0]
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	4826      	ldr	r0, [pc, #152]	@ (800a45c <_svfiprintf_r+0x1f0>)
 800a3c4:	1c6e      	adds	r6, r5, #1
 800a3c6:	7621      	strb	r1, [r4, #24]
 800a3c8:	f7fd fbef 	bl	8007baa <memchr>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d038      	beq.n	800a442 <_svfiprintf_r+0x1d6>
 800a3d0:	4b23      	ldr	r3, [pc, #140]	@ (800a460 <_svfiprintf_r+0x1f4>)
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d122      	bne.n	800a41c <_svfiprintf_r+0x1b0>
 800a3d6:	2207      	movs	r2, #7
 800a3d8:	9b07      	ldr	r3, [sp, #28]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	4393      	bics	r3, r2
 800a3de:	3308      	adds	r3, #8
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	6963      	ldr	r3, [r4, #20]
 800a3e4:	9a04      	ldr	r2, [sp, #16]
 800a3e6:	189b      	adds	r3, r3, r2
 800a3e8:	6163      	str	r3, [r4, #20]
 800a3ea:	e762      	b.n	800a2b2 <_svfiprintf_r+0x46>
 800a3ec:	4343      	muls	r3, r0
 800a3ee:	0035      	movs	r5, r6
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	189b      	adds	r3, r3, r2
 800a3f4:	e7a4      	b.n	800a340 <_svfiprintf_r+0xd4>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	200a      	movs	r0, #10
 800a3fa:	0019      	movs	r1, r3
 800a3fc:	3501      	adds	r5, #1
 800a3fe:	6063      	str	r3, [r4, #4]
 800a400:	782a      	ldrb	r2, [r5, #0]
 800a402:	1c6e      	adds	r6, r5, #1
 800a404:	3a30      	subs	r2, #48	@ 0x30
 800a406:	2a09      	cmp	r2, #9
 800a408:	d903      	bls.n	800a412 <_svfiprintf_r+0x1a6>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0c8      	beq.n	800a3a0 <_svfiprintf_r+0x134>
 800a40e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a410:	e7c6      	b.n	800a3a0 <_svfiprintf_r+0x134>
 800a412:	4341      	muls	r1, r0
 800a414:	0035      	movs	r5, r6
 800a416:	2301      	movs	r3, #1
 800a418:	1889      	adds	r1, r1, r2
 800a41a:	e7f1      	b.n	800a400 <_svfiprintf_r+0x194>
 800a41c:	aa07      	add	r2, sp, #28
 800a41e:	9200      	str	r2, [sp, #0]
 800a420:	0021      	movs	r1, r4
 800a422:	003a      	movs	r2, r7
 800a424:	4b0f      	ldr	r3, [pc, #60]	@ (800a464 <_svfiprintf_r+0x1f8>)
 800a426:	9803      	ldr	r0, [sp, #12]
 800a428:	f7fc fc3e 	bl	8006ca8 <_printf_float>
 800a42c:	9004      	str	r0, [sp, #16]
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	3301      	adds	r3, #1
 800a432:	d1d6      	bne.n	800a3e2 <_svfiprintf_r+0x176>
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a438:	065b      	lsls	r3, r3, #25
 800a43a:	d500      	bpl.n	800a43e <_svfiprintf_r+0x1d2>
 800a43c:	e72c      	b.n	800a298 <_svfiprintf_r+0x2c>
 800a43e:	b021      	add	sp, #132	@ 0x84
 800a440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a442:	aa07      	add	r2, sp, #28
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	0021      	movs	r1, r4
 800a448:	003a      	movs	r2, r7
 800a44a:	4b06      	ldr	r3, [pc, #24]	@ (800a464 <_svfiprintf_r+0x1f8>)
 800a44c:	9803      	ldr	r0, [sp, #12]
 800a44e:	f7fc fed9 	bl	8007204 <_printf_i>
 800a452:	e7eb      	b.n	800a42c <_svfiprintf_r+0x1c0>
 800a454:	0800bba1 	.word	0x0800bba1
 800a458:	0800bba7 	.word	0x0800bba7
 800a45c:	0800bbab 	.word	0x0800bbab
 800a460:	08006ca9 	.word	0x08006ca9
 800a464:	0800a1ad 	.word	0x0800a1ad

0800a468 <__sflush_r>:
 800a468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a46a:	220c      	movs	r2, #12
 800a46c:	5e8b      	ldrsh	r3, [r1, r2]
 800a46e:	0005      	movs	r5, r0
 800a470:	000c      	movs	r4, r1
 800a472:	071a      	lsls	r2, r3, #28
 800a474:	d456      	bmi.n	800a524 <__sflush_r+0xbc>
 800a476:	684a      	ldr	r2, [r1, #4]
 800a478:	2a00      	cmp	r2, #0
 800a47a:	dc02      	bgt.n	800a482 <__sflush_r+0x1a>
 800a47c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a47e:	2a00      	cmp	r2, #0
 800a480:	dd4e      	ble.n	800a520 <__sflush_r+0xb8>
 800a482:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a484:	2f00      	cmp	r7, #0
 800a486:	d04b      	beq.n	800a520 <__sflush_r+0xb8>
 800a488:	2200      	movs	r2, #0
 800a48a:	2080      	movs	r0, #128	@ 0x80
 800a48c:	682e      	ldr	r6, [r5, #0]
 800a48e:	602a      	str	r2, [r5, #0]
 800a490:	001a      	movs	r2, r3
 800a492:	0140      	lsls	r0, r0, #5
 800a494:	6a21      	ldr	r1, [r4, #32]
 800a496:	4002      	ands	r2, r0
 800a498:	4203      	tst	r3, r0
 800a49a:	d033      	beq.n	800a504 <__sflush_r+0x9c>
 800a49c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	075b      	lsls	r3, r3, #29
 800a4a2:	d506      	bpl.n	800a4b2 <__sflush_r+0x4a>
 800a4a4:	6863      	ldr	r3, [r4, #4]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <__sflush_r+0x4a>
 800a4ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4b0:	1ad2      	subs	r2, r2, r3
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	0028      	movs	r0, r5
 800a4b6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a4b8:	6a21      	ldr	r1, [r4, #32]
 800a4ba:	47b8      	blx	r7
 800a4bc:	89a2      	ldrh	r2, [r4, #12]
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	d106      	bne.n	800a4d0 <__sflush_r+0x68>
 800a4c2:	6829      	ldr	r1, [r5, #0]
 800a4c4:	291d      	cmp	r1, #29
 800a4c6:	d846      	bhi.n	800a556 <__sflush_r+0xee>
 800a4c8:	4b29      	ldr	r3, [pc, #164]	@ (800a570 <__sflush_r+0x108>)
 800a4ca:	410b      	asrs	r3, r1
 800a4cc:	07db      	lsls	r3, r3, #31
 800a4ce:	d442      	bmi.n	800a556 <__sflush_r+0xee>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6063      	str	r3, [r4, #4]
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	04d2      	lsls	r2, r2, #19
 800a4da:	d505      	bpl.n	800a4e8 <__sflush_r+0x80>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <__sflush_r+0x7e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d100      	bne.n	800a4e8 <__sflush_r+0x80>
 800a4e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ea:	602e      	str	r6, [r5, #0]
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d017      	beq.n	800a520 <__sflush_r+0xb8>
 800a4f0:	0023      	movs	r3, r4
 800a4f2:	3344      	adds	r3, #68	@ 0x44
 800a4f4:	4299      	cmp	r1, r3
 800a4f6:	d002      	beq.n	800a4fe <__sflush_r+0x96>
 800a4f8:	0028      	movs	r0, r5
 800a4fa:	f7fe f9e7 	bl	80088cc <_free_r>
 800a4fe:	2300      	movs	r3, #0
 800a500:	6363      	str	r3, [r4, #52]	@ 0x34
 800a502:	e00d      	b.n	800a520 <__sflush_r+0xb8>
 800a504:	2301      	movs	r3, #1
 800a506:	0028      	movs	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	0002      	movs	r2, r0
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d1c6      	bne.n	800a49e <__sflush_r+0x36>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0c3      	beq.n	800a49e <__sflush_r+0x36>
 800a516:	2b1d      	cmp	r3, #29
 800a518:	d001      	beq.n	800a51e <__sflush_r+0xb6>
 800a51a:	2b16      	cmp	r3, #22
 800a51c:	d11a      	bne.n	800a554 <__sflush_r+0xec>
 800a51e:	602e      	str	r6, [r5, #0]
 800a520:	2000      	movs	r0, #0
 800a522:	e01e      	b.n	800a562 <__sflush_r+0xfa>
 800a524:	690e      	ldr	r6, [r1, #16]
 800a526:	2e00      	cmp	r6, #0
 800a528:	d0fa      	beq.n	800a520 <__sflush_r+0xb8>
 800a52a:	680f      	ldr	r7, [r1, #0]
 800a52c:	600e      	str	r6, [r1, #0]
 800a52e:	1bba      	subs	r2, r7, r6
 800a530:	9201      	str	r2, [sp, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	079b      	lsls	r3, r3, #30
 800a536:	d100      	bne.n	800a53a <__sflush_r+0xd2>
 800a538:	694a      	ldr	r2, [r1, #20]
 800a53a:	60a2      	str	r2, [r4, #8]
 800a53c:	9b01      	ldr	r3, [sp, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	ddee      	ble.n	800a520 <__sflush_r+0xb8>
 800a542:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a544:	0032      	movs	r2, r6
 800a546:	001f      	movs	r7, r3
 800a548:	0028      	movs	r0, r5
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	6a21      	ldr	r1, [r4, #32]
 800a54e:	47b8      	blx	r7
 800a550:	2800      	cmp	r0, #0
 800a552:	dc07      	bgt.n	800a564 <__sflush_r+0xfc>
 800a554:	89a2      	ldrh	r2, [r4, #12]
 800a556:	2340      	movs	r3, #64	@ 0x40
 800a558:	2001      	movs	r0, #1
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	4240      	negs	r0, r0
 800a562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	1836      	adds	r6, r6, r0
 800a568:	1a1b      	subs	r3, r3, r0
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	e7e6      	b.n	800a53c <__sflush_r+0xd4>
 800a56e:	46c0      	nop			@ (mov r8, r8)
 800a570:	dfbffffe 	.word	0xdfbffffe

0800a574 <_fflush_r>:
 800a574:	690b      	ldr	r3, [r1, #16]
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	0005      	movs	r5, r0
 800a57a:	000c      	movs	r4, r1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <_fflush_r+0x12>
 800a580:	2500      	movs	r5, #0
 800a582:	0028      	movs	r0, r5
 800a584:	bd70      	pop	{r4, r5, r6, pc}
 800a586:	2800      	cmp	r0, #0
 800a588:	d004      	beq.n	800a594 <_fflush_r+0x20>
 800a58a:	6a03      	ldr	r3, [r0, #32]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <_fflush_r+0x20>
 800a590:	f7fd f9e4 	bl	800795c <__sinit>
 800a594:	220c      	movs	r2, #12
 800a596:	5ea3      	ldrsh	r3, [r4, r2]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0f1      	beq.n	800a580 <_fflush_r+0xc>
 800a59c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a59e:	07d2      	lsls	r2, r2, #31
 800a5a0:	d404      	bmi.n	800a5ac <_fflush_r+0x38>
 800a5a2:	059b      	lsls	r3, r3, #22
 800a5a4:	d402      	bmi.n	800a5ac <_fflush_r+0x38>
 800a5a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5a8:	f7fd fafd 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 800a5ac:	0028      	movs	r0, r5
 800a5ae:	0021      	movs	r1, r4
 800a5b0:	f7ff ff5a 	bl	800a468 <__sflush_r>
 800a5b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5b6:	0005      	movs	r5, r0
 800a5b8:	07db      	lsls	r3, r3, #31
 800a5ba:	d4e2      	bmi.n	800a582 <_fflush_r+0xe>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	059b      	lsls	r3, r3, #22
 800a5c0:	d4df      	bmi.n	800a582 <_fflush_r+0xe>
 800a5c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5c4:	f7fd faf0 	bl	8007ba8 <__retarget_lock_release_recursive>
 800a5c8:	e7db      	b.n	800a582 <_fflush_r+0xe>

0800a5ca <memmove>:
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	4288      	cmp	r0, r1
 800a5ce:	d806      	bhi.n	800a5de <memmove+0x14>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d008      	beq.n	800a5e8 <memmove+0x1e>
 800a5d6:	5ccc      	ldrb	r4, [r1, r3]
 800a5d8:	54c4      	strb	r4, [r0, r3]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	e7f9      	b.n	800a5d2 <memmove+0x8>
 800a5de:	188b      	adds	r3, r1, r2
 800a5e0:	4298      	cmp	r0, r3
 800a5e2:	d2f5      	bcs.n	800a5d0 <memmove+0x6>
 800a5e4:	3a01      	subs	r2, #1
 800a5e6:	d200      	bcs.n	800a5ea <memmove+0x20>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	5c8b      	ldrb	r3, [r1, r2]
 800a5ec:	5483      	strb	r3, [r0, r2]
 800a5ee:	e7f9      	b.n	800a5e4 <memmove+0x1a>

0800a5f0 <strncmp>:
 800a5f0:	b530      	push	{r4, r5, lr}
 800a5f2:	0005      	movs	r5, r0
 800a5f4:	1e10      	subs	r0, r2, #0
 800a5f6:	d00b      	beq.n	800a610 <strncmp+0x20>
 800a5f8:	2400      	movs	r4, #0
 800a5fa:	3a01      	subs	r2, #1
 800a5fc:	5d2b      	ldrb	r3, [r5, r4]
 800a5fe:	5d08      	ldrb	r0, [r1, r4]
 800a600:	4283      	cmp	r3, r0
 800a602:	d104      	bne.n	800a60e <strncmp+0x1e>
 800a604:	42a2      	cmp	r2, r4
 800a606:	d002      	beq.n	800a60e <strncmp+0x1e>
 800a608:	3401      	adds	r4, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f6      	bne.n	800a5fc <strncmp+0xc>
 800a60e:	1a18      	subs	r0, r3, r0
 800a610:	bd30      	pop	{r4, r5, pc}
	...

0800a614 <_sbrk_r>:
 800a614:	2300      	movs	r3, #0
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_sbrk_r+0x20>)
 800a61a:	0004      	movs	r4, r0
 800a61c:	0008      	movs	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f9 fcc6 	bl	8003fb0 <_sbrk>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d103      	bne.n	800a630 <_sbrk_r+0x1c>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d000      	beq.n	800a630 <_sbrk_r+0x1c>
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	2000042c 	.word	0x2000042c

0800a638 <memcpy>:
 800a638:	2300      	movs	r3, #0
 800a63a:	b510      	push	{r4, lr}
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d100      	bne.n	800a642 <memcpy+0xa>
 800a640:	bd10      	pop	{r4, pc}
 800a642:	5ccc      	ldrb	r4, [r1, r3]
 800a644:	54c4      	strb	r4, [r0, r3]
 800a646:	3301      	adds	r3, #1
 800a648:	e7f8      	b.n	800a63c <memcpy+0x4>
	...

0800a64c <nan>:
 800a64c:	2000      	movs	r0, #0
 800a64e:	4901      	ldr	r1, [pc, #4]	@ (800a654 <nan+0x8>)
 800a650:	4770      	bx	lr
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	7ff80000 	.word	0x7ff80000

0800a658 <__assert_func>:
 800a658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a65a:	0014      	movs	r4, r2
 800a65c:	001a      	movs	r2, r3
 800a65e:	4b09      	ldr	r3, [pc, #36]	@ (800a684 <__assert_func+0x2c>)
 800a660:	0005      	movs	r5, r0
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	000e      	movs	r6, r1
 800a666:	68d8      	ldr	r0, [r3, #12]
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <__assert_func+0x30>)
 800a66a:	2c00      	cmp	r4, #0
 800a66c:	d101      	bne.n	800a672 <__assert_func+0x1a>
 800a66e:	4b07      	ldr	r3, [pc, #28]	@ (800a68c <__assert_func+0x34>)
 800a670:	001c      	movs	r4, r3
 800a672:	4907      	ldr	r1, [pc, #28]	@ (800a690 <__assert_func+0x38>)
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	9402      	str	r4, [sp, #8]
 800a678:	002b      	movs	r3, r5
 800a67a:	9600      	str	r6, [sp, #0]
 800a67c:	f000 fbe0 	bl	800ae40 <fiprintf>
 800a680:	f000 fbee 	bl	800ae60 <abort>
 800a684:	20000018 	.word	0x20000018
 800a688:	0800bbba 	.word	0x0800bbba
 800a68c:	0800bbf5 	.word	0x0800bbf5
 800a690:	0800bbc7 	.word	0x0800bbc7

0800a694 <_calloc_r>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	0c0b      	lsrs	r3, r1, #16
 800a698:	0c15      	lsrs	r5, r2, #16
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d11e      	bne.n	800a6dc <_calloc_r+0x48>
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	d10c      	bne.n	800a6bc <_calloc_r+0x28>
 800a6a2:	b289      	uxth	r1, r1
 800a6a4:	b294      	uxth	r4, r2
 800a6a6:	434c      	muls	r4, r1
 800a6a8:	0021      	movs	r1, r4
 800a6aa:	f7fe f985 	bl	80089b8 <_malloc_r>
 800a6ae:	1e05      	subs	r5, r0, #0
 800a6b0:	d01a      	beq.n	800a6e8 <_calloc_r+0x54>
 800a6b2:	0022      	movs	r2, r4
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	f7fd f9f1 	bl	8007a9c <memset>
 800a6ba:	e016      	b.n	800a6ea <_calloc_r+0x56>
 800a6bc:	1c2b      	adds	r3, r5, #0
 800a6be:	1c0c      	adds	r4, r1, #0
 800a6c0:	b289      	uxth	r1, r1
 800a6c2:	b292      	uxth	r2, r2
 800a6c4:	434a      	muls	r2, r1
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	b2a1      	uxth	r1, r4
 800a6ca:	4359      	muls	r1, r3
 800a6cc:	0c14      	lsrs	r4, r2, #16
 800a6ce:	190c      	adds	r4, r1, r4
 800a6d0:	0c23      	lsrs	r3, r4, #16
 800a6d2:	d107      	bne.n	800a6e4 <_calloc_r+0x50>
 800a6d4:	0424      	lsls	r4, r4, #16
 800a6d6:	b292      	uxth	r2, r2
 800a6d8:	4314      	orrs	r4, r2
 800a6da:	e7e5      	b.n	800a6a8 <_calloc_r+0x14>
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	d101      	bne.n	800a6e4 <_calloc_r+0x50>
 800a6e0:	1c14      	adds	r4, r2, #0
 800a6e2:	e7ed      	b.n	800a6c0 <_calloc_r+0x2c>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	6003      	str	r3, [r0, #0]
 800a6e8:	2500      	movs	r5, #0
 800a6ea:	0028      	movs	r0, r5
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}

0800a6ee <rshift>:
 800a6ee:	0002      	movs	r2, r0
 800a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f2:	6904      	ldr	r4, [r0, #16]
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	3214      	adds	r2, #20
 800a6f8:	114b      	asrs	r3, r1, #5
 800a6fa:	0016      	movs	r6, r2
 800a6fc:	9302      	str	r3, [sp, #8]
 800a6fe:	429c      	cmp	r4, r3
 800a700:	dd31      	ble.n	800a766 <rshift+0x78>
 800a702:	261f      	movs	r6, #31
 800a704:	000f      	movs	r7, r1
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	00a5      	lsls	r5, r4, #2
 800a70a:	18d3      	adds	r3, r2, r3
 800a70c:	4037      	ands	r7, r6
 800a70e:	1955      	adds	r5, r2, r5
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	9701      	str	r7, [sp, #4]
 800a714:	4231      	tst	r1, r6
 800a716:	d10d      	bne.n	800a734 <rshift+0x46>
 800a718:	0016      	movs	r6, r2
 800a71a:	0019      	movs	r1, r3
 800a71c:	428d      	cmp	r5, r1
 800a71e:	d836      	bhi.n	800a78e <rshift+0xa0>
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	2600      	movs	r6, #0
 800a724:	3b03      	subs	r3, #3
 800a726:	429d      	cmp	r5, r3
 800a728:	d302      	bcc.n	800a730 <rshift+0x42>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	1ae4      	subs	r4, r4, r3
 800a72e:	00a6      	lsls	r6, r4, #2
 800a730:	1996      	adds	r6, r2, r6
 800a732:	e018      	b.n	800a766 <rshift+0x78>
 800a734:	2120      	movs	r1, #32
 800a736:	9e01      	ldr	r6, [sp, #4]
 800a738:	9f01      	ldr	r7, [sp, #4]
 800a73a:	1b89      	subs	r1, r1, r6
 800a73c:	9e00      	ldr	r6, [sp, #0]
 800a73e:	9103      	str	r1, [sp, #12]
 800a740:	ce02      	ldmia	r6!, {r1}
 800a742:	4694      	mov	ip, r2
 800a744:	40f9      	lsrs	r1, r7
 800a746:	42b5      	cmp	r5, r6
 800a748:	d816      	bhi.n	800a778 <rshift+0x8a>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	2600      	movs	r6, #0
 800a74e:	3301      	adds	r3, #1
 800a750:	429d      	cmp	r5, r3
 800a752:	d303      	bcc.n	800a75c <rshift+0x6e>
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	1ae4      	subs	r4, r4, r3
 800a758:	00a6      	lsls	r6, r4, #2
 800a75a:	3e04      	subs	r6, #4
 800a75c:	1996      	adds	r6, r2, r6
 800a75e:	6031      	str	r1, [r6, #0]
 800a760:	2900      	cmp	r1, #0
 800a762:	d000      	beq.n	800a766 <rshift+0x78>
 800a764:	3604      	adds	r6, #4
 800a766:	1ab1      	subs	r1, r6, r2
 800a768:	1089      	asrs	r1, r1, #2
 800a76a:	6101      	str	r1, [r0, #16]
 800a76c:	4296      	cmp	r6, r2
 800a76e:	d101      	bne.n	800a774 <rshift+0x86>
 800a770:	2300      	movs	r3, #0
 800a772:	6143      	str	r3, [r0, #20]
 800a774:	b005      	add	sp, #20
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	6837      	ldr	r7, [r6, #0]
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	409f      	lsls	r7, r3
 800a77e:	430f      	orrs	r7, r1
 800a780:	4661      	mov	r1, ip
 800a782:	c180      	stmia	r1!, {r7}
 800a784:	468c      	mov	ip, r1
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	ce02      	ldmia	r6!, {r1}
 800a78a:	40d9      	lsrs	r1, r3
 800a78c:	e7db      	b.n	800a746 <rshift+0x58>
 800a78e:	c980      	ldmia	r1!, {r7}
 800a790:	c680      	stmia	r6!, {r7}
 800a792:	e7c3      	b.n	800a71c <rshift+0x2e>

0800a794 <__hexdig_fun>:
 800a794:	0002      	movs	r2, r0
 800a796:	3a30      	subs	r2, #48	@ 0x30
 800a798:	0003      	movs	r3, r0
 800a79a:	2a09      	cmp	r2, #9
 800a79c:	d802      	bhi.n	800a7a4 <__hexdig_fun+0x10>
 800a79e:	3b20      	subs	r3, #32
 800a7a0:	b2d8      	uxtb	r0, r3
 800a7a2:	4770      	bx	lr
 800a7a4:	0002      	movs	r2, r0
 800a7a6:	3a61      	subs	r2, #97	@ 0x61
 800a7a8:	2a05      	cmp	r2, #5
 800a7aa:	d801      	bhi.n	800a7b0 <__hexdig_fun+0x1c>
 800a7ac:	3b47      	subs	r3, #71	@ 0x47
 800a7ae:	e7f7      	b.n	800a7a0 <__hexdig_fun+0xc>
 800a7b0:	001a      	movs	r2, r3
 800a7b2:	3a41      	subs	r2, #65	@ 0x41
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	2a05      	cmp	r2, #5
 800a7b8:	d8f3      	bhi.n	800a7a2 <__hexdig_fun+0xe>
 800a7ba:	3b27      	subs	r3, #39	@ 0x27
 800a7bc:	e7f0      	b.n	800a7a0 <__hexdig_fun+0xc>
	...

0800a7c0 <__gethex>:
 800a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c2:	b089      	sub	sp, #36	@ 0x24
 800a7c4:	9307      	str	r3, [sp, #28]
 800a7c6:	680b      	ldr	r3, [r1, #0]
 800a7c8:	9201      	str	r2, [sp, #4]
 800a7ca:	9003      	str	r0, [sp, #12]
 800a7cc:	9106      	str	r1, [sp, #24]
 800a7ce:	1c9a      	adds	r2, r3, #2
 800a7d0:	0011      	movs	r1, r2
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	1e50      	subs	r0, r2, #1
 800a7d6:	7800      	ldrb	r0, [r0, #0]
 800a7d8:	2830      	cmp	r0, #48	@ 0x30
 800a7da:	d0f9      	beq.n	800a7d0 <__gethex+0x10>
 800a7dc:	1acb      	subs	r3, r1, r3
 800a7de:	3b02      	subs	r3, #2
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	9100      	str	r1, [sp, #0]
 800a7e4:	f7ff ffd6 	bl	800a794 <__hexdig_fun>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	001d      	movs	r5, r3
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	4298      	cmp	r0, r3
 800a7f0:	d11e      	bne.n	800a830 <__gethex+0x70>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	49a6      	ldr	r1, [pc, #664]	@ (800aa90 <__gethex+0x2d0>)
 800a7f6:	9800      	ldr	r0, [sp, #0]
 800a7f8:	f7ff fefa 	bl	800a5f0 <strncmp>
 800a7fc:	0007      	movs	r7, r0
 800a7fe:	42a8      	cmp	r0, r5
 800a800:	d000      	beq.n	800a804 <__gethex+0x44>
 800a802:	e06a      	b.n	800a8da <__gethex+0x11a>
 800a804:	9b00      	ldr	r3, [sp, #0]
 800a806:	7858      	ldrb	r0, [r3, #1]
 800a808:	1c5c      	adds	r4, r3, #1
 800a80a:	f7ff ffc3 	bl	800a794 <__hexdig_fun>
 800a80e:	2301      	movs	r3, #1
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	42a8      	cmp	r0, r5
 800a814:	d02f      	beq.n	800a876 <__gethex+0xb6>
 800a816:	9400      	str	r4, [sp, #0]
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	7818      	ldrb	r0, [r3, #0]
 800a81c:	2830      	cmp	r0, #48	@ 0x30
 800a81e:	d009      	beq.n	800a834 <__gethex+0x74>
 800a820:	f7ff ffb8 	bl	800a794 <__hexdig_fun>
 800a824:	4242      	negs	r2, r0
 800a826:	4142      	adcs	r2, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	0025      	movs	r5, r4
 800a82c:	9202      	str	r2, [sp, #8]
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	9c00      	ldr	r4, [sp, #0]
 800a832:	e004      	b.n	800a83e <__gethex+0x7e>
 800a834:	9b00      	ldr	r3, [sp, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	e7ed      	b.n	800a818 <__gethex+0x58>
 800a83c:	3401      	adds	r4, #1
 800a83e:	7820      	ldrb	r0, [r4, #0]
 800a840:	f7ff ffa8 	bl	800a794 <__hexdig_fun>
 800a844:	1e07      	subs	r7, r0, #0
 800a846:	d1f9      	bne.n	800a83c <__gethex+0x7c>
 800a848:	2201      	movs	r2, #1
 800a84a:	0020      	movs	r0, r4
 800a84c:	4990      	ldr	r1, [pc, #576]	@ (800aa90 <__gethex+0x2d0>)
 800a84e:	f7ff fecf 	bl	800a5f0 <strncmp>
 800a852:	2800      	cmp	r0, #0
 800a854:	d10d      	bne.n	800a872 <__gethex+0xb2>
 800a856:	2d00      	cmp	r5, #0
 800a858:	d106      	bne.n	800a868 <__gethex+0xa8>
 800a85a:	3401      	adds	r4, #1
 800a85c:	0025      	movs	r5, r4
 800a85e:	7820      	ldrb	r0, [r4, #0]
 800a860:	f7ff ff98 	bl	800a794 <__hexdig_fun>
 800a864:	2800      	cmp	r0, #0
 800a866:	d102      	bne.n	800a86e <__gethex+0xae>
 800a868:	1b2d      	subs	r5, r5, r4
 800a86a:	00af      	lsls	r7, r5, #2
 800a86c:	e003      	b.n	800a876 <__gethex+0xb6>
 800a86e:	3401      	adds	r4, #1
 800a870:	e7f5      	b.n	800a85e <__gethex+0x9e>
 800a872:	2d00      	cmp	r5, #0
 800a874:	d1f8      	bne.n	800a868 <__gethex+0xa8>
 800a876:	2220      	movs	r2, #32
 800a878:	7823      	ldrb	r3, [r4, #0]
 800a87a:	0026      	movs	r6, r4
 800a87c:	4393      	bics	r3, r2
 800a87e:	2b50      	cmp	r3, #80	@ 0x50
 800a880:	d11d      	bne.n	800a8be <__gethex+0xfe>
 800a882:	7863      	ldrb	r3, [r4, #1]
 800a884:	2b2b      	cmp	r3, #43	@ 0x2b
 800a886:	d02d      	beq.n	800a8e4 <__gethex+0x124>
 800a888:	2b2d      	cmp	r3, #45	@ 0x2d
 800a88a:	d02f      	beq.n	800a8ec <__gethex+0x12c>
 800a88c:	2300      	movs	r3, #0
 800a88e:	1c66      	adds	r6, r4, #1
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	7830      	ldrb	r0, [r6, #0]
 800a894:	f7ff ff7e 	bl	800a794 <__hexdig_fun>
 800a898:	1e43      	subs	r3, r0, #1
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	0005      	movs	r5, r0
 800a89e:	2b18      	cmp	r3, #24
 800a8a0:	d82a      	bhi.n	800a8f8 <__gethex+0x138>
 800a8a2:	7870      	ldrb	r0, [r6, #1]
 800a8a4:	f7ff ff76 	bl	800a794 <__hexdig_fun>
 800a8a8:	1e43      	subs	r3, r0, #1
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	3d10      	subs	r5, #16
 800a8b0:	2b18      	cmp	r3, #24
 800a8b2:	d91d      	bls.n	800a8f0 <__gethex+0x130>
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d000      	beq.n	800a8bc <__gethex+0xfc>
 800a8ba:	426d      	negs	r5, r5
 800a8bc:	197f      	adds	r7, r7, r5
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	601e      	str	r6, [r3, #0]
 800a8c2:	9b02      	ldr	r3, [sp, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d019      	beq.n	800a8fc <__gethex+0x13c>
 800a8c8:	9b05      	ldr	r3, [sp, #20]
 800a8ca:	2606      	movs	r6, #6
 800a8cc:	425a      	negs	r2, r3
 800a8ce:	4153      	adcs	r3, r2
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	401e      	ands	r6, r3
 800a8d4:	0030      	movs	r0, r6
 800a8d6:	b009      	add	sp, #36	@ 0x24
 800a8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8da:	2301      	movs	r3, #1
 800a8dc:	2700      	movs	r7, #0
 800a8de:	9c00      	ldr	r4, [sp, #0]
 800a8e0:	9302      	str	r3, [sp, #8]
 800a8e2:	e7c8      	b.n	800a876 <__gethex+0xb6>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	1ca6      	adds	r6, r4, #2
 800a8ea:	e7d2      	b.n	800a892 <__gethex+0xd2>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e7fa      	b.n	800a8e6 <__gethex+0x126>
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	435d      	muls	r5, r3
 800a8f4:	182d      	adds	r5, r5, r0
 800a8f6:	e7d4      	b.n	800a8a2 <__gethex+0xe2>
 800a8f8:	0026      	movs	r6, r4
 800a8fa:	e7e0      	b.n	800a8be <__gethex+0xfe>
 800a8fc:	9b00      	ldr	r3, [sp, #0]
 800a8fe:	9902      	ldr	r1, [sp, #8]
 800a900:	1ae3      	subs	r3, r4, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	2b07      	cmp	r3, #7
 800a906:	dc0a      	bgt.n	800a91e <__gethex+0x15e>
 800a908:	9803      	ldr	r0, [sp, #12]
 800a90a:	f7fe f8e5 	bl	8008ad8 <_Balloc>
 800a90e:	1e05      	subs	r5, r0, #0
 800a910:	d108      	bne.n	800a924 <__gethex+0x164>
 800a912:	002a      	movs	r2, r5
 800a914:	21e4      	movs	r1, #228	@ 0xe4
 800a916:	4b5f      	ldr	r3, [pc, #380]	@ (800aa94 <__gethex+0x2d4>)
 800a918:	485f      	ldr	r0, [pc, #380]	@ (800aa98 <__gethex+0x2d8>)
 800a91a:	f7ff fe9d 	bl	800a658 <__assert_func>
 800a91e:	3101      	adds	r1, #1
 800a920:	105b      	asrs	r3, r3, #1
 800a922:	e7ef      	b.n	800a904 <__gethex+0x144>
 800a924:	0003      	movs	r3, r0
 800a926:	3314      	adds	r3, #20
 800a928:	9302      	str	r3, [sp, #8]
 800a92a:	9305      	str	r3, [sp, #20]
 800a92c:	2300      	movs	r3, #0
 800a92e:	001e      	movs	r6, r3
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	9b00      	ldr	r3, [sp, #0]
 800a934:	42a3      	cmp	r3, r4
 800a936:	d338      	bcc.n	800a9aa <__gethex+0x1ea>
 800a938:	9c05      	ldr	r4, [sp, #20]
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	c440      	stmia	r4!, {r6}
 800a93e:	1ae4      	subs	r4, r4, r3
 800a940:	10a4      	asrs	r4, r4, #2
 800a942:	0030      	movs	r0, r6
 800a944:	612c      	str	r4, [r5, #16]
 800a946:	f7fe f9bf 	bl	8008cc8 <__hi0bits>
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	0164      	lsls	r4, r4, #5
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	1a26      	subs	r6, r4, r0
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	429e      	cmp	r6, r3
 800a956:	dd52      	ble.n	800a9fe <__gethex+0x23e>
 800a958:	1af6      	subs	r6, r6, r3
 800a95a:	0031      	movs	r1, r6
 800a95c:	0028      	movs	r0, r5
 800a95e:	f7fe fd62 	bl	8009426 <__any_on>
 800a962:	1e04      	subs	r4, r0, #0
 800a964:	d00f      	beq.n	800a986 <__gethex+0x1c6>
 800a966:	2401      	movs	r4, #1
 800a968:	231f      	movs	r3, #31
 800a96a:	0020      	movs	r0, r4
 800a96c:	1e72      	subs	r2, r6, #1
 800a96e:	4013      	ands	r3, r2
 800a970:	4098      	lsls	r0, r3
 800a972:	0003      	movs	r3, r0
 800a974:	1151      	asrs	r1, r2, #5
 800a976:	9802      	ldr	r0, [sp, #8]
 800a978:	0089      	lsls	r1, r1, #2
 800a97a:	5809      	ldr	r1, [r1, r0]
 800a97c:	4219      	tst	r1, r3
 800a97e:	d002      	beq.n	800a986 <__gethex+0x1c6>
 800a980:	42a2      	cmp	r2, r4
 800a982:	dc34      	bgt.n	800a9ee <__gethex+0x22e>
 800a984:	2402      	movs	r4, #2
 800a986:	0031      	movs	r1, r6
 800a988:	0028      	movs	r0, r5
 800a98a:	f7ff feb0 	bl	800a6ee <rshift>
 800a98e:	19bf      	adds	r7, r7, r6
 800a990:	9b01      	ldr	r3, [sp, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	42bb      	cmp	r3, r7
 800a996:	da42      	bge.n	800aa1e <__gethex+0x25e>
 800a998:	0029      	movs	r1, r5
 800a99a:	9803      	ldr	r0, [sp, #12]
 800a99c:	f7fe f8e0 	bl	8008b60 <_Bfree>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9a4:	26a3      	movs	r6, #163	@ 0xa3
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	e794      	b.n	800a8d4 <__gethex+0x114>
 800a9aa:	3c01      	subs	r4, #1
 800a9ac:	7823      	ldrb	r3, [r4, #0]
 800a9ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9b0:	d012      	beq.n	800a9d8 <__gethex+0x218>
 800a9b2:	9b04      	ldr	r3, [sp, #16]
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d104      	bne.n	800a9c2 <__gethex+0x202>
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	c340      	stmia	r3!, {r6}
 800a9bc:	2600      	movs	r6, #0
 800a9be:	9305      	str	r3, [sp, #20]
 800a9c0:	9604      	str	r6, [sp, #16]
 800a9c2:	7820      	ldrb	r0, [r4, #0]
 800a9c4:	f7ff fee6 	bl	800a794 <__hexdig_fun>
 800a9c8:	230f      	movs	r3, #15
 800a9ca:	4018      	ands	r0, r3
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	4098      	lsls	r0, r3
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	4306      	orrs	r6, r0
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	e7ac      	b.n	800a932 <__gethex+0x172>
 800a9d8:	9b00      	ldr	r3, [sp, #0]
 800a9da:	42a3      	cmp	r3, r4
 800a9dc:	d8e9      	bhi.n	800a9b2 <__gethex+0x1f2>
 800a9de:	2201      	movs	r2, #1
 800a9e0:	0020      	movs	r0, r4
 800a9e2:	492b      	ldr	r1, [pc, #172]	@ (800aa90 <__gethex+0x2d0>)
 800a9e4:	f7ff fe04 	bl	800a5f0 <strncmp>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d1e2      	bne.n	800a9b2 <__gethex+0x1f2>
 800a9ec:	e7a1      	b.n	800a932 <__gethex+0x172>
 800a9ee:	0028      	movs	r0, r5
 800a9f0:	1eb1      	subs	r1, r6, #2
 800a9f2:	f7fe fd18 	bl	8009426 <__any_on>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d0c4      	beq.n	800a984 <__gethex+0x1c4>
 800a9fa:	2403      	movs	r4, #3
 800a9fc:	e7c3      	b.n	800a986 <__gethex+0x1c6>
 800a9fe:	9b00      	ldr	r3, [sp, #0]
 800aa00:	2400      	movs	r4, #0
 800aa02:	429e      	cmp	r6, r3
 800aa04:	dac4      	bge.n	800a990 <__gethex+0x1d0>
 800aa06:	1b9e      	subs	r6, r3, r6
 800aa08:	0029      	movs	r1, r5
 800aa0a:	0032      	movs	r2, r6
 800aa0c:	9803      	ldr	r0, [sp, #12]
 800aa0e:	f7fe fad1 	bl	8008fb4 <__lshift>
 800aa12:	0003      	movs	r3, r0
 800aa14:	3314      	adds	r3, #20
 800aa16:	0005      	movs	r5, r0
 800aa18:	1bbf      	subs	r7, r7, r6
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	e7b8      	b.n	800a990 <__gethex+0x1d0>
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	685e      	ldr	r6, [r3, #4]
 800aa22:	42be      	cmp	r6, r7
 800aa24:	dd6f      	ble.n	800ab06 <__gethex+0x346>
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	1bf6      	subs	r6, r6, r7
 800aa2a:	42b3      	cmp	r3, r6
 800aa2c:	dc36      	bgt.n	800aa9c <__gethex+0x2dc>
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d024      	beq.n	800aa80 <__gethex+0x2c0>
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d026      	beq.n	800aa88 <__gethex+0x2c8>
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d117      	bne.n	800aa6e <__gethex+0x2ae>
 800aa3e:	9b00      	ldr	r3, [sp, #0]
 800aa40:	42b3      	cmp	r3, r6
 800aa42:	d114      	bne.n	800aa6e <__gethex+0x2ae>
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d10b      	bne.n	800aa60 <__gethex+0x2a0>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	9a07      	ldr	r2, [sp, #28]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2662      	movs	r6, #98	@ 0x62
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	2301      	movs	r3, #1
 800aa54:	9a02      	ldr	r2, [sp, #8]
 800aa56:	612b      	str	r3, [r5, #16]
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa5c:	601d      	str	r5, [r3, #0]
 800aa5e:	e739      	b.n	800a8d4 <__gethex+0x114>
 800aa60:	9900      	ldr	r1, [sp, #0]
 800aa62:	0028      	movs	r0, r5
 800aa64:	3901      	subs	r1, #1
 800aa66:	f7fe fcde 	bl	8009426 <__any_on>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d1ec      	bne.n	800aa48 <__gethex+0x288>
 800aa6e:	0029      	movs	r1, r5
 800aa70:	9803      	ldr	r0, [sp, #12]
 800aa72:	f7fe f875 	bl	8008b60 <_Bfree>
 800aa76:	2300      	movs	r3, #0
 800aa78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa7a:	2650      	movs	r6, #80	@ 0x50
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	e729      	b.n	800a8d4 <__gethex+0x114>
 800aa80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f3      	bne.n	800aa6e <__gethex+0x2ae>
 800aa86:	e7df      	b.n	800aa48 <__gethex+0x288>
 800aa88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1dc      	bne.n	800aa48 <__gethex+0x288>
 800aa8e:	e7ee      	b.n	800aa6e <__gethex+0x2ae>
 800aa90:	0800ba48 	.word	0x0800ba48
 800aa94:	0800b8dd 	.word	0x0800b8dd
 800aa98:	0800bbf6 	.word	0x0800bbf6
 800aa9c:	1e77      	subs	r7, r6, #1
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d12f      	bne.n	800ab02 <__gethex+0x342>
 800aaa2:	2f00      	cmp	r7, #0
 800aaa4:	d004      	beq.n	800aab0 <__gethex+0x2f0>
 800aaa6:	0039      	movs	r1, r7
 800aaa8:	0028      	movs	r0, r5
 800aaaa:	f7fe fcbc 	bl	8009426 <__any_on>
 800aaae:	0004      	movs	r4, r0
 800aab0:	231f      	movs	r3, #31
 800aab2:	117a      	asrs	r2, r7, #5
 800aab4:	401f      	ands	r7, r3
 800aab6:	3b1e      	subs	r3, #30
 800aab8:	40bb      	lsls	r3, r7
 800aaba:	9902      	ldr	r1, [sp, #8]
 800aabc:	0092      	lsls	r2, r2, #2
 800aabe:	5852      	ldr	r2, [r2, r1]
 800aac0:	421a      	tst	r2, r3
 800aac2:	d001      	beq.n	800aac8 <__gethex+0x308>
 800aac4:	2302      	movs	r3, #2
 800aac6:	431c      	orrs	r4, r3
 800aac8:	9b00      	ldr	r3, [sp, #0]
 800aaca:	0031      	movs	r1, r6
 800aacc:	1b9b      	subs	r3, r3, r6
 800aace:	2602      	movs	r6, #2
 800aad0:	0028      	movs	r0, r5
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	f7ff fe0b 	bl	800a6ee <rshift>
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	685f      	ldr	r7, [r3, #4]
 800aadc:	2c00      	cmp	r4, #0
 800aade:	d03f      	beq.n	800ab60 <__gethex+0x3a0>
 800aae0:	9b01      	ldr	r3, [sp, #4]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d010      	beq.n	800ab0a <__gethex+0x34a>
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d012      	beq.n	800ab12 <__gethex+0x352>
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d106      	bne.n	800aafe <__gethex+0x33e>
 800aaf0:	07a2      	lsls	r2, r4, #30
 800aaf2:	d504      	bpl.n	800aafe <__gethex+0x33e>
 800aaf4:	9a02      	ldr	r2, [sp, #8]
 800aaf6:	6812      	ldr	r2, [r2, #0]
 800aaf8:	4314      	orrs	r4, r2
 800aafa:	421c      	tst	r4, r3
 800aafc:	d10c      	bne.n	800ab18 <__gethex+0x358>
 800aafe:	2310      	movs	r3, #16
 800ab00:	e02d      	b.n	800ab5e <__gethex+0x39e>
 800ab02:	2401      	movs	r4, #1
 800ab04:	e7d4      	b.n	800aab0 <__gethex+0x2f0>
 800ab06:	2601      	movs	r6, #1
 800ab08:	e7e8      	b.n	800aadc <__gethex+0x31c>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0f2      	beq.n	800aafe <__gethex+0x33e>
 800ab18:	692b      	ldr	r3, [r5, #16]
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	9302      	str	r3, [sp, #8]
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	002b      	movs	r3, r5
 800ab24:	9a04      	ldr	r2, [sp, #16]
 800ab26:	3314      	adds	r3, #20
 800ab28:	1899      	adds	r1, r3, r2
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	1c54      	adds	r4, r2, #1
 800ab2e:	d01c      	beq.n	800ab6a <__gethex+0x3aa>
 800ab30:	3201      	adds	r2, #1
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	002b      	movs	r3, r5
 800ab36:	3314      	adds	r3, #20
 800ab38:	2e02      	cmp	r6, #2
 800ab3a:	d13f      	bne.n	800abbc <__gethex+0x3fc>
 800ab3c:	9a01      	ldr	r2, [sp, #4]
 800ab3e:	9900      	ldr	r1, [sp, #0]
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	3a01      	subs	r2, #1
 800ab44:	428a      	cmp	r2, r1
 800ab46:	d109      	bne.n	800ab5c <__gethex+0x39c>
 800ab48:	000a      	movs	r2, r1
 800ab4a:	201f      	movs	r0, #31
 800ab4c:	4010      	ands	r0, r2
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4082      	lsls	r2, r0
 800ab52:	1149      	asrs	r1, r1, #5
 800ab54:	0089      	lsls	r1, r1, #2
 800ab56:	58cb      	ldr	r3, [r1, r3]
 800ab58:	4213      	tst	r3, r2
 800ab5a:	d13d      	bne.n	800abd8 <__gethex+0x418>
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	431e      	orrs	r6, r3
 800ab60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab62:	601d      	str	r5, [r3, #0]
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	601f      	str	r7, [r3, #0]
 800ab68:	e6b4      	b.n	800a8d4 <__gethex+0x114>
 800ab6a:	c301      	stmia	r3!, {r0}
 800ab6c:	4299      	cmp	r1, r3
 800ab6e:	d8dc      	bhi.n	800ab2a <__gethex+0x36a>
 800ab70:	68ab      	ldr	r3, [r5, #8]
 800ab72:	9a02      	ldr	r2, [sp, #8]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	db18      	blt.n	800abaa <__gethex+0x3ea>
 800ab78:	6869      	ldr	r1, [r5, #4]
 800ab7a:	9803      	ldr	r0, [sp, #12]
 800ab7c:	3101      	adds	r1, #1
 800ab7e:	f7fd ffab 	bl	8008ad8 <_Balloc>
 800ab82:	1e04      	subs	r4, r0, #0
 800ab84:	d104      	bne.n	800ab90 <__gethex+0x3d0>
 800ab86:	0022      	movs	r2, r4
 800ab88:	2184      	movs	r1, #132	@ 0x84
 800ab8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ac00 <__gethex+0x440>)
 800ab8c:	481d      	ldr	r0, [pc, #116]	@ (800ac04 <__gethex+0x444>)
 800ab8e:	e6c4      	b.n	800a91a <__gethex+0x15a>
 800ab90:	0029      	movs	r1, r5
 800ab92:	692a      	ldr	r2, [r5, #16]
 800ab94:	310c      	adds	r1, #12
 800ab96:	3202      	adds	r2, #2
 800ab98:	0092      	lsls	r2, r2, #2
 800ab9a:	300c      	adds	r0, #12
 800ab9c:	f7ff fd4c 	bl	800a638 <memcpy>
 800aba0:	0029      	movs	r1, r5
 800aba2:	9803      	ldr	r0, [sp, #12]
 800aba4:	f7fd ffdc 	bl	8008b60 <_Bfree>
 800aba8:	0025      	movs	r5, r4
 800abaa:	692b      	ldr	r3, [r5, #16]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	612a      	str	r2, [r5, #16]
 800abb0:	2201      	movs	r2, #1
 800abb2:	3304      	adds	r3, #4
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	18eb      	adds	r3, r5, r3
 800abb8:	605a      	str	r2, [r3, #4]
 800abba:	e7bb      	b.n	800ab34 <__gethex+0x374>
 800abbc:	692a      	ldr	r2, [r5, #16]
 800abbe:	9902      	ldr	r1, [sp, #8]
 800abc0:	428a      	cmp	r2, r1
 800abc2:	dd0b      	ble.n	800abdc <__gethex+0x41c>
 800abc4:	2101      	movs	r1, #1
 800abc6:	0028      	movs	r0, r5
 800abc8:	f7ff fd91 	bl	800a6ee <rshift>
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	3701      	adds	r7, #1
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	42bb      	cmp	r3, r7
 800abd4:	da00      	bge.n	800abd8 <__gethex+0x418>
 800abd6:	e6df      	b.n	800a998 <__gethex+0x1d8>
 800abd8:	2601      	movs	r6, #1
 800abda:	e7bf      	b.n	800ab5c <__gethex+0x39c>
 800abdc:	221f      	movs	r2, #31
 800abde:	9c00      	ldr	r4, [sp, #0]
 800abe0:	9900      	ldr	r1, [sp, #0]
 800abe2:	4014      	ands	r4, r2
 800abe4:	4211      	tst	r1, r2
 800abe6:	d0f7      	beq.n	800abd8 <__gethex+0x418>
 800abe8:	9a04      	ldr	r2, [sp, #16]
 800abea:	189b      	adds	r3, r3, r2
 800abec:	3b04      	subs	r3, #4
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	f7fe f86a 	bl	8008cc8 <__hi0bits>
 800abf4:	2320      	movs	r3, #32
 800abf6:	1b1b      	subs	r3, r3, r4
 800abf8:	4298      	cmp	r0, r3
 800abfa:	dbe3      	blt.n	800abc4 <__gethex+0x404>
 800abfc:	e7ec      	b.n	800abd8 <__gethex+0x418>
 800abfe:	46c0      	nop			@ (mov r8, r8)
 800ac00:	0800b8dd 	.word	0x0800b8dd
 800ac04:	0800bbf6 	.word	0x0800bbf6

0800ac08 <L_shift>:
 800ac08:	2308      	movs	r3, #8
 800ac0a:	b570      	push	{r4, r5, r6, lr}
 800ac0c:	2520      	movs	r5, #32
 800ac0e:	1a9a      	subs	r2, r3, r2
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	1aad      	subs	r5, r5, r2
 800ac14:	6843      	ldr	r3, [r0, #4]
 800ac16:	6804      	ldr	r4, [r0, #0]
 800ac18:	001e      	movs	r6, r3
 800ac1a:	40ae      	lsls	r6, r5
 800ac1c:	40d3      	lsrs	r3, r2
 800ac1e:	4334      	orrs	r4, r6
 800ac20:	6004      	str	r4, [r0, #0]
 800ac22:	6043      	str	r3, [r0, #4]
 800ac24:	3004      	adds	r0, #4
 800ac26:	4288      	cmp	r0, r1
 800ac28:	d3f4      	bcc.n	800ac14 <L_shift+0xc>
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}

0800ac2c <__match>:
 800ac2c:	b530      	push	{r4, r5, lr}
 800ac2e:	6803      	ldr	r3, [r0, #0]
 800ac30:	780c      	ldrb	r4, [r1, #0]
 800ac32:	3301      	adds	r3, #1
 800ac34:	2c00      	cmp	r4, #0
 800ac36:	d102      	bne.n	800ac3e <__match+0x12>
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	bd30      	pop	{r4, r5, pc}
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	0015      	movs	r5, r2
 800ac42:	3d41      	subs	r5, #65	@ 0x41
 800ac44:	2d19      	cmp	r5, #25
 800ac46:	d800      	bhi.n	800ac4a <__match+0x1e>
 800ac48:	3220      	adds	r2, #32
 800ac4a:	3101      	adds	r1, #1
 800ac4c:	42a2      	cmp	r2, r4
 800ac4e:	d0ef      	beq.n	800ac30 <__match+0x4>
 800ac50:	2000      	movs	r0, #0
 800ac52:	e7f3      	b.n	800ac3c <__match+0x10>

0800ac54 <__hexnan>:
 800ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	b08b      	sub	sp, #44	@ 0x2c
 800ac5a:	9201      	str	r2, [sp, #4]
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	115a      	asrs	r2, r3, #5
 800ac60:	0092      	lsls	r2, r2, #2
 800ac62:	188a      	adds	r2, r1, r2
 800ac64:	9202      	str	r2, [sp, #8]
 800ac66:	0019      	movs	r1, r3
 800ac68:	221f      	movs	r2, #31
 800ac6a:	4011      	ands	r1, r2
 800ac6c:	9008      	str	r0, [sp, #32]
 800ac6e:	9106      	str	r1, [sp, #24]
 800ac70:	4213      	tst	r3, r2
 800ac72:	d002      	beq.n	800ac7a <__hexnan+0x26>
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	3304      	adds	r3, #4
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	2500      	movs	r5, #0
 800ac7e:	1f1f      	subs	r7, r3, #4
 800ac80:	003e      	movs	r6, r7
 800ac82:	003c      	movs	r4, r7
 800ac84:	9b08      	ldr	r3, [sp, #32]
 800ac86:	603d      	str	r5, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	9507      	str	r5, [sp, #28]
 800ac8c:	9305      	str	r3, [sp, #20]
 800ac8e:	9503      	str	r5, [sp, #12]
 800ac90:	9b05      	ldr	r3, [sp, #20]
 800ac92:	3301      	adds	r3, #1
 800ac94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac96:	9b05      	ldr	r3, [sp, #20]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d028      	beq.n	800acf2 <__hexnan+0x9e>
 800aca0:	9804      	ldr	r0, [sp, #16]
 800aca2:	f7ff fd77 	bl	800a794 <__hexdig_fun>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d155      	bne.n	800ad56 <__hexnan+0x102>
 800acaa:	9b04      	ldr	r3, [sp, #16]
 800acac:	2b20      	cmp	r3, #32
 800acae:	d819      	bhi.n	800ace4 <__hexnan+0x90>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	dd12      	ble.n	800acde <__hexnan+0x8a>
 800acb8:	42b4      	cmp	r4, r6
 800acba:	d206      	bcs.n	800acca <__hexnan+0x76>
 800acbc:	2d07      	cmp	r5, #7
 800acbe:	dc04      	bgt.n	800acca <__hexnan+0x76>
 800acc0:	002a      	movs	r2, r5
 800acc2:	0031      	movs	r1, r6
 800acc4:	0020      	movs	r0, r4
 800acc6:	f7ff ff9f 	bl	800ac08 <L_shift>
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	2508      	movs	r5, #8
 800acce:	429c      	cmp	r4, r3
 800acd0:	d905      	bls.n	800acde <__hexnan+0x8a>
 800acd2:	1f26      	subs	r6, r4, #4
 800acd4:	2500      	movs	r5, #0
 800acd6:	0034      	movs	r4, r6
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	6035      	str	r5, [r6, #0]
 800acdc:	9307      	str	r3, [sp, #28]
 800acde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	e7d5      	b.n	800ac90 <__hexnan+0x3c>
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	2b29      	cmp	r3, #41	@ 0x29
 800ace8:	d15a      	bne.n	800ada0 <__hexnan+0x14c>
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	9a08      	ldr	r2, [sp, #32]
 800acee:	3302      	adds	r3, #2
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d053      	beq.n	800ada0 <__hexnan+0x14c>
 800acf8:	42b4      	cmp	r4, r6
 800acfa:	d206      	bcs.n	800ad0a <__hexnan+0xb6>
 800acfc:	2d07      	cmp	r5, #7
 800acfe:	dc04      	bgt.n	800ad0a <__hexnan+0xb6>
 800ad00:	002a      	movs	r2, r5
 800ad02:	0031      	movs	r1, r6
 800ad04:	0020      	movs	r0, r4
 800ad06:	f7ff ff7f 	bl	800ac08 <L_shift>
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d936      	bls.n	800ad7e <__hexnan+0x12a>
 800ad10:	001a      	movs	r2, r3
 800ad12:	0023      	movs	r3, r4
 800ad14:	cb02      	ldmia	r3!, {r1}
 800ad16:	c202      	stmia	r2!, {r1}
 800ad18:	429f      	cmp	r7, r3
 800ad1a:	d2fb      	bcs.n	800ad14 <__hexnan+0xc0>
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	1c61      	adds	r1, r4, #1
 800ad20:	1eda      	subs	r2, r3, #3
 800ad22:	2304      	movs	r3, #4
 800ad24:	4291      	cmp	r1, r2
 800ad26:	d805      	bhi.n	800ad34 <__hexnan+0xe0>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	3b04      	subs	r3, #4
 800ad2c:	1b1b      	subs	r3, r3, r4
 800ad2e:	089b      	lsrs	r3, r3, #2
 800ad30:	3301      	adds	r3, #1
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	9a01      	ldr	r2, [sp, #4]
 800ad36:	18d3      	adds	r3, r2, r3
 800ad38:	2200      	movs	r2, #0
 800ad3a:	c304      	stmia	r3!, {r2}
 800ad3c:	429f      	cmp	r7, r3
 800ad3e:	d2fc      	bcs.n	800ad3a <__hexnan+0xe6>
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d104      	bne.n	800ad50 <__hexnan+0xfc>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	429f      	cmp	r7, r3
 800ad4a:	d127      	bne.n	800ad9c <__hexnan+0x148>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	2005      	movs	r0, #5
 800ad52:	b00b      	add	sp, #44	@ 0x2c
 800ad54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	3501      	adds	r5, #1
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	2d08      	cmp	r5, #8
 800ad60:	dd06      	ble.n	800ad70 <__hexnan+0x11c>
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d9ba      	bls.n	800acde <__hexnan+0x8a>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2501      	movs	r5, #1
 800ad6c:	3c04      	subs	r4, #4
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	220f      	movs	r2, #15
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	4010      	ands	r0, r2
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	4303      	orrs	r3, r0
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	e7af      	b.n	800acde <__hexnan+0x8a>
 800ad7e:	9b06      	ldr	r3, [sp, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0dd      	beq.n	800ad40 <__hexnan+0xec>
 800ad84:	2320      	movs	r3, #32
 800ad86:	9a06      	ldr	r2, [sp, #24]
 800ad88:	9902      	ldr	r1, [sp, #8]
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	4252      	negs	r2, r2
 800ad90:	40da      	lsrs	r2, r3
 800ad92:	3904      	subs	r1, #4
 800ad94:	680b      	ldr	r3, [r1, #0]
 800ad96:	4013      	ands	r3, r2
 800ad98:	600b      	str	r3, [r1, #0]
 800ad9a:	e7d1      	b.n	800ad40 <__hexnan+0xec>
 800ad9c:	3f04      	subs	r7, #4
 800ad9e:	e7cf      	b.n	800ad40 <__hexnan+0xec>
 800ada0:	2004      	movs	r0, #4
 800ada2:	e7d6      	b.n	800ad52 <__hexnan+0xfe>

0800ada4 <__ascii_mbtowc>:
 800ada4:	b082      	sub	sp, #8
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d100      	bne.n	800adac <__ascii_mbtowc+0x8>
 800adaa:	a901      	add	r1, sp, #4
 800adac:	1e10      	subs	r0, r2, #0
 800adae:	d006      	beq.n	800adbe <__ascii_mbtowc+0x1a>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <__ascii_mbtowc+0x1e>
 800adb4:	7813      	ldrb	r3, [r2, #0]
 800adb6:	600b      	str	r3, [r1, #0]
 800adb8:	7810      	ldrb	r0, [r2, #0]
 800adba:	1e43      	subs	r3, r0, #1
 800adbc:	4198      	sbcs	r0, r3
 800adbe:	b002      	add	sp, #8
 800adc0:	4770      	bx	lr
 800adc2:	2002      	movs	r0, #2
 800adc4:	4240      	negs	r0, r0
 800adc6:	e7fa      	b.n	800adbe <__ascii_mbtowc+0x1a>

0800adc8 <_realloc_r>:
 800adc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adca:	0006      	movs	r6, r0
 800adcc:	000c      	movs	r4, r1
 800adce:	0015      	movs	r5, r2
 800add0:	2900      	cmp	r1, #0
 800add2:	d105      	bne.n	800ade0 <_realloc_r+0x18>
 800add4:	0011      	movs	r1, r2
 800add6:	f7fd fdef 	bl	80089b8 <_malloc_r>
 800adda:	0004      	movs	r4, r0
 800addc:	0020      	movs	r0, r4
 800adde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ade0:	2a00      	cmp	r2, #0
 800ade2:	d103      	bne.n	800adec <_realloc_r+0x24>
 800ade4:	f7fd fd72 	bl	80088cc <_free_r>
 800ade8:	2400      	movs	r4, #0
 800adea:	e7f7      	b.n	800addc <_realloc_r+0x14>
 800adec:	f000 f83f 	bl	800ae6e <_malloc_usable_size_r>
 800adf0:	0007      	movs	r7, r0
 800adf2:	4285      	cmp	r5, r0
 800adf4:	d802      	bhi.n	800adfc <_realloc_r+0x34>
 800adf6:	0843      	lsrs	r3, r0, #1
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	d3ef      	bcc.n	800addc <_realloc_r+0x14>
 800adfc:	0029      	movs	r1, r5
 800adfe:	0030      	movs	r0, r6
 800ae00:	f7fd fdda 	bl	80089b8 <_malloc_r>
 800ae04:	9001      	str	r0, [sp, #4]
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0ee      	beq.n	800ade8 <_realloc_r+0x20>
 800ae0a:	002a      	movs	r2, r5
 800ae0c:	42bd      	cmp	r5, r7
 800ae0e:	d900      	bls.n	800ae12 <_realloc_r+0x4a>
 800ae10:	003a      	movs	r2, r7
 800ae12:	0021      	movs	r1, r4
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	f7ff fc0f 	bl	800a638 <memcpy>
 800ae1a:	0021      	movs	r1, r4
 800ae1c:	0030      	movs	r0, r6
 800ae1e:	f7fd fd55 	bl	80088cc <_free_r>
 800ae22:	9c01      	ldr	r4, [sp, #4]
 800ae24:	e7da      	b.n	800addc <_realloc_r+0x14>

0800ae26 <__ascii_wctomb>:
 800ae26:	0003      	movs	r3, r0
 800ae28:	1e08      	subs	r0, r1, #0
 800ae2a:	d005      	beq.n	800ae38 <__ascii_wctomb+0x12>
 800ae2c:	2aff      	cmp	r2, #255	@ 0xff
 800ae2e:	d904      	bls.n	800ae3a <__ascii_wctomb+0x14>
 800ae30:	228a      	movs	r2, #138	@ 0x8a
 800ae32:	2001      	movs	r0, #1
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	4240      	negs	r0, r0
 800ae38:	4770      	bx	lr
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	700a      	strb	r2, [r1, #0]
 800ae3e:	e7fb      	b.n	800ae38 <__ascii_wctomb+0x12>

0800ae40 <fiprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b517      	push	{r0, r1, r2, r4, lr}
 800ae44:	4c05      	ldr	r4, [pc, #20]	@ (800ae5c <fiprintf+0x1c>)
 800ae46:	ab05      	add	r3, sp, #20
 800ae48:	cb04      	ldmia	r3!, {r2}
 800ae4a:	0001      	movs	r1, r0
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f000 f83c 	bl	800aecc <_vfiprintf_r>
 800ae54:	bc1e      	pop	{r1, r2, r3, r4}
 800ae56:	bc08      	pop	{r3}
 800ae58:	b003      	add	sp, #12
 800ae5a:	4718      	bx	r3
 800ae5c:	20000018 	.word	0x20000018

0800ae60 <abort>:
 800ae60:	2006      	movs	r0, #6
 800ae62:	b510      	push	{r4, lr}
 800ae64:	f000 fa18 	bl	800b298 <raise>
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f7f9 f82e 	bl	8003eca <_exit>

0800ae6e <_malloc_usable_size_r>:
 800ae6e:	1f0b      	subs	r3, r1, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1f18      	subs	r0, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da01      	bge.n	800ae7c <_malloc_usable_size_r+0xe>
 800ae78:	580b      	ldr	r3, [r1, r0]
 800ae7a:	18c0      	adds	r0, r0, r3
 800ae7c:	4770      	bx	lr

0800ae7e <__sfputc_r>:
 800ae7e:	6893      	ldr	r3, [r2, #8]
 800ae80:	b510      	push	{r4, lr}
 800ae82:	3b01      	subs	r3, #1
 800ae84:	6093      	str	r3, [r2, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da04      	bge.n	800ae94 <__sfputc_r+0x16>
 800ae8a:	6994      	ldr	r4, [r2, #24]
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	db07      	blt.n	800aea0 <__sfputc_r+0x22>
 800ae90:	290a      	cmp	r1, #10
 800ae92:	d005      	beq.n	800aea0 <__sfputc_r+0x22>
 800ae94:	6813      	ldr	r3, [r2, #0]
 800ae96:	1c58      	adds	r0, r3, #1
 800ae98:	6010      	str	r0, [r2, #0]
 800ae9a:	7019      	strb	r1, [r3, #0]
 800ae9c:	0008      	movs	r0, r1
 800ae9e:	bd10      	pop	{r4, pc}
 800aea0:	f000 f930 	bl	800b104 <__swbuf_r>
 800aea4:	0001      	movs	r1, r0
 800aea6:	e7f9      	b.n	800ae9c <__sfputc_r+0x1e>

0800aea8 <__sfputs_r>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	0006      	movs	r6, r0
 800aeac:	000f      	movs	r7, r1
 800aeae:	0014      	movs	r4, r2
 800aeb0:	18d5      	adds	r5, r2, r3
 800aeb2:	42ac      	cmp	r4, r5
 800aeb4:	d101      	bne.n	800aeba <__sfputs_r+0x12>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e007      	b.n	800aeca <__sfputs_r+0x22>
 800aeba:	7821      	ldrb	r1, [r4, #0]
 800aebc:	003a      	movs	r2, r7
 800aebe:	0030      	movs	r0, r6
 800aec0:	f7ff ffdd 	bl	800ae7e <__sfputc_r>
 800aec4:	3401      	adds	r4, #1
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d1f3      	bne.n	800aeb2 <__sfputs_r+0xa>
 800aeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aecc <_vfiprintf_r>:
 800aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aece:	b0a1      	sub	sp, #132	@ 0x84
 800aed0:	000f      	movs	r7, r1
 800aed2:	0015      	movs	r5, r2
 800aed4:	001e      	movs	r6, r3
 800aed6:	9003      	str	r0, [sp, #12]
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d004      	beq.n	800aee6 <_vfiprintf_r+0x1a>
 800aedc:	6a03      	ldr	r3, [r0, #32]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <_vfiprintf_r+0x1a>
 800aee2:	f7fc fd3b 	bl	800795c <__sinit>
 800aee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aee8:	07db      	lsls	r3, r3, #31
 800aeea:	d405      	bmi.n	800aef8 <_vfiprintf_r+0x2c>
 800aeec:	89bb      	ldrh	r3, [r7, #12]
 800aeee:	059b      	lsls	r3, r3, #22
 800aef0:	d402      	bmi.n	800aef8 <_vfiprintf_r+0x2c>
 800aef2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aef4:	f7fc fe57 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 800aef8:	89bb      	ldrh	r3, [r7, #12]
 800aefa:	071b      	lsls	r3, r3, #28
 800aefc:	d502      	bpl.n	800af04 <_vfiprintf_r+0x38>
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d113      	bne.n	800af2c <_vfiprintf_r+0x60>
 800af04:	0039      	movs	r1, r7
 800af06:	9803      	ldr	r0, [sp, #12]
 800af08:	f000 f93e 	bl	800b188 <__swsetup_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d00d      	beq.n	800af2c <_vfiprintf_r+0x60>
 800af10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d503      	bpl.n	800af1e <_vfiprintf_r+0x52>
 800af16:	2001      	movs	r0, #1
 800af18:	4240      	negs	r0, r0
 800af1a:	b021      	add	sp, #132	@ 0x84
 800af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1e:	89bb      	ldrh	r3, [r7, #12]
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	d4f8      	bmi.n	800af16 <_vfiprintf_r+0x4a>
 800af24:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800af26:	f7fc fe3f 	bl	8007ba8 <__retarget_lock_release_recursive>
 800af2a:	e7f4      	b.n	800af16 <_vfiprintf_r+0x4a>
 800af2c:	2300      	movs	r3, #0
 800af2e:	ac08      	add	r4, sp, #32
 800af30:	6163      	str	r3, [r4, #20]
 800af32:	3320      	adds	r3, #32
 800af34:	7663      	strb	r3, [r4, #25]
 800af36:	3310      	adds	r3, #16
 800af38:	76a3      	strb	r3, [r4, #26]
 800af3a:	9607      	str	r6, [sp, #28]
 800af3c:	002e      	movs	r6, r5
 800af3e:	7833      	ldrb	r3, [r6, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <_vfiprintf_r+0x7c>
 800af44:	2b25      	cmp	r3, #37	@ 0x25
 800af46:	d148      	bne.n	800afda <_vfiprintf_r+0x10e>
 800af48:	1b73      	subs	r3, r6, r5
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	42ae      	cmp	r6, r5
 800af4e:	d00b      	beq.n	800af68 <_vfiprintf_r+0x9c>
 800af50:	002a      	movs	r2, r5
 800af52:	0039      	movs	r1, r7
 800af54:	9803      	ldr	r0, [sp, #12]
 800af56:	f7ff ffa7 	bl	800aea8 <__sfputs_r>
 800af5a:	3001      	adds	r0, #1
 800af5c:	d100      	bne.n	800af60 <_vfiprintf_r+0x94>
 800af5e:	e0ae      	b.n	800b0be <_vfiprintf_r+0x1f2>
 800af60:	6963      	ldr	r3, [r4, #20]
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	189b      	adds	r3, r3, r2
 800af66:	6163      	str	r3, [r4, #20]
 800af68:	7833      	ldrb	r3, [r6, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d100      	bne.n	800af70 <_vfiprintf_r+0xa4>
 800af6e:	e0a6      	b.n	800b0be <_vfiprintf_r+0x1f2>
 800af70:	2201      	movs	r2, #1
 800af72:	2300      	movs	r3, #0
 800af74:	4252      	negs	r2, r2
 800af76:	6062      	str	r2, [r4, #4]
 800af78:	a904      	add	r1, sp, #16
 800af7a:	3254      	adds	r2, #84	@ 0x54
 800af7c:	1852      	adds	r2, r2, r1
 800af7e:	1c75      	adds	r5, r6, #1
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	60e3      	str	r3, [r4, #12]
 800af84:	60a3      	str	r3, [r4, #8]
 800af86:	7013      	strb	r3, [r2, #0]
 800af88:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af8a:	4b59      	ldr	r3, [pc, #356]	@ (800b0f0 <_vfiprintf_r+0x224>)
 800af8c:	2205      	movs	r2, #5
 800af8e:	0018      	movs	r0, r3
 800af90:	7829      	ldrb	r1, [r5, #0]
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	f7fc fe09 	bl	8007baa <memchr>
 800af98:	1c6e      	adds	r6, r5, #1
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d11f      	bne.n	800afde <_vfiprintf_r+0x112>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	06d3      	lsls	r3, r2, #27
 800afa2:	d504      	bpl.n	800afae <_vfiprintf_r+0xe2>
 800afa4:	2353      	movs	r3, #83	@ 0x53
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	185b      	adds	r3, r3, r1
 800afaa:	2120      	movs	r1, #32
 800afac:	7019      	strb	r1, [r3, #0]
 800afae:	0713      	lsls	r3, r2, #28
 800afb0:	d504      	bpl.n	800afbc <_vfiprintf_r+0xf0>
 800afb2:	2353      	movs	r3, #83	@ 0x53
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	185b      	adds	r3, r3, r1
 800afb8:	212b      	movs	r1, #43	@ 0x2b
 800afba:	7019      	strb	r1, [r3, #0]
 800afbc:	782b      	ldrb	r3, [r5, #0]
 800afbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800afc0:	d016      	beq.n	800aff0 <_vfiprintf_r+0x124>
 800afc2:	002e      	movs	r6, r5
 800afc4:	2100      	movs	r1, #0
 800afc6:	200a      	movs	r0, #10
 800afc8:	68e3      	ldr	r3, [r4, #12]
 800afca:	7832      	ldrb	r2, [r6, #0]
 800afcc:	1c75      	adds	r5, r6, #1
 800afce:	3a30      	subs	r2, #48	@ 0x30
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	d950      	bls.n	800b076 <_vfiprintf_r+0x1aa>
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d111      	bne.n	800affc <_vfiprintf_r+0x130>
 800afd8:	e017      	b.n	800b00a <_vfiprintf_r+0x13e>
 800afda:	3601      	adds	r6, #1
 800afdc:	e7af      	b.n	800af3e <_vfiprintf_r+0x72>
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	2301      	movs	r3, #1
 800afe6:	4083      	lsls	r3, r0
 800afe8:	4313      	orrs	r3, r2
 800afea:	0035      	movs	r5, r6
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	e7cc      	b.n	800af8a <_vfiprintf_r+0xbe>
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	1d19      	adds	r1, r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	9107      	str	r1, [sp, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	db01      	blt.n	800b000 <_vfiprintf_r+0x134>
 800affc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800affe:	e004      	b.n	800b00a <_vfiprintf_r+0x13e>
 800b000:	425b      	negs	r3, r3
 800b002:	60e3      	str	r3, [r4, #12]
 800b004:	2302      	movs	r3, #2
 800b006:	4313      	orrs	r3, r2
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	7833      	ldrb	r3, [r6, #0]
 800b00c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b00e:	d10c      	bne.n	800b02a <_vfiprintf_r+0x15e>
 800b010:	7873      	ldrb	r3, [r6, #1]
 800b012:	2b2a      	cmp	r3, #42	@ 0x2a
 800b014:	d134      	bne.n	800b080 <_vfiprintf_r+0x1b4>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	3602      	adds	r6, #2
 800b01a:	1d1a      	adds	r2, r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	9207      	str	r2, [sp, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	da01      	bge.n	800b028 <_vfiprintf_r+0x15c>
 800b024:	2301      	movs	r3, #1
 800b026:	425b      	negs	r3, r3
 800b028:	9309      	str	r3, [sp, #36]	@ 0x24
 800b02a:	4d32      	ldr	r5, [pc, #200]	@ (800b0f4 <_vfiprintf_r+0x228>)
 800b02c:	2203      	movs	r2, #3
 800b02e:	0028      	movs	r0, r5
 800b030:	7831      	ldrb	r1, [r6, #0]
 800b032:	f7fc fdba 	bl	8007baa <memchr>
 800b036:	2800      	cmp	r0, #0
 800b038:	d006      	beq.n	800b048 <_vfiprintf_r+0x17c>
 800b03a:	2340      	movs	r3, #64	@ 0x40
 800b03c:	1b40      	subs	r0, r0, r5
 800b03e:	4083      	lsls	r3, r0
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	3601      	adds	r6, #1
 800b044:	4313      	orrs	r3, r2
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	7831      	ldrb	r1, [r6, #0]
 800b04a:	2206      	movs	r2, #6
 800b04c:	482a      	ldr	r0, [pc, #168]	@ (800b0f8 <_vfiprintf_r+0x22c>)
 800b04e:	1c75      	adds	r5, r6, #1
 800b050:	7621      	strb	r1, [r4, #24]
 800b052:	f7fc fdaa 	bl	8007baa <memchr>
 800b056:	2800      	cmp	r0, #0
 800b058:	d040      	beq.n	800b0dc <_vfiprintf_r+0x210>
 800b05a:	4b28      	ldr	r3, [pc, #160]	@ (800b0fc <_vfiprintf_r+0x230>)
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d122      	bne.n	800b0a6 <_vfiprintf_r+0x1da>
 800b060:	2207      	movs	r2, #7
 800b062:	9b07      	ldr	r3, [sp, #28]
 800b064:	3307      	adds	r3, #7
 800b066:	4393      	bics	r3, r2
 800b068:	3308      	adds	r3, #8
 800b06a:	9307      	str	r3, [sp, #28]
 800b06c:	6963      	ldr	r3, [r4, #20]
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	189b      	adds	r3, r3, r2
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	e762      	b.n	800af3c <_vfiprintf_r+0x70>
 800b076:	4343      	muls	r3, r0
 800b078:	002e      	movs	r6, r5
 800b07a:	2101      	movs	r1, #1
 800b07c:	189b      	adds	r3, r3, r2
 800b07e:	e7a4      	b.n	800afca <_vfiprintf_r+0xfe>
 800b080:	2300      	movs	r3, #0
 800b082:	200a      	movs	r0, #10
 800b084:	0019      	movs	r1, r3
 800b086:	3601      	adds	r6, #1
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	7832      	ldrb	r2, [r6, #0]
 800b08c:	1c75      	adds	r5, r6, #1
 800b08e:	3a30      	subs	r2, #48	@ 0x30
 800b090:	2a09      	cmp	r2, #9
 800b092:	d903      	bls.n	800b09c <_vfiprintf_r+0x1d0>
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0c8      	beq.n	800b02a <_vfiprintf_r+0x15e>
 800b098:	9109      	str	r1, [sp, #36]	@ 0x24
 800b09a:	e7c6      	b.n	800b02a <_vfiprintf_r+0x15e>
 800b09c:	4341      	muls	r1, r0
 800b09e:	002e      	movs	r6, r5
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	1889      	adds	r1, r1, r2
 800b0a4:	e7f1      	b.n	800b08a <_vfiprintf_r+0x1be>
 800b0a6:	aa07      	add	r2, sp, #28
 800b0a8:	9200      	str	r2, [sp, #0]
 800b0aa:	0021      	movs	r1, r4
 800b0ac:	003a      	movs	r2, r7
 800b0ae:	4b14      	ldr	r3, [pc, #80]	@ (800b100 <_vfiprintf_r+0x234>)
 800b0b0:	9803      	ldr	r0, [sp, #12]
 800b0b2:	f7fb fdf9 	bl	8006ca8 <_printf_float>
 800b0b6:	9004      	str	r0, [sp, #16]
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	d1d6      	bne.n	800b06c <_vfiprintf_r+0x1a0>
 800b0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0c0:	07db      	lsls	r3, r3, #31
 800b0c2:	d405      	bmi.n	800b0d0 <_vfiprintf_r+0x204>
 800b0c4:	89bb      	ldrh	r3, [r7, #12]
 800b0c6:	059b      	lsls	r3, r3, #22
 800b0c8:	d402      	bmi.n	800b0d0 <_vfiprintf_r+0x204>
 800b0ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b0cc:	f7fc fd6c 	bl	8007ba8 <__retarget_lock_release_recursive>
 800b0d0:	89bb      	ldrh	r3, [r7, #12]
 800b0d2:	065b      	lsls	r3, r3, #25
 800b0d4:	d500      	bpl.n	800b0d8 <_vfiprintf_r+0x20c>
 800b0d6:	e71e      	b.n	800af16 <_vfiprintf_r+0x4a>
 800b0d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b0da:	e71e      	b.n	800af1a <_vfiprintf_r+0x4e>
 800b0dc:	aa07      	add	r2, sp, #28
 800b0de:	9200      	str	r2, [sp, #0]
 800b0e0:	0021      	movs	r1, r4
 800b0e2:	003a      	movs	r2, r7
 800b0e4:	4b06      	ldr	r3, [pc, #24]	@ (800b100 <_vfiprintf_r+0x234>)
 800b0e6:	9803      	ldr	r0, [sp, #12]
 800b0e8:	f7fc f88c 	bl	8007204 <_printf_i>
 800b0ec:	e7e3      	b.n	800b0b6 <_vfiprintf_r+0x1ea>
 800b0ee:	46c0      	nop			@ (mov r8, r8)
 800b0f0:	0800bba1 	.word	0x0800bba1
 800b0f4:	0800bba7 	.word	0x0800bba7
 800b0f8:	0800bbab 	.word	0x0800bbab
 800b0fc:	08006ca9 	.word	0x08006ca9
 800b100:	0800aea9 	.word	0x0800aea9

0800b104 <__swbuf_r>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	0006      	movs	r6, r0
 800b108:	000d      	movs	r5, r1
 800b10a:	0014      	movs	r4, r2
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d004      	beq.n	800b11a <__swbuf_r+0x16>
 800b110:	6a03      	ldr	r3, [r0, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <__swbuf_r+0x16>
 800b116:	f7fc fc21 	bl	800795c <__sinit>
 800b11a:	69a3      	ldr	r3, [r4, #24]
 800b11c:	60a3      	str	r3, [r4, #8]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	071b      	lsls	r3, r3, #28
 800b122:	d502      	bpl.n	800b12a <__swbuf_r+0x26>
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <__swbuf_r+0x3a>
 800b12a:	0021      	movs	r1, r4
 800b12c:	0030      	movs	r0, r6
 800b12e:	f000 f82b 	bl	800b188 <__swsetup_r>
 800b132:	2800      	cmp	r0, #0
 800b134:	d003      	beq.n	800b13e <__swbuf_r+0x3a>
 800b136:	2501      	movs	r5, #1
 800b138:	426d      	negs	r5, r5
 800b13a:	0028      	movs	r0, r5
 800b13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	b2ef      	uxtb	r7, r5
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	6963      	ldr	r3, [r4, #20]
 800b148:	b2ed      	uxtb	r5, r5
 800b14a:	4283      	cmp	r3, r0
 800b14c:	dc05      	bgt.n	800b15a <__swbuf_r+0x56>
 800b14e:	0021      	movs	r1, r4
 800b150:	0030      	movs	r0, r6
 800b152:	f7ff fa0f 	bl	800a574 <_fflush_r>
 800b156:	2800      	cmp	r0, #0
 800b158:	d1ed      	bne.n	800b136 <__swbuf_r+0x32>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	3001      	adds	r0, #1
 800b15e:	3b01      	subs	r3, #1
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	701f      	strb	r7, [r3, #0]
 800b16a:	6963      	ldr	r3, [r4, #20]
 800b16c:	4283      	cmp	r3, r0
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x76>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d5e1      	bpl.n	800b13a <__swbuf_r+0x36>
 800b176:	2d0a      	cmp	r5, #10
 800b178:	d1df      	bne.n	800b13a <__swbuf_r+0x36>
 800b17a:	0021      	movs	r1, r4
 800b17c:	0030      	movs	r0, r6
 800b17e:	f7ff f9f9 	bl	800a574 <_fflush_r>
 800b182:	2800      	cmp	r0, #0
 800b184:	d0d9      	beq.n	800b13a <__swbuf_r+0x36>
 800b186:	e7d6      	b.n	800b136 <__swbuf_r+0x32>

0800b188 <__swsetup_r>:
 800b188:	4b2d      	ldr	r3, [pc, #180]	@ (800b240 <__swsetup_r+0xb8>)
 800b18a:	b570      	push	{r4, r5, r6, lr}
 800b18c:	0005      	movs	r5, r0
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	000c      	movs	r4, r1
 800b192:	2800      	cmp	r0, #0
 800b194:	d004      	beq.n	800b1a0 <__swsetup_r+0x18>
 800b196:	6a03      	ldr	r3, [r0, #32]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <__swsetup_r+0x18>
 800b19c:	f7fc fbde 	bl	800795c <__sinit>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	5ee2      	ldrsh	r2, [r4, r3]
 800b1a4:	0713      	lsls	r3, r2, #28
 800b1a6:	d423      	bmi.n	800b1f0 <__swsetup_r+0x68>
 800b1a8:	06d3      	lsls	r3, r2, #27
 800b1aa:	d407      	bmi.n	800b1bc <__swsetup_r+0x34>
 800b1ac:	2309      	movs	r3, #9
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	2340      	movs	r3, #64	@ 0x40
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	4240      	negs	r0, r0
 800b1ba:	e03a      	b.n	800b232 <__swsetup_r+0xaa>
 800b1bc:	0752      	lsls	r2, r2, #29
 800b1be:	d513      	bpl.n	800b1e8 <__swsetup_r+0x60>
 800b1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	d008      	beq.n	800b1d8 <__swsetup_r+0x50>
 800b1c6:	0023      	movs	r3, r4
 800b1c8:	3344      	adds	r3, #68	@ 0x44
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	d002      	beq.n	800b1d4 <__swsetup_r+0x4c>
 800b1ce:	0028      	movs	r0, r5
 800b1d0:	f7fd fb7c 	bl	80088cc <_free_r>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1d8:	2224      	movs	r2, #36	@ 0x24
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	4393      	bics	r3, r2
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6063      	str	r3, [r4, #4]
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	89a2      	ldrh	r2, [r4, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10b      	bne.n	800b20e <__swsetup_r+0x86>
 800b1f6:	21a0      	movs	r1, #160	@ 0xa0
 800b1f8:	2280      	movs	r2, #128	@ 0x80
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	0089      	lsls	r1, r1, #2
 800b1fe:	0092      	lsls	r2, r2, #2
 800b200:	400b      	ands	r3, r1
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <__swsetup_r+0x86>
 800b206:	0021      	movs	r1, r4
 800b208:	0028      	movs	r0, r5
 800b20a:	f000 f88f 	bl	800b32c <__smakebuf_r>
 800b20e:	230c      	movs	r3, #12
 800b210:	5ee2      	ldrsh	r2, [r4, r3]
 800b212:	2101      	movs	r1, #1
 800b214:	0013      	movs	r3, r2
 800b216:	400b      	ands	r3, r1
 800b218:	420a      	tst	r2, r1
 800b21a:	d00b      	beq.n	800b234 <__swsetup_r+0xac>
 800b21c:	2300      	movs	r3, #0
 800b21e:	60a3      	str	r3, [r4, #8]
 800b220:	6963      	ldr	r3, [r4, #20]
 800b222:	425b      	negs	r3, r3
 800b224:	61a3      	str	r3, [r4, #24]
 800b226:	2000      	movs	r0, #0
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	4283      	cmp	r3, r0
 800b22c:	d101      	bne.n	800b232 <__swsetup_r+0xaa>
 800b22e:	0613      	lsls	r3, r2, #24
 800b230:	d4be      	bmi.n	800b1b0 <__swsetup_r+0x28>
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	0791      	lsls	r1, r2, #30
 800b236:	d400      	bmi.n	800b23a <__swsetup_r+0xb2>
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	60a3      	str	r3, [r4, #8]
 800b23c:	e7f3      	b.n	800b226 <__swsetup_r+0x9e>
 800b23e:	46c0      	nop			@ (mov r8, r8)
 800b240:	20000018 	.word	0x20000018

0800b244 <_raise_r>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	0004      	movs	r4, r0
 800b248:	000d      	movs	r5, r1
 800b24a:	291f      	cmp	r1, #31
 800b24c:	d904      	bls.n	800b258 <_raise_r+0x14>
 800b24e:	2316      	movs	r3, #22
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	2001      	movs	r0, #1
 800b254:	4240      	negs	r0, r0
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <_raise_r+0x24>
 800b25e:	008a      	lsls	r2, r1, #2
 800b260:	189b      	adds	r3, r3, r2
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	2a00      	cmp	r2, #0
 800b266:	d108      	bne.n	800b27a <_raise_r+0x36>
 800b268:	0020      	movs	r0, r4
 800b26a:	f000 f831 	bl	800b2d0 <_getpid_r>
 800b26e:	002a      	movs	r2, r5
 800b270:	0001      	movs	r1, r0
 800b272:	0020      	movs	r0, r4
 800b274:	f000 f81a 	bl	800b2ac <_kill_r>
 800b278:	e7ed      	b.n	800b256 <_raise_r+0x12>
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	d009      	beq.n	800b292 <_raise_r+0x4e>
 800b27e:	1c51      	adds	r1, r2, #1
 800b280:	d103      	bne.n	800b28a <_raise_r+0x46>
 800b282:	2316      	movs	r3, #22
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	2001      	movs	r0, #1
 800b288:	e7e5      	b.n	800b256 <_raise_r+0x12>
 800b28a:	2100      	movs	r1, #0
 800b28c:	0028      	movs	r0, r5
 800b28e:	6019      	str	r1, [r3, #0]
 800b290:	4790      	blx	r2
 800b292:	2000      	movs	r0, #0
 800b294:	e7df      	b.n	800b256 <_raise_r+0x12>
	...

0800b298 <raise>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <raise+0x10>)
 800b29c:	0001      	movs	r1, r0
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	f7ff ffd0 	bl	800b244 <_raise_r>
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	20000018 	.word	0x20000018

0800b2ac <_kill_r>:
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	b570      	push	{r4, r5, r6, lr}
 800b2b0:	4d06      	ldr	r5, [pc, #24]	@ (800b2cc <_kill_r+0x20>)
 800b2b2:	0004      	movs	r4, r0
 800b2b4:	0008      	movs	r0, r1
 800b2b6:	0011      	movs	r1, r2
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	f7f8 fdf6 	bl	8003eaa <_kill>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d103      	bne.n	800b2ca <_kill_r+0x1e>
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d000      	beq.n	800b2ca <_kill_r+0x1e>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	2000042c 	.word	0x2000042c

0800b2d0 <_getpid_r>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	f7f8 fde4 	bl	8003e9e <_getpid>
 800b2d6:	bd10      	pop	{r4, pc}

0800b2d8 <__swhatbuf_r>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	000e      	movs	r6, r1
 800b2dc:	001d      	movs	r5, r3
 800b2de:	230e      	movs	r3, #14
 800b2e0:	5ec9      	ldrsh	r1, [r1, r3]
 800b2e2:	0014      	movs	r4, r2
 800b2e4:	b096      	sub	sp, #88	@ 0x58
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	da0c      	bge.n	800b304 <__swhatbuf_r+0x2c>
 800b2ea:	89b2      	ldrh	r2, [r6, #12]
 800b2ec:	2380      	movs	r3, #128	@ 0x80
 800b2ee:	0011      	movs	r1, r2
 800b2f0:	4019      	ands	r1, r3
 800b2f2:	421a      	tst	r2, r3
 800b2f4:	d114      	bne.n	800b320 <__swhatbuf_r+0x48>
 800b2f6:	2380      	movs	r3, #128	@ 0x80
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	6029      	str	r1, [r5, #0]
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	b016      	add	sp, #88	@ 0x58
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	466a      	mov	r2, sp
 800b306:	f000 f853 	bl	800b3b0 <_fstat_r>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	dbed      	blt.n	800b2ea <__swhatbuf_r+0x12>
 800b30e:	23f0      	movs	r3, #240	@ 0xf0
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	4019      	ands	r1, r3
 800b316:	4b04      	ldr	r3, [pc, #16]	@ (800b328 <__swhatbuf_r+0x50>)
 800b318:	18c9      	adds	r1, r1, r3
 800b31a:	424b      	negs	r3, r1
 800b31c:	4159      	adcs	r1, r3
 800b31e:	e7ea      	b.n	800b2f6 <__swhatbuf_r+0x1e>
 800b320:	2100      	movs	r1, #0
 800b322:	2340      	movs	r3, #64	@ 0x40
 800b324:	e7e9      	b.n	800b2fa <__swhatbuf_r+0x22>
 800b326:	46c0      	nop			@ (mov r8, r8)
 800b328:	ffffe000 	.word	0xffffe000

0800b32c <__smakebuf_r>:
 800b32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32e:	2602      	movs	r6, #2
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	0005      	movs	r5, r0
 800b334:	000c      	movs	r4, r1
 800b336:	b085      	sub	sp, #20
 800b338:	4233      	tst	r3, r6
 800b33a:	d007      	beq.n	800b34c <__smakebuf_r+0x20>
 800b33c:	0023      	movs	r3, r4
 800b33e:	3347      	adds	r3, #71	@ 0x47
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	6123      	str	r3, [r4, #16]
 800b344:	2301      	movs	r3, #1
 800b346:	6163      	str	r3, [r4, #20]
 800b348:	b005      	add	sp, #20
 800b34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	aa02      	add	r2, sp, #8
 800b350:	f7ff ffc2 	bl	800b2d8 <__swhatbuf_r>
 800b354:	9f02      	ldr	r7, [sp, #8]
 800b356:	9001      	str	r0, [sp, #4]
 800b358:	0039      	movs	r1, r7
 800b35a:	0028      	movs	r0, r5
 800b35c:	f7fd fb2c 	bl	80089b8 <_malloc_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	d108      	bne.n	800b376 <__smakebuf_r+0x4a>
 800b364:	220c      	movs	r2, #12
 800b366:	5ea3      	ldrsh	r3, [r4, r2]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d4ed      	bmi.n	800b348 <__smakebuf_r+0x1c>
 800b36c:	2203      	movs	r2, #3
 800b36e:	4393      	bics	r3, r2
 800b370:	431e      	orrs	r6, r3
 800b372:	81a6      	strh	r6, [r4, #12]
 800b374:	e7e2      	b.n	800b33c <__smakebuf_r+0x10>
 800b376:	2380      	movs	r3, #128	@ 0x80
 800b378:	89a2      	ldrh	r2, [r4, #12]
 800b37a:	6020      	str	r0, [r4, #0]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	6120      	str	r0, [r4, #16]
 800b384:	6167      	str	r7, [r4, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00c      	beq.n	800b3a4 <__smakebuf_r+0x78>
 800b38a:	0028      	movs	r0, r5
 800b38c:	230e      	movs	r3, #14
 800b38e:	5ee1      	ldrsh	r1, [r4, r3]
 800b390:	f000 f820 	bl	800b3d4 <_isatty_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	d005      	beq.n	800b3a4 <__smakebuf_r+0x78>
 800b398:	2303      	movs	r3, #3
 800b39a:	89a2      	ldrh	r2, [r4, #12]
 800b39c:	439a      	bics	r2, r3
 800b39e:	3b02      	subs	r3, #2
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	9a01      	ldr	r2, [sp, #4]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	e7cc      	b.n	800b348 <__smakebuf_r+0x1c>
	...

0800b3b0 <_fstat_r>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	4d06      	ldr	r5, [pc, #24]	@ (800b3d0 <_fstat_r+0x20>)
 800b3b6:	0004      	movs	r4, r0
 800b3b8:	0008      	movs	r0, r1
 800b3ba:	0011      	movs	r1, r2
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	f7f8 fdd4 	bl	8003f6a <_fstat>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d103      	bne.n	800b3ce <_fstat_r+0x1e>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d000      	beq.n	800b3ce <_fstat_r+0x1e>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}
 800b3d0:	2000042c 	.word	0x2000042c

0800b3d4 <_isatty_r>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	4d06      	ldr	r5, [pc, #24]	@ (800b3f4 <_isatty_r+0x20>)
 800b3da:	0004      	movs	r4, r0
 800b3dc:	0008      	movs	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f8 fdd1 	bl	8003f86 <_isatty>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d103      	bne.n	800b3f0 <_isatty_r+0x1c>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d000      	beq.n	800b3f0 <_isatty_r+0x1c>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
 800b3f2:	46c0      	nop			@ (mov r8, r8)
 800b3f4:	2000042c 	.word	0x2000042c

0800b3f8 <sqrt>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	0004      	movs	r4, r0
 800b3fc:	000d      	movs	r5, r1
 800b3fe:	f000 f821 	bl	800b444 <__ieee754_sqrt>
 800b402:	0022      	movs	r2, r4
 800b404:	0006      	movs	r6, r0
 800b406:	000f      	movs	r7, r1
 800b408:	002b      	movs	r3, r5
 800b40a:	0020      	movs	r0, r4
 800b40c:	0029      	movs	r1, r5
 800b40e:	f7f7 fd09 	bl	8002e24 <__aeabi_dcmpun>
 800b412:	2800      	cmp	r0, #0
 800b414:	d113      	bne.n	800b43e <sqrt+0x46>
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	0020      	movs	r0, r4
 800b41c:	0029      	movs	r1, r5
 800b41e:	f7f5 f81b 	bl	8000458 <__aeabi_dcmplt>
 800b422:	2800      	cmp	r0, #0
 800b424:	d00b      	beq.n	800b43e <sqrt+0x46>
 800b426:	f7fc fb93 	bl	8007b50 <__errno>
 800b42a:	2321      	movs	r3, #33	@ 0x21
 800b42c:	2200      	movs	r2, #0
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	2300      	movs	r3, #0
 800b432:	0010      	movs	r0, r2
 800b434:	0019      	movs	r1, r3
 800b436:	f7f6 fa4d 	bl	80018d4 <__aeabi_ddiv>
 800b43a:	0006      	movs	r6, r0
 800b43c:	000f      	movs	r7, r1
 800b43e:	0030      	movs	r0, r6
 800b440:	0039      	movs	r1, r7
 800b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b444 <__ieee754_sqrt>:
 800b444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b446:	000a      	movs	r2, r1
 800b448:	000d      	movs	r5, r1
 800b44a:	496d      	ldr	r1, [pc, #436]	@ (800b600 <__ieee754_sqrt+0x1bc>)
 800b44c:	0004      	movs	r4, r0
 800b44e:	0003      	movs	r3, r0
 800b450:	0008      	movs	r0, r1
 800b452:	b087      	sub	sp, #28
 800b454:	4028      	ands	r0, r5
 800b456:	4288      	cmp	r0, r1
 800b458:	d111      	bne.n	800b47e <__ieee754_sqrt+0x3a>
 800b45a:	0022      	movs	r2, r4
 800b45c:	002b      	movs	r3, r5
 800b45e:	0020      	movs	r0, r4
 800b460:	0029      	movs	r1, r5
 800b462:	f7f6 fe7b 	bl	800215c <__aeabi_dmul>
 800b466:	0002      	movs	r2, r0
 800b468:	000b      	movs	r3, r1
 800b46a:	0020      	movs	r0, r4
 800b46c:	0029      	movs	r1, r5
 800b46e:	f7f5 fecd 	bl	800120c <__aeabi_dadd>
 800b472:	0004      	movs	r4, r0
 800b474:	000d      	movs	r5, r1
 800b476:	0020      	movs	r0, r4
 800b478:	0029      	movs	r1, r5
 800b47a:	b007      	add	sp, #28
 800b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47e:	2d00      	cmp	r5, #0
 800b480:	dc11      	bgt.n	800b4a6 <__ieee754_sqrt+0x62>
 800b482:	0069      	lsls	r1, r5, #1
 800b484:	0849      	lsrs	r1, r1, #1
 800b486:	4321      	orrs	r1, r4
 800b488:	d0f5      	beq.n	800b476 <__ieee754_sqrt+0x32>
 800b48a:	2000      	movs	r0, #0
 800b48c:	4285      	cmp	r5, r0
 800b48e:	d010      	beq.n	800b4b2 <__ieee754_sqrt+0x6e>
 800b490:	0022      	movs	r2, r4
 800b492:	002b      	movs	r3, r5
 800b494:	0020      	movs	r0, r4
 800b496:	0029      	movs	r1, r5
 800b498:	f7f7 f928 	bl	80026ec <__aeabi_dsub>
 800b49c:	0002      	movs	r2, r0
 800b49e:	000b      	movs	r3, r1
 800b4a0:	f7f6 fa18 	bl	80018d4 <__aeabi_ddiv>
 800b4a4:	e7e5      	b.n	800b472 <__ieee754_sqrt+0x2e>
 800b4a6:	1528      	asrs	r0, r5, #20
 800b4a8:	d115      	bne.n	800b4d6 <__ieee754_sqrt+0x92>
 800b4aa:	2480      	movs	r4, #128	@ 0x80
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	0364      	lsls	r4, r4, #13
 800b4b0:	e007      	b.n	800b4c2 <__ieee754_sqrt+0x7e>
 800b4b2:	0ada      	lsrs	r2, r3, #11
 800b4b4:	3815      	subs	r0, #21
 800b4b6:	055b      	lsls	r3, r3, #21
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	d0fa      	beq.n	800b4b2 <__ieee754_sqrt+0x6e>
 800b4bc:	e7f5      	b.n	800b4aa <__ieee754_sqrt+0x66>
 800b4be:	0052      	lsls	r2, r2, #1
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	4222      	tst	r2, r4
 800b4c4:	d0fb      	beq.n	800b4be <__ieee754_sqrt+0x7a>
 800b4c6:	1e4c      	subs	r4, r1, #1
 800b4c8:	1b00      	subs	r0, r0, r4
 800b4ca:	2420      	movs	r4, #32
 800b4cc:	001d      	movs	r5, r3
 800b4ce:	1a64      	subs	r4, r4, r1
 800b4d0:	40e5      	lsrs	r5, r4
 800b4d2:	408b      	lsls	r3, r1
 800b4d4:	432a      	orrs	r2, r5
 800b4d6:	494b      	ldr	r1, [pc, #300]	@ (800b604 <__ieee754_sqrt+0x1c0>)
 800b4d8:	0312      	lsls	r2, r2, #12
 800b4da:	1844      	adds	r4, r0, r1
 800b4dc:	2180      	movs	r1, #128	@ 0x80
 800b4de:	0b12      	lsrs	r2, r2, #12
 800b4e0:	0349      	lsls	r1, r1, #13
 800b4e2:	4311      	orrs	r1, r2
 800b4e4:	07c0      	lsls	r0, r0, #31
 800b4e6:	d403      	bmi.n	800b4f0 <__ieee754_sqrt+0xac>
 800b4e8:	0fda      	lsrs	r2, r3, #31
 800b4ea:	0049      	lsls	r1, r1, #1
 800b4ec:	1851      	adds	r1, r2, r1
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	1062      	asrs	r2, r4, #1
 800b4f4:	0049      	lsls	r1, r1, #1
 800b4f6:	2480      	movs	r4, #128	@ 0x80
 800b4f8:	9205      	str	r2, [sp, #20]
 800b4fa:	0fda      	lsrs	r2, r3, #31
 800b4fc:	1852      	adds	r2, r2, r1
 800b4fe:	2016      	movs	r0, #22
 800b500:	0029      	movs	r1, r5
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	03a4      	lsls	r4, r4, #14
 800b506:	190e      	adds	r6, r1, r4
 800b508:	4296      	cmp	r6, r2
 800b50a:	dc02      	bgt.n	800b512 <__ieee754_sqrt+0xce>
 800b50c:	1931      	adds	r1, r6, r4
 800b50e:	1b92      	subs	r2, r2, r6
 800b510:	192d      	adds	r5, r5, r4
 800b512:	0fde      	lsrs	r6, r3, #31
 800b514:	0052      	lsls	r2, r2, #1
 800b516:	3801      	subs	r0, #1
 800b518:	1992      	adds	r2, r2, r6
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	0864      	lsrs	r4, r4, #1
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1f1      	bne.n	800b506 <__ieee754_sqrt+0xc2>
 800b522:	2620      	movs	r6, #32
 800b524:	2780      	movs	r7, #128	@ 0x80
 800b526:	0004      	movs	r4, r0
 800b528:	9604      	str	r6, [sp, #16]
 800b52a:	063f      	lsls	r7, r7, #24
 800b52c:	19c6      	adds	r6, r0, r7
 800b52e:	46b4      	mov	ip, r6
 800b530:	4291      	cmp	r1, r2
 800b532:	db02      	blt.n	800b53a <__ieee754_sqrt+0xf6>
 800b534:	d114      	bne.n	800b560 <__ieee754_sqrt+0x11c>
 800b536:	429e      	cmp	r6, r3
 800b538:	d812      	bhi.n	800b560 <__ieee754_sqrt+0x11c>
 800b53a:	4660      	mov	r0, ip
 800b53c:	4666      	mov	r6, ip
 800b53e:	19c0      	adds	r0, r0, r7
 800b540:	9100      	str	r1, [sp, #0]
 800b542:	2e00      	cmp	r6, #0
 800b544:	da03      	bge.n	800b54e <__ieee754_sqrt+0x10a>
 800b546:	43c6      	mvns	r6, r0
 800b548:	0ff6      	lsrs	r6, r6, #31
 800b54a:	198e      	adds	r6, r1, r6
 800b54c:	9600      	str	r6, [sp, #0]
 800b54e:	1a52      	subs	r2, r2, r1
 800b550:	4563      	cmp	r3, ip
 800b552:	4189      	sbcs	r1, r1
 800b554:	4249      	negs	r1, r1
 800b556:	1a52      	subs	r2, r2, r1
 800b558:	4661      	mov	r1, ip
 800b55a:	1a5b      	subs	r3, r3, r1
 800b55c:	9900      	ldr	r1, [sp, #0]
 800b55e:	19e4      	adds	r4, r4, r7
 800b560:	0fde      	lsrs	r6, r3, #31
 800b562:	0052      	lsls	r2, r2, #1
 800b564:	1992      	adds	r2, r2, r6
 800b566:	9e04      	ldr	r6, [sp, #16]
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	3e01      	subs	r6, #1
 800b56c:	087f      	lsrs	r7, r7, #1
 800b56e:	9604      	str	r6, [sp, #16]
 800b570:	2e00      	cmp	r6, #0
 800b572:	d1db      	bne.n	800b52c <__ieee754_sqrt+0xe8>
 800b574:	431a      	orrs	r2, r3
 800b576:	d01f      	beq.n	800b5b8 <__ieee754_sqrt+0x174>
 800b578:	4e23      	ldr	r6, [pc, #140]	@ (800b608 <__ieee754_sqrt+0x1c4>)
 800b57a:	4f24      	ldr	r7, [pc, #144]	@ (800b60c <__ieee754_sqrt+0x1c8>)
 800b57c:	6830      	ldr	r0, [r6, #0]
 800b57e:	6871      	ldr	r1, [r6, #4]
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	9200      	str	r2, [sp, #0]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	6832      	ldr	r2, [r6, #0]
 800b58a:	6873      	ldr	r3, [r6, #4]
 800b58c:	9202      	str	r2, [sp, #8]
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	9a00      	ldr	r2, [sp, #0]
 800b592:	9b01      	ldr	r3, [sp, #4]
 800b594:	f7f7 f8aa 	bl	80026ec <__aeabi_dsub>
 800b598:	0002      	movs	r2, r0
 800b59a:	000b      	movs	r3, r1
 800b59c:	9802      	ldr	r0, [sp, #8]
 800b59e:	9903      	ldr	r1, [sp, #12]
 800b5a0:	f7f4 ff64 	bl	800046c <__aeabi_dcmple>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d007      	beq.n	800b5b8 <__ieee754_sqrt+0x174>
 800b5a8:	6830      	ldr	r0, [r6, #0]
 800b5aa:	6871      	ldr	r1, [r6, #4]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	1c67      	adds	r7, r4, #1
 800b5b2:	d10f      	bne.n	800b5d4 <__ieee754_sqrt+0x190>
 800b5b4:	9c04      	ldr	r4, [sp, #16]
 800b5b6:	3501      	adds	r5, #1
 800b5b8:	4b15      	ldr	r3, [pc, #84]	@ (800b610 <__ieee754_sqrt+0x1cc>)
 800b5ba:	106a      	asrs	r2, r5, #1
 800b5bc:	18d2      	adds	r2, r2, r3
 800b5be:	0863      	lsrs	r3, r4, #1
 800b5c0:	07ed      	lsls	r5, r5, #31
 800b5c2:	d502      	bpl.n	800b5ca <__ieee754_sqrt+0x186>
 800b5c4:	2180      	movs	r1, #128	@ 0x80
 800b5c6:	0609      	lsls	r1, r1, #24
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	9905      	ldr	r1, [sp, #20]
 800b5cc:	001c      	movs	r4, r3
 800b5ce:	0509      	lsls	r1, r1, #20
 800b5d0:	188d      	adds	r5, r1, r2
 800b5d2:	e750      	b.n	800b476 <__ieee754_sqrt+0x32>
 800b5d4:	f7f5 fe1a 	bl	800120c <__aeabi_dadd>
 800b5d8:	6877      	ldr	r7, [r6, #4]
 800b5da:	6836      	ldr	r6, [r6, #0]
 800b5dc:	0002      	movs	r2, r0
 800b5de:	000b      	movs	r3, r1
 800b5e0:	0030      	movs	r0, r6
 800b5e2:	0039      	movs	r1, r7
 800b5e4:	f7f4 ff38 	bl	8000458 <__aeabi_dcmplt>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d004      	beq.n	800b5f6 <__ieee754_sqrt+0x1b2>
 800b5ec:	3402      	adds	r4, #2
 800b5ee:	4263      	negs	r3, r4
 800b5f0:	4163      	adcs	r3, r4
 800b5f2:	18ed      	adds	r5, r5, r3
 800b5f4:	e7e0      	b.n	800b5b8 <__ieee754_sqrt+0x174>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	3401      	adds	r4, #1
 800b5fa:	439c      	bics	r4, r3
 800b5fc:	e7dc      	b.n	800b5b8 <__ieee754_sqrt+0x174>
 800b5fe:	46c0      	nop			@ (mov r8, r8)
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	fffffc01 	.word	0xfffffc01
 800b608:	200001e0 	.word	0x200001e0
 800b60c:	200001d8 	.word	0x200001d8
 800b610:	3fe00000 	.word	0x3fe00000

0800b614 <_init>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	46c0      	nop			@ (mov r8, r8)
 800b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61a:	bc08      	pop	{r3}
 800b61c:	469e      	mov	lr, r3
 800b61e:	4770      	bx	lr

0800b620 <_fini>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	46c0      	nop			@ (mov r8, r8)
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr
